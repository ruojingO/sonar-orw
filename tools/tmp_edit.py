from pathlib import Path
path=Path('src/test/java/com/sonarorw/rules/RuleMappings.java')
text=path.read_text()
old_block='        mappings.add(RuleRecipeMapping.builder("S3986", "3986")\n                .recipes("org.openrewrite.staticanalysis.ReplaceWeekYearWithYear")\n                .additionalImports(\n                        "java.time.LocalDate",\n                        "java.time.format.DateTimeFormatter",\n                        "java.util.Locale")\n                .helperMembers("private final DateTimeFormatter weekFormatter = DateTimeFormatter.ofPattern(\\"YYYY/MM/dd\\", Locale.ENGLISH);",\n                        "    private final DateTimeFormatter yearFormatter = DateTimeFormatter.ofPattern(\\"yyyy/MM/dd\\", Locale.ENGLISH);")\n                .methodSignature("void formatSamples()")\n                .beforeAdjuster(new UnaryOperator<String>() {\n                    @Override\n                    public String apply(String s) {\n                        return s.replace("Date date = new SimpleDateFormat(\\"yyyy/MM/dd\\").parse(\\"2015/12/31\\");\\n", "LocalDate date = LocalDate.of(2015, 12, 31);\\n");\n                    }\n                })\n                .afterAdjuster(new UnaryOperator<String>() {\n                    @Override\n                    public String apply(String s) {\n                        return s.replace("Date date = new SimpleDateFormat(\\"yyyy/MM/dd\\").parse(\\"2015/12/31\\");\\n", "LocalDate date = LocalDate.of(2015, 12, 31);\\n");\n                    }\n                })\n                .trailingAppendix("// note: LocalDate avoids SimpleDateFormat parse exceptions during evaluation")\n                .build());\n\n\n'
replacement='        mappings.add(RuleRecipeMapping.builder("S3986", "3986")\n                .recipes("org.openrewrite.staticanalysis.ReplaceWeekYearWithYear")\n                .additionalImports(\n                        "java.text.ParseException",\n                        "java.text.SimpleDateFormat",\n                        "java.time.format.DateTimeFormatter",\n                        "java.util.Date")\n                .helperMembers("private Date parseDate() throws ParseException {", "        return new SimpleDateFormat(\\"yyyy/MM/dd\\").parse(\\"2015/12/31\\");", "    }")\n                .methodSignature("void formatSamples() throws ParseException")\n                .beforeAdjuster(new UnaryOperator<String>() {\n                    @Override\n                    public String apply(String s) {\n                        return s.replace("Date date = new SimpleDateFormat(\\"yyyy/MM/dd\\").parse(\\"2015/12/31\\");", "Date date = parseDate();");\n                    }\n                })\n                .afterAdjuster(new UnaryOperator<String>() {\n                    @Override\n                    public String apply(String s) {\n                        return s.replace("Date date = new SimpleDateFormat(\\"yyyy/MM/dd\\").parse(\\"2015/12/31\\");", "Date date = parseDate();");\n                    }\n                })\n                .build());\n\n\n'
if old_block not in text:
    raise SystemExit('LocalDate block not found')
text=text.replace(old_block,replacement)
path.write_text(text)
